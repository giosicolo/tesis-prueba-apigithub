[
  {
    "number": 108422,
    "title": "Metal: Fix `texture_get_data` other linear formats",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108422",
    "user": "stuartcarnie",
    "labels": [
      "bug",
      "platform:ios",
      "platform:macos",
      "topic:rendering",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-08T21:54:08Z",
    "updated_at": "2025-07-08T22:53:17Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Introduce a specialised `texture_get_data` for `RenderDeviceDriver`, which can retrieve the texture data from the GPU driver for shared textures (`TEXTURE_USAGE_CPU_READ_BIT`).    Vulkan and D3D12 continue to use the `texture_map` API, which has been copied from `RenderDevice` to each driver. Metal uses the `getBytes:` API to read each mip level.    ## APIs    Given that `RenderingDeviceDriver::texture_map` and ``RenderingDeviceDriver::texture_unmap` are only called internally by the `texture_get_data` function, these can probable be removed as virtual functions from `RenderingDeviceDriver`, so Metal doesn't have an incomplete implementation.    Closes #108115    <!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  "
  },
  {
    "number": 108421,
    "title": "Visual issue with scale of particles from CPUParticles2D when particle_flag_align_y is set to true",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108421",
    "user": "SenseiXiongmao",
    "labels": [
      "bug",
      "needs testing",
      "topic:particles"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [
      {
        "user": "Calinou",
        "created_at": "2025-07-09T00:01:18Z",
        "body": "Please upload a minimal reproduction project[^1] to make this easier to troubleshoot.  [^1]: A small Godot project which reproduces the issue, with no unnecessary files included. Be sure to not include the `.godot` folder in the archive (but keep `project.godot`).<br><br>Drag and drop a ZIP archive to upload it. **Do not select another field until the project is done uploading.**<br><br>**Note for C# users:** If your issue is *not* C#-specific, please upload a minimal reproduction project written in GDScript. This will make it easier for contributors to reproduce the issue locally as not everyone has a Mono setup available. "
      }
    ],
    "created_at": "2025-07-08T21:40:19Z",
    "updated_at": "2025-07-09T00:01:18Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  4.4.1  ### System information  Godot v4.4.1.stable - Windows 11 (build 26100) - Multi-window, 1 monitor - OpenGL 3 (Compatibility) - NVIDIA GeForce RTX 4070 Laptop GPU (NVIDIA; 32.0.15.5597) - 13th Gen Intel(R) Core(TM) i9-13900H (20 threads)  ### Issue description  particles from CPUParticles2D seem to increase massively in scale and fill the whole screen when they have no velocity and scale is higher than 1.0  see video below:  https://github.com/user-attachments/assets/43a34e7b-561e-4063-8764-e5fee2f387c7  ### Steps to reproduce  1. create a CPUParticles2D node 2. set particle_flag_align_y to true 3. set gravity to 0,0 4. set scale to anything higher than 1.0 5. watch the particles expand massively 6. set initial velocity to anything higher than 0.0 7. watch the particles go back to normal 8. set damping to anything higher than the initial velocity 9. watch the same visual issue happen again  ### Minimal reproduction project (MRP)  N/A"
  },
  {
    "number": 108420,
    "title": "GirdMap.get_orthogonal_index_from_basis should be static",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108420",
    "user": "devvoid",
    "labels": [],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-08T21:16:30Z",
    "updated_at": "2025-07-08T21:19:46Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - 4.4.1 - 4.5.beta.3  ### System information  Godot v4.5.beta3 - Windows 11 (build 26100) - Multi-window, 2 monitors - OpenGL 3 (Compatibility) - NVIDIA GeForce RTX 3050 Laptop GPU (NVIDIA; 32.0.15.6607) - AMD Ryzen 7 7435HS (16 threads) - 39.82 GiB memory  ### Issue description  The method `GridMap.get_orthogonal_index_from_basis` is not marked as static, even though it doesn't affect the underlying GridMap in any way. All it does is do a little math on the Basis to get an index for another table, that's it.  ### Steps to reproduce  - Try to call `GridMap.get_orthogonal_index_from_basis` as a static function - You receive an error message saying it can only be called on an instance.  ### Minimal reproduction project (MRP)  [new-game-project.zip](https://github.com/user-attachments/files/21131288/new-game-project.zip)"
  },
  {
    "number": 108419,
    "title": "Duplicating nodes in the scene tree (via CTRL+D) does not trigger the parent's add_child() method for custom types",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108419",
    "user": "OptimalFailure",
    "labels": [],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-08T21:14:50Z",
    "updated_at": "2025-07-08T21:14:50Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Reproducible in 4.4 stable  ### System information  Godot v4.4.stable - Windows 11 (build 26100) - Multi-window, 1 monitor - Vulkan (Mobile) - integrated Intel(R) Arc(TM) Graphics (Intel Corporation; 31.0.101.5125) - Intel(R) Core(TM) Ultra 5 125H (18 threads)  ### Issue description  I am working on a custom control node in a plugin. To keep track of the control's children, I am overriding the add_child() method. When I add a child via the + icon or the right-click -> add child menu, the add_child() method is called. When I duplicate an existing child with CTRL+D, the add_child method is not triggered.   ### Steps to reproduce  When simply overriding the add_child() method, you receive the warning \"Parse Error: The method \"add_child()\" overrides a method from native class \"Node\". This won't be called by the engine and may not work as expected. (Warning treated as error.)\"  Instead, it is necessary to create a plugin and a custom type to successfully override add_child(). Please see the MRP for an example; it should work out of the box. (Visit the scene control.tscn)  ### Minimal reproduction project (MRP)  [mrp.zip](https://github.com/user-attachments/files/21131276/mrp.zip)"
  },
  {
    "number": 108418,
    "title": "Improve error when `update_doc()` fails",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108418",
    "user": "KoBeWi",
    "labels": [
      "enhancement",
      "topic:editor"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-08T20:55:53Z",
    "updated_at": "2025-07-08T20:55:54Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "I'm sometimes getting annoying `!EditorHelp::has_doc(p_name)` error printed in the output. It's random, and when I restart to debug, it's no longer happening. The error prints when you save a script, but what exactly triggers it is a mystery.    This PR improves the message by printing the `p_name`, which might make it easier to pinpoint should the error happen again."
  },
  {
    "number": 108417,
    "title": "docs: fixed typo",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108417",
    "user": "rosshadden",
    "labels": [
      "bug",
      "documentation",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-08T20:21:53Z",
    "updated_at": "2025-07-09T00:22:02Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Fixed typo in the docs for `Object#get_signal_list`."
  },
  {
    "number": 108416,
    "title": "Scene viewer does not scroll when moving Node",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108416",
    "user": "notroid5",
    "labels": [],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-08T20:16:03Z",
    "updated_at": "2025-07-08T20:16:03Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Reproducible in: 4.4.1.stable  ### System information  Godot v4.4.1.stable - Ubuntu 24.04.2 LTS 24.04 on Wayland - X11 display driver, Multi-window, 1 monitor - OpenGL 3 (Compatibility) - AMD Radeon 760M (radeonsi, gfx1103_r1, LLVM 19.1.1, DRM 3.57, 6.8.0-63-generic) - AMD Ryzen 5 7640U w/ Radeon 760M Graphics (12 threads)  ### Issue description  When moving a (Child) Node with Ctrl+Up/Down, it does not scroll automatically if you get beyond the current view.  If you drag and drop, it does scroll in all 4 directions.  ### Steps to reproduce  - Make a Child Node - Copy it enough times to get a scroll bar - Make a different Child Node - Move it off-screen with Strg+Up/Down  ### Minimal reproduction project (MRP)  N/A"
  },
  {
    "number": 108415,
    "title": "Support defining unit tests in their own .cpp files",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108415",
    "user": "simpkins",
    "labels": [
      "enhancement",
      "topic:buildsystem",
      "topic:tests",
      "performance"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-08T17:38:51Z",
    "updated_at": "2025-07-08T21:05:34Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "All unit tests are currently compiled as part of `test_main.cpp`, which includes nearly 150 separate test header files.  This makes this file take a very long time to compile: over 50 seconds to compile on an AMD 7800X3D, and over 6 minutes to compile on an older Intel Core i7-4790K. This makes the edit-compile-test cycle rather painful when working on test code.  Splitting the tests into separate .cpp files allows them to be compiled in parallel, and allows recompiling just set of tests you care about when iterating on a specific test.    This commit updates the SConstruct and tests/SCsub files to link the unit test library with `-Wl,--whole-archive` or `/WHOLEARCHIVE`.  These flags allow unit test to be defined in their own separate `.cpp` files, instead of having to define all tests in `test_main.cpp`.    The `-Wl,--whole-archive` flag is necessary to ensure that the linker always includes the other `.cpp` files that define test cases. `test_main.cpp` gets included because `main/main.cpp` calls its `test_main()` function.  However, as far as the linker is concerned the editor does not directly reference functions in other test .cpp files, so it would omit them from the linked binary without this flag. The other .cpp files define constructor functions that should run before `main()` to register their tests, but unfortunately these constructor functions aren't sufficient to make the linker know that these files are required in the final binary.    I converted test_arraymesh.cpp just as a proof-of-concept.  The other test header files can be converted in the future if desired.    This was discussed somewhat in godotengine/godot-proposals#11654"
  },
  {
    "number": 108414,
    "title": "Engine.is_editor_hint() broken in 4.5beta2",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108414",
    "user": "clankill3r",
    "labels": [
      "archived"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [
      {
        "user": "AThousandShips",
        "created_at": "2025-07-08T16:30:21Z",
        "body": "You're not running a `@tool` script, so are you testing this when running the game? `is_editor_hint` *should* return `false` then: > Returns true if the script is currently running inside the editor, otherwise returns false. This is useful for `@tool` scripts to conditionally draw editor helpers, or prevent accidentally running \"game\" code that would affect the scene state while in the editor  So if this wasn't the case before that was a bug that's been fixed"
      },
      {
        "user": "Tattomoosa",
        "created_at": "2025-07-08T17:46:45Z",
        "body": "OP might be looking for `OS.has_feature(\"editor\")`"
      },
      {
        "user": "clankill3r",
        "created_at": "2025-07-08T19:47:17Z",
        "body": "Indeed it wasn't the case before. And yes `OS.has_feature(\"editor\")` is what I'm looking for, thx."
      }
    ],
    "created_at": "2025-07-08T16:23:06Z",
    "updated_at": "2025-07-08T22:03:08Z",
    "closed_at": "2025-07-08T19:47:17Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  tested in 4.5.beta2  ### System information  Godot v4.5.beta2 - Windows 10 (build 19045) - Multi-window, 1 monitor - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 2060 (NVIDIA; 32.0.15.7680) - Intel(R) Core(TM) i9-9980HK CPU @ 2.40GHz (16 threads) - 31.81 GiB memory  ### Issue description  `Engine.is_editor_hint()` always seems to return false now.  ### Steps to reproduce  Create a project and add this script:  ``` extends Node3D  func _ready() -> void: \tprint(Engine.is_editor_hint()) ```  ### Minimal reproduction project (MRP)  [editor-hint-test.zip](https://github.com/user-attachments/files/21125932/editor-hint-test.zip)"
  },
  {
    "number": 108413,
    "title": "Add after_ready() function in gdscript",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108413",
    "user": "keyzeuh",
    "labels": [
      "enhancement",
      "topic:core"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [],
    "created_at": "2025-07-08T16:05:33Z",
    "updated_at": "2025-07-08T21:21:14Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "<!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->    Adds support for a new GDScript lifecycle method: `after_ready()`   This method is automatically called **after `_ready()`** has run on all nodes in the scene tree, allowing logic to run when everything is fully initialized.    This addresses the proposal discussed here:  https://github.com/godotengine/godot-proposals/discussions/10889    ### Example    ```gdscript  extends Node2D    func _ready():      print(\"ready\")    func after_ready():      print(\"after ready\")   ```     Output     ```  ready  after ready  ```    As seen above, `after_ready()` is called **after** the `_ready()` method finishes  "
  },
  {
    "number": 108412,
    "title": "linux/bsd/mac: Use pkill to stop remote instance over SSH",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108412",
    "user": "wjt",
    "labels": [],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-08T15:24:38Z",
    "updated_at": "2025-07-08T15:24:38Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": true,
    "body": "Previously, the PIDs of any running instances of the game on the remote device were found with `pgrep`, whose output was passed as parameters to `kill`. The problem with doing this is that passing zero arguments to `kill` (which happens when no instances of the game are running remotely) is an error: it shows the command usage, and exits with status 2 indicating a command-line syntax error:        $ kill      kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]      $ echo $?      2    As far as I can tell, all systems that have a `pgrep` command also have a `pkill` command which accepts (a superset of) the same parameters as `pgrep` and kills the matched processes instead of listing them on STDOUT.    In the case where no processes match, `pkill` exits with status 1; but does so silently.    Invoke `pkill` rather than `pgrep` + `kill`.  "
  },
  {
    "number": 108411,
    "title": "Colision shape 3d issue",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108411",
    "user": "Another0neBYTES",
    "labels": [
      "archived"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [
      {
        "user": "Calinou",
        "created_at": "2025-07-08T15:21:27Z",
        "body": "This is expected, as resources are shared across nodes until you use **Make Unique** in the inspector resource dropdown on a given resource. This is done for performance reasons, but making resources shared also has many practical use cases."
      }
    ],
    "created_at": "2025-07-08T15:02:48Z",
    "updated_at": "2025-07-08T15:21:34Z",
    "closed_at": "2025-07-08T15:21:27Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  In Godot version 4.4,   ### System information  Godot v4.4.1.stable - Windows 10 (build 19045) - Multi-window, 2 monitors - Vulkan (Forward+) - dedicated Radeon RX 580 Series (Advanced Micro Devices, Inc.; 31.0.21923.1000) - AMD Ryzen 7 2700X Eight-Core Processor (16 threads)  ### Issue description  When copying a node with a ColisionShape3d node as a child and reshaping the copied ColisionShape3d, the original ColisionShape3d is shaped the same way and vise versa.  ### Steps to reproduce  Make a Node3d with an Area3d child node and a ColisionShape3d a child of the Area3d node, copy the Node3d, change the shape of the ColisionShape3d (either the copied or original)  ### Minimal reproduction project (MRP)  [resident_evil_(retro)_like_game_2025-07-08_11-01-42.zip](https://github.com/user-attachments/files/21124335/resident_evil_.retro._like_game_2025-07-08_11-01-42.zip)"
  },
  {
    "number": 108410,
    "title": "Remove PropertyTweener start warning",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108410",
    "user": "KoBeWi",
    "labels": [
      "enhancement",
      "topic:animation"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-08T13:58:40Z",
    "updated_at": "2025-07-08T13:58:41Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "I'm not sure tbh why this warning exists. When the Object is freed mid-tweening, there is no warning. No other Tweener has similar warning.    What led to me opening this PR is that I encountered a case where this warning is unavoidable, unless you manually kill the Tween. I have a Tween running a few loops with a very short time. If the object is destroyed during the animation, there is high chance it will happen between steps and the next PropertyTweener will issue a warning for no reason."
  },
  {
    "number": 108409,
    "title": "Script editor: Method tooltips blocks mouse-wheel scrolling when open in 4.5",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108409",
    "user": "Reneator",
    "labels": [
      "bug",
      "topic:editor",
      "needs testing",
      "regression"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [
      {
        "user": "precup",
        "created_at": "2025-07-08T14:34:15Z",
        "body": "Can't reproduce on X based Linux or Windows 10, tried a few versions and projects.  > Godot v4.5.beta2 - Windows 10 (build 19045) - Multi-window, 3 monitors - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 2080 Ti (NVIDIA; 31.0.15.3713) - AMD Ryzen 9 3900X 12-Core Processor (24 threads) - 31.94 GiB memory"
      },
      {
        "user": "Reneator",
        "created_at": "2025-07-08T20:30:03Z",
        "body": "On my MacBook Pro 2,3 GHz Quad-Core Intel Core i5 Intel Iris Plus Graphics 655 1536 MB, macOs 14.5:  Tested with 4.5.dev4 and 4.5 beta2, identical behaviour  When scrolling with the touchpad the tooltip stays until i move the mouse, but it doesnt block the scrolling. When i hover the mouse into the tooltip it correctly catches the scrolling  Sorry, dont have any mouse available for the mac.  https://github.com/user-attachments/assets/ed00a2c6-0e00-4bb3-8ec9-b34fc5d576dd "
      }
    ],
    "created_at": "2025-07-08T13:45:28Z",
    "updated_at": "2025-07-08T20:37:54Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in Godot 4.5 dev.2 up to 4.5.beta2 - Not reproducible in Godot 4.4 stable  ### System information  Windows 10 - Godot 4.5.beta2  ### Issue description  When scrolling through the Script editor, when the tooltip for when you hover a method pops up, its no longer possible to keep scrolling with my mousewheel. Even when not entering the tooltip with a mouse. To be able to continue scrolling i first have to move my mouse so the tooltip closes again.  Godot 4.5:  https://github.com/user-attachments/assets/f6c216af-6cfa-40c6-a3a9-5e4b2a422724   In godot 4.4 this still works as expected:  Godot 4.4:  https://github.com/user-attachments/assets/58805b3a-6cde-4000-9aff-fb563b331e1e  ### Steps to reproduce  Scroll through a Script, hover over a function and try to scroll with your mouse-wheel.  ### Minimal reproduction project (MRP)  Any project with any script file that is longer than you screen and has to be scrolled."
  },
  {
    "number": 108408,
    "title": "Problems with exporting project that use SVG as XML",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108408",
    "user": "ANGulchenko",
    "labels": [
      "archived"
    ],
    "assignee": "",
    "comments_count": 4,
    "comments": [
      {
        "user": "AThousandShips",
        "created_at": "2025-07-08T13:33:13Z",
        "body": "This is expected, and documented, see [importing assets](https://docs.godotengine.org/en/stable/tutorials/assets_pipeline/import_process.html#importing-assets-in-godot) and [`FileAccess`](https://docs.godotengine.org/en/stable/classes/class_fileaccess.html#class-fileaccess)  Load the file with `ResourceLoader` instead"
      },
      {
        "user": "ANGulchenko",
        "created_at": "2025-07-08T14:13:56Z",
        "body": "> Load the file with `ResourceLoader` instead  From documentation(https://docs.godotengine.org/en/stable/classes/class_resourceloader.html#class-resourceloader): Note: Non-resource files such as **plain text** files cannot be read using ResourceLoader.  https://docs.godotengine.org/en/stable/classes/class_xmlparser.html XMLParser  also doesn't mention ResourceLoader. And this is how I experimented with XML:  ``` var xml = XMLParser.new() var error = xml.open(file_path) ```  Are you sure about ResourceLoader? No idea how to use it by the way: load(...) return Resource which is... What am I supposed to do with it?"
      },
      {
        "user": "AThousandShips",
        "created_at": "2025-07-08T14:15:19Z",
        "body": "Then you shouldn't import them, but I don't see why you'd use the wrong file format? Pick \"Keep File\" for raw text files, but I'd say you should use an appropriate file format"
      },
      {
        "user": "ANGulchenko",
        "created_at": "2025-07-08T14:23:21Z",
        "body": "> Then you shouldn't import them, but I don't see why you'd use the wrong file format? Pick \"Keep File\" for raw text files, but I'd say you should use an appropriate file format  I want to name an SVG file as .svg. Because it is SVG. See nothing wrong with it :)  But still, I think I completely miss some important nuance. Ok, I mark my file in the \"Import\" as \"As is\". And that's it? Maybe I should configure some export nuances somewhere... Or maybe it shouldn't even be in that \"FileSystem\" list. Should it? I lost.  =========== LATER ==============  Yes, marking the file as \"AS IS\" was enough.  "
      }
    ],
    "created_at": "2025-07-08T13:30:42Z",
    "updated_at": "2025-07-08T14:41:32Z",
    "closed_at": "2025-07-08T14:35:53Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  v4.4.stable.official [4c311cbee]  ### System information  Linux. Godot 4.4  ### Issue description  I have **problems with accessing the .svg file from the .pck (or embedded into the binary executive) resource archive after exporting** the project.  But not any svg file. Only that svg that I don't use as an image but try to read with  `var svg = FileAccess.open(\"res://img/icon.svg\", FileAccess.READ)` svg is null. Through the IDE all works perfectly well. Problems manifest only in the exported version. I looked into the *pck file and saw that it mentions the filename. I made some crazy experiments with preload() -- didn't help I moved my SVG to /resources and **IT WORKED**, but only with NON-SVG extension.  And of course I can put a file into the appropriate directory near the executive binary and everything will be ok.    ### Steps to reproduce  Just run the exported project, it'll print out the error to the stdout.  P.S. Make sure that the exec file doesn't have a directory with resources nearby. Just *.pck.  ### Minimal reproduction project (MRP)  [exporttest.zip](https://github.com/user-attachments/files/21122733/exporttest.zip)"
  },
  {
    "number": 108407,
    "title": "Editor and game crash with \"Object was deleted while awaiting a callback.\" using a RichTextLabel and TextureRect in a HBoxContainer.",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108407",
    "user": "mgiuca",
    "labels": [
      "bug",
      "confirmed",
      "crash",
      "topic:gui"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [
      {
        "user": "precup",
        "created_at": "2025-07-08T14:00:58Z",
        "body": "Thanks for the small repro project! The crash bisects to #92645.  > Godot v4.2.stable (46dc27791) - Linux Mint 22.1 (Xia) - X11 - GLES3 (Compatibility) - NVIDIA GeForce RTX 2080 Ti (nvidia; 570.133.07) - AMD Ryzen 9 3900X 12-Core Processor (24 Threads)"
      },
      {
        "user": "Calinou",
        "created_at": "2025-07-08T22:48:03Z",
        "body": "cc @WhalesState "
      }
    ],
    "created_at": "2025-07-08T13:00:01Z",
    "updated_at": "2025-07-08T22:48:03Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in: 4.3-stable, 4.4.1-stable, 4.5-beta2. - Not reproducible in: 4.0.4-stable, 4.1.4-stable, 4.2.2-stable. (Although the behaviour is weird in those versions too.)  Reproducible on Linux (Ubuntu 24.04 X11) and Windows 11.  ### System information  Godot v4.5.beta2 - Ubuntu 24.04.2 LTS 24.04 on X11 - X11 display driver, Multi-window, 2 monitors - OpenGL 3 (Compatibility) - NVIDIA GeForce GTX 1060 6GB (nvidia; 535.230.02) - Intel(R) Core(TM) i5-4570 CPU @ 3.20GHz (4 threads) - 7.69 GiB memory  ### Issue description  A certain configuration of Control nodes causes Godot (both the running game, and the editor) to spew out a huge stream of \"Object was deleted while awaiting a callback.\" messages, then segfault. This doesn't require any code.  I was able to make a very small minimal reproduction which involves these three nodes:  - A `HBoxContainer` with a set minimum size, and two children:   - A `RichTextLabel` with `fit_content = true` and `scroll_active` = false, containing at least two words, but not enough words to fill up the minimum size of the container.   - A `TextureRect` with an image loaded, `expand_mode = EXPAND_FIT_WIDTH`.  Changing any of the properties mentioned above breaks the repro (e.g. having just one word in the label). So it seems to be something to do with the attempt to wrap words, while the texture rect is also doing some kind of dynamic sizing. I have seen various error messages on the console involving `Container::_sort_children` and `Control::_update_minimum_size` (inconsistently) which gives a clue.  The expected behaviour is this:  <img width=\"1180\" height=\"714\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/90ef4869-5db6-478a-894f-82ee96ac2b78\" />  Earlier in my investigations, it seemed to require a text string of _exactly_ the available width, no more no less, to reproduce. But since I have minimized it, it now reproduces with any string smaller than the width. I am not sure what causes this change.  On Linux, this spews out literally thousands of lines of \"Object was deleted while awaiting a callback.\" and then after about 30 seconds, prints this: ``` TOTAL PAGES: 8192 (33554432 bytes). NULL count: 1392635. CALL null::null: 0. CALL null::null: 1. CALL null::null: 0. CALL null::null: 1. CALL null::null: 0. CALL null::null: 1. CALL Control::_update_minimum_size: 1. CALL null::null: 0. CALL null::null: 1. ```  And then the window loads with this obviously incorrect sizing:  <img width=\"1180\" height=\"714\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/74453c37-b43e-487b-9e8f-108af3346043\" />  Throughout most of my investigation it was segfaulting and not loading any window, but in the most minimal example, I get the above weird behaviour instead.  On Windows, the output is this:  ``` Failed method: Container::_sort_children. Message queue out of memory. Message queue out of memory. Try increasing 'memory/limits/message_queue/max_size_mb' in project settings. Object was deleted while awaiting a callback. [repeats just 20 times] Segmentation fault ```  Note that opening this scene in the editor also (after about 30 seconds of freezing) crashes the entire editor with a segfault.  However, opening the scene with one of the elements (e.g. the TextureRect) hidden, _then_ showing it, behaves as expected. Same with showing the texture at runtime after the scene has already loaded (e.g. in the editor, hide the texture, then run the program, then show the texture in the editor while the program is running).  Prior to 4.3, it runs without crashing or freezing, but the texture is very large and the label is invisible.  There are multiple other reports of this same error message (#104526, #97312) but they don't use the same setup and have gigantic repro projects, so I figured I would open a new bug with this very tiny repro project to investigate.  ### Steps to reproduce  1. Create a Control hierarchy as described above. Other, more complex hierarchies work too, but this is the minimal set I could find that exhibits this behaviour. 2. Either run the project (to crash the game), or close and re-open the scene (to crash the editor).  ### Minimal reproduction project (MRP)  [rich-text-crash-repro.zip](https://github.com/user-attachments/files/21122246/rich-text-crash-repro.zip)  **Note**: This project crashes the Godot editor upon loading. To load it up, edit the file repro.tscn, adding \"`visible = false`\" to the TextureRect node. Then you can open it, manually make the TextureRect visible again, then see the crash."
  },
  {
    "number": 108406,
    "title": "Texture2D importing doesn't expose compress/normal_map even though it still uses it.",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108406",
    "user": "wagnerfs",
    "labels": [
      "bug",
      "confirmed",
      "topic:import"
    ],
    "assignee": "",
    "comments_count": 5,
    "comments": [
      {
        "user": "AThousandShips",
        "created_at": "2025-07-08T12:46:59Z",
        "body": "Please add an MRP with an example of your import configuration and a sample file to help testing this"
      },
      {
        "user": "wagnerfs",
        "created_at": "2025-07-08T12:50:40Z",
        "body": "@AThousandShips wouldn't think it's necessary but I uploaded one there, the flag should be set on `pants.png.import`"
      },
      {
        "user": "precup",
        "created_at": "2025-07-08T14:16:34Z",
        "body": "I can confirm this is happening, I just put the texture from the MRP on a Sprite3D to see it easily.  > Godot v4.5.beta (e49bcdf23) - Linux Mint 22.1 (Xia) on X11 - X11 display driver, Multi-window, 3 monitors - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 2080 Ti (nvidia; 570.133.07) - AMD Ryzen 9 3900X 12-Core Processor (24 threads) - 31.28 GiB memory"
      },
      {
        "user": "Calinou",
        "created_at": "2025-07-08T22:45:52Z",
        "body": "The `compress/normal_map` option only affects textures with the VRAM Compressed or Basis Universal compression modes. When enabled (or detected), it will use a RG VRAM compression format for better quality (since the blue channel is unused). You can technically use it for other purposes if you only need the red and green channels from the texture too.  It has no effect with other compression modes, and it can't until support for uncompressed RG image formats is added (remember that lossy/lossless are still uncompressed on the GPU side).  Therefore, the option should remain hidden outside of the VRAM Compressed and Basis Universal modes, but we should make sure its value is properly ignored when not in those modes."
      },
      {
        "user": "wagnerfs",
        "created_at": "2025-07-08T23:53:55Z",
        "body": "@Calinou here's the catch, even normal maps set as Lossless when imported to materials will get their `compress/normal_map` set to 1, which's extra confusing, because assuming I dragged/dropped an albedo on a normal map slot, it'll still be changed to normal_map with no way of changing back until we swap to Lossy or anything else, set it to detect or disabled again and then changed back to Lossless.  So honestly, no matter the use case or logics behind it, flags are still being set and read internally. I assume making it so internally it'd always be read as \"detect\" would make things even worse.  I'd honestly as of now just allow the user to edit that flag in the importer until a proper internal fix is done, because otherwise, it's creating a whole new problem to the user (like it did to me) by hidding the actual editor problem/solution. I had to resort to bulk text match/replace for a fix"
      }
    ],
    "created_at": "2025-07-08T12:45:46Z",
    "updated_at": "2025-07-09T00:01:45Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Godot v4.4.1.stable (49a5bc7b6)   ### System information  Windows 10 (build 19045) - Multi-window, 3 monitors - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 4070 (NVIDIA; 32.0.15.7283) - AMD Ryzen 7 5700X 8-Core Processor (16 threads)  ### Issue description  I was actually pulling my hair out on this one, apparently at some point I've changed my textures to Lossy and set normal map mode to Enabled and saved it as default preset for Texture2D. After a while, everytime I was generating mipmaps for textures, the colors were getting extremely washed out, it was after a while of testing and narrowing down that I found out my texture.png.import had `compress/normal_map=1`, which isn't available for changing once you set compression mode to Lossless. (and exactly why I took forever to notice that was my problem all along).  I have no idea why that's hidden for lossless and available on all other options, but fixing it would be as simple as removing this IF in here: https://github.com/godotengine/godot/blob/4d1f26e1fd1fa46f2223fe0b6ac300744bf79b88/editor/import/resource_importer_texture.cpp#L203  ### Steps to reproduce  - Open the texture import dock - Set mode to Lossy - set normal map to Enable - Make sure generate mipmap is disabled - Click Reimport  - Open the texture import dock again - Set mode to Lossless - Mark generate mipmaps and hit reimport  ### Minimal reproduction project (MRP)  [normalmapflag.zip](https://github.com/user-attachments/files/21122109/normalmapflag.zip)"
  },
  {
    "number": 108405,
    "title": "LightmapGI: Allow baking lightmap/shadowmask/directional textures with different texel densities",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108405",
    "user": "BlueCube3310",
    "labels": [
      "enhancement",
      "topic:rendering",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-08T12:33:06Z",
    "updated_at": "2025-07-08T16:35:26Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "Depends on #100790  Supersedes #102483    Adds 2 properties to LightmapGI that allow changing the resolution ratio of the different lightmap textures.    TODO:  - [ ] Allow values above 1.0,  - [ ] Add documentation"
  },
  {
    "number": 108404,
    "title": "Remove unnecessary newlines from key tooltip",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108404",
    "user": "KoBeWi",
    "labels": [
      "bug",
      "topic:editor"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-08T12:21:11Z",
    "updated_at": "2025-07-08T12:31:07Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "These newlines are applied onto last line of the tooltip and aren't visible (luckily tooltips ignore trailing newlines).  And that aside, they shouldn't be even part of the translated string, but outside, like in the parts above."
  },
  {
    "number": 108403,
    "title": "Restore Anchors Only preset mode",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108403",
    "user": "KoBeWi",
    "labels": [
      "enhancement",
      "topic:editor",
      "topic:gui"
    ],
    "assignee": "",
    "comments_count": 5,
    "comments": [],
    "created_at": "2025-07-08T12:06:49Z",
    "updated_at": "2025-07-08T15:23:12Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "Restores the anchors-only option when picking Control anchor presets. It existed in Godot 3, but got lost at some point. See https://github.com/godotengine/godot/pull/63358#issuecomment-1215907453 for some discussion.    https://github.com/user-attachments/assets/ddf54767-3bb2-4322-9893-b35ae1afb3d4    "
  },
  {
    "number": 108402,
    "title": "get_node: \"Node not found\" (MultiplayerSynchronizer) While Adding Child To Scene",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108402",
    "user": "GRATHRRAM",
    "labels": [
      "needs testing",
      "topic:multiplayer"
    ],
    "assignee": "",
    "comments_count": 4,
    "comments": [
      {
        "user": "GRATHRRAM",
        "created_at": "2025-07-08T10:55:02Z",
        "body": "  # Tested on  Godot v4.5.dev1.mono  <img width=\"1084\" height=\"68\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/e14ce3ba-b0e0-4462-9258-3ff5d0506f0a\" />"
      },
      {
        "user": "AThousandShips",
        "created_at": "2025-07-08T11:13:59Z",
        "body": "Sounds like: * https://github.com/godotengine/godot/issues/76894 "
      },
      {
        "user": "GRATHRRAM",
        "created_at": "2025-07-08T12:38:42Z",
        "body": "I Didn't find solution in #76894 but i think its MultiplayerSpawner error is my structure an issue?  <img width=\"1920\" height=\"407\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/edd1065c-a6c6-4528-abf0-7d5c29fa1e9e\" />"
      },
      {
        "user": "GRATHRRAM",
        "created_at": "2025-07-08T20:03:28Z",
        "body": "<img width=\"305\" height=\"287\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0e9d55e8-8a76-4366-b609-cf369c5f3e3e\" /> only after i moved multiplayer spawner up in node tree issue got resolved but i still think thats a bug"
      }
    ],
    "created_at": "2025-07-08T10:43:55Z",
    "updated_at": "2025-07-08T20:03:28Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Godot_v4.4.1-stable_mono_win64  ### System information  Godot v4.4.1.stable.mono - Windows 10 (build 19045) - Multi-window, 1 monitor - Vulkan (Forward+) - integrated Intel(R) UHD Graphics (Intel Corporation; 30.0.101.1692) - 11th Gen Intel(R) Core(TM) i3-1115G4 @ 3.00GHz (4 threads)  ### Issue description  # Node Exists but godot returns error when trying to sync  <img width=\"1198\" height=\"148\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/92c14f8c-2dff-45e0-ac4e-f4b44a52fcdb\" />  <img width=\"978\" height=\"405\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/efd095d1-6f9c-4580-8aea-c3d2581fad25\" />  <img width=\"557\" height=\"128\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/9c013d85-88a9-400f-85bd-be626280da6c\" />  https://github.com/GRATHRRAM/BulletHellGD/blob/Experimental/Scripts/Player/NodePlayer.cs#L58  ### Steps to reproduce  Clone Repo And run it Type port than press host Then in second instance type local host to it (127.0.0.1) And the same Port as in host and press join then press space or left mouse button to shoot  ### Minimal reproduction project (MRP)  https://github.com/GRATHRRAM/BulletHellGD/blob/Experimental"
  },
  {
    "number": 108401,
    "title": "Draw guide lines over selection and focus styleboxes",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108401",
    "user": "DanielGSilva",
    "labels": [
      "bug",
      "topic:gui"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-08T10:32:11Z",
    "updated_at": "2025-07-08T11:27:54Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Fix #98166  "
  },
  {
    "number": 108400,
    "title": "Specify Apache license version for Grisu2",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108400",
    "user": "Rubonnek",
    "labels": [
      "enhancement",
      "topic:thirdparty",
      "cherrypick:4.3",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-08T09:41:38Z",
    "updated_at": "2025-07-08T09:58:24Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "<!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  The grisu2 algorithm implementation used was originally released under the MIT license, then the simdjson authors slightly modified it and their changes are released under [Apache 2.0 license](https://github.com/simdjson/simdjson/blob/master/LICENSE)."
  },
  {
    "number": 108399,
    "title": "[RTL] Add option to scroll follow visible characters.",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108399",
    "user": "bruvzg",
    "labels": [
      "bug",
      "enhancement",
      "topic:gui"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-08T08:14:02Z",
    "updated_at": "2025-07-08T20:41:40Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Fixes https://github.com/godotengine/godot/issues/104722 (as a separate `scroll_follow_visible_characters` property).    https://github.com/user-attachments/assets/bde050ac-bd2c-4329-a41e-c45d06386038    Note: while it is a new property, it is implementing behavior (in a more consistent way) that was a side effect of old inconsistent before-shaping mode behavior that was relied on in some cases (fixed in https://github.com/godotengine/godot/pull/107373), so should be considered for 4.5,"
  },
  {
    "number": 108398,
    "title": "Text editor caret word skip is asymmetrical depending on direction",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108398",
    "user": "MajorMcDoom",
    "labels": [
      "needs testing",
      "topic:input",
      "topic:gui"
    ],
    "assignee": "",
    "comments_count": 4,
    "comments": [
      {
        "user": "MajorMcDoom",
        "created_at": "2025-07-08T05:44:05Z",
        "body": "If this is a bug, it should be pretty simple to fix to `TextEdit::_move_caret_left` and `TextEdit::_move_caret_right`. If it's intentional, there should be an editor setting to enable symmetrical behaviour."
      },
      {
        "user": "miv391",
        "created_at": "2025-07-08T10:55:41Z",
        "body": "vscode works quite similarly as Godot, except Godot jumps over some operators and brackets. (There are a lot of commands in vscode, so I'm sure it's easy to configure it to work differently.)  In my opinion the current commands work fine as they work with word beginnings and ends. Surely there could be new commands that work with word boundaries, whatever the word boundary definition would be."
      },
      {
        "user": "MajorMcDoom",
        "created_at": "2025-07-08T20:47:40Z",
        "body": "> vscode works quite similarly as Godot, except Godot jumps over some operators and brackets. (There are a lot of commands in vscode, so I'm sure it's easy to configure it to work differently.) >  > In my opinion the current commands work fine as they work with word beginnings and ends. Surely there could be new commands that work with word boundaries, whatever the word boundary definition would be.  It seems like Godot is taking a lot from VSCode, which is understandable if that is what the majority of Godot users are using.  I think a big element of the pain point here is that Godot lets you specify new _word separator_ chars, not new _word constituent_ chars. Even if you disable the default separators, it still includes some mandatory defaults. As a result the user can only make this feature _less_ granular, not more, so you end up skipping over huge chunks of text, and when you want to go back, it doesn't even go to the same place you were last.  If you come from VSCode, this might be more familiar, but for people who come from VS, where the stops are super granular and symmetrical, this behaviour is very jarring. Even after years of using Godot, I still can't get around it. I really think there ought to at least be an option to allow for symmetrical stops."
      },
      {
        "user": "MajorMcDoom",
        "created_at": "2025-07-08T20:56:51Z",
        "body": "I think another good reason for this being configurable is that this is more than just an editor setting - it's the behaviour of `TextEdit`, which is a runtime control. It doesn't make a lot of sense to force not only all Godot users, but Godot game players to adopt a VSCode scheme."
      }
    ],
    "created_at": "2025-07-08T05:37:22Z",
    "updated_at": "2025-07-08T20:56:51Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Reproducible in 4.3, 4.4, 4.5  ### System information  Godot v4.4.1.stable - Windows 11 (build 26100) - Multi-window, 1 monitor - Vulkan (Forward+) - dedicated NVIDIA GeForce GTX 1660 SUPER (NVIDIA; 32.0.15.7652) - Intel(R) Core(TM) i7-10700F CPU @ 2.90GHz (16 threads)  ### Issue description  When you use `Ctrl-Left` / `Ctrl-Right` or `Ctrl-Shift-Left` / `Ctrl-Shift-Right` in a text editor, the word skip is asymmetrical in how it behaviours going left vs. going right. ![Image](https://github.com/user-attachments/assets/e5eedcea-c014-4733-9b64-81dd69cc9f1c)  It makes editing very annoying, because I can't get to the word boundary I want without doing some weird logical mental gymnastics and going back and forth a few times with and without the `Ctrl` key being held down (like parallel parking for text).  I'm not sure if it's intentional, but I have never seen any other text editor behave this way. I've seen various ways of determining *where the word boundaries are*, but at least moving between them is always a *symmetrical* operation.  ### Steps to reproduce  Open any script, and use `Ctrl-Left` / `Ctrl-Right` on any line of more than a few \"words\". Notice that whenever you go left, the caret lands on the left side of the words, but whenever you go right, the caret lands on the right side of the words, meaning you never land on the same place when you go too far and try to go back.  ### Minimal reproduction project (MRP)  N/A"
  },
  {
    "number": 108397,
    "title": "Fix crash when creating voxel GI data",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108397",
    "user": "retrotails",
    "labels": [
      "bug",
      "topic:rendering",
      "crash",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-08T03:25:03Z",
    "updated_at": "2025-07-08T18:11:12Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "fixes https://github.com/godotengine/godot/issues/108390"
  },
  {
    "number": 108396,
    "title": "Fix main editor title after changing language",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108396",
    "user": "timothyqiu",
    "labels": [
      "bug",
      "topic:editor"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-08T02:33:51Z",
    "updated_at": "2025-07-08T15:03:50Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Currently, after changing editor's language, title of the main editor window becomes    > Project Name (Debug)"
  },
  {
    "number": 108395,
    "title": "`RefCounted` releases itself if it is referenced in `NOTIFICATION_POSTINITIALIZE`",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108395",
    "user": "beicause",
    "labels": [
      "bug",
      "archived",
      "topic:core"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [
      {
        "user": "AThousandShips",
        "created_at": "2025-07-08T10:39:32Z",
        "body": "Checked the code and this is likely an issue in core, as the post-initialization is called *before* the object reference is returned, and therefore before it has any chance of being referenced  This might also be a GDScript issue, would be good to check what happens if this is constructed on the C++ side, but probably the same result  I'm not sure this can be supported though, I can't see any reasonable way to handle this as the ref it is put into isn't constructed yet  One possible solution would be to somehow have some check while it is being initialized to ensure it has a valid reference lying around, but that might cause various problems on its own, perhaps instead it would be best to add a check or something to fail if a ref counted is referenced like this in this case"
      },
      {
        "user": "beicause",
        "created_at": "2025-07-08T10:39:33Z",
        "body": "```gdscript extends RefCounted class_name Rc  func _notification(what: int) -> void:     if what == NOTIFICATION_POSTINITIALIZE:         print(\"post init\")         print(get_reference_count())         var a = self         print(a.get_reference_count())          var b = self         print(b.get_reference_count()) ``` I also tested `NOTIFICATION_POSTINITIALIZE`  in gdscript, but it didn't receive postinitialize at all and there was no output.  And refcount works correctly in gdscript's `_init`: ```gdscript func _init() -> void:         print(\"init\")         print(get_reference_count())         var a = self         print(a.get_reference_count())          var b = self         print(b.get_reference_count()) ``` ``` init 2 3 4 1 --- Debugging process stopped --- ```  Edit:  😅This is as expected as docs said: >Notification received when the object is initialized, before its script is attached. Used internally."
      },
      {
        "user": "beicause",
        "created_at": "2025-07-08T12:21:11Z",
        "body": "I do see postinit executes immediately after the instance is constructed, at which point the `RefCounted::refcount_init` has not been initialized. That is to say, the behavior of postinit is similar to constructor. This seems unsolvable, I don't see how `RefCounted` can distinguish whether it is being referenced within postinit/constructor or externally   So closing."
      }
    ],
    "created_at": "2025-07-08T01:31:31Z",
    "updated_at": "2025-07-08T12:25:30Z",
    "closed_at": "2025-07-08T12:21:11Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  4.5  ### System information  Linux  ### Issue description  See https://github.com/godot-rust/gdext/pull/1211#issuecomment-3038495086  In GDExtension, referencing RefCounted in postinitialize will cause the count not to increase correctly. The reference count is lower than expected by 1, leading to releasing itself.  This also occurs in constructor.  ### Steps to reproduce  Run https://github.com/godotengine/godot-cpp-template with following code:  ```cpp #include \"example_class.h\"  void ExampleClass::_bind_methods() { \tgodot::ClassDB::bind_method(D_METHOD(\"print_type\", \"variant\"), &ExampleClass::print_type); }  void ExampleClass::_notification(int p_what) { \tif (p_what == NOTIFICATION_POSTINITIALIZE) { \t\tUtilityFunctions::print(\"refcount: \", get_reference_count()); \t\tRef<ExampleClass> a = this; \t\tUtilityFunctions::print(\"refcount: \", get_reference_count()); \t\tRef<ExampleClass> b = this; \t\tUtilityFunctions::print(\"refcount: \", get_reference_count()); \t\tRef<ExampleClass> c = this; \t\tUtilityFunctions::print(\"refcount: \", get_reference_count()); \t\tRef<ExampleClass> d = this; \t\tUtilityFunctions::print(\"refcount: \", get_reference_count()); \t} }  void ExampleClass::print_type(const Variant &p_variant) const { \tprint_line(vformat(\"Type: %d\", p_variant.get_type())); } ```  ```gdscript extends Node   func _ready() -> void: \tvar example := ExampleClass.new() \texample.print_type(example) ```  Output: ``` refcount: 1 refcount: 1 refcount: 2 refcount: 3 refcount: 4 SCRIPT ERROR: Cannot call method 'print_type' on a null value.           at: _ready (res://example.gd:6)           GDScript backtrace (most recent call first):               [0] _ready (res://example.gd:6) ```  ### Minimal reproduction project (MRP)  See above"
  },
  {
    "number": 108394,
    "title": "ReflectionProbe doesn't work in XR with Compatibility Renderer",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108394",
    "user": "RumarioVR",
    "labels": [
      "bug",
      "archived",
      "topic:rendering",
      "topic:xr",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 4,
    "comments": [
      {
        "user": "BastiaanOlij",
        "created_at": "2025-07-08T01:10:42Z",
        "body": "Duplicate of https://github.com/godotengine/godot/issues/102443 Fixed with https://github.com/godotengine/godot/pull/102447  Need to find time to do some structural changes so I can do the change @clayjohn wants me to do before the PR gets merged. For now you can cherry pick the fix in a custom build. "
      },
      {
        "user": "RumarioVR",
        "created_at": "2025-07-08T01:25:37Z",
        "body": "There are so many cherry picks for VR these days. It's impossible to handle it anymore. Why isn't it merged if it's already been fixed?"
      },
      {
        "user": "RumarioVR",
        "created_at": "2025-07-08T01:39:44Z",
        "body": "This has been sitting around for almost half a year now, and it will stay sitting around for the next six months. Since it's been fixed, please merge it now. @BastiaanOlij  @clayjohn  You can restructure it later."
      },
      {
        "user": "Calinou",
        "created_at": "2025-07-08T18:28:49Z",
        "body": "Thanks for the report! Consolidating in https://github.com/godotengine/godot/issues/102443.  PS: I have to remind you that we have a [Code of Conduct](https://godotengine.org/code-of-conduct). Please stay constructive."
      }
    ],
    "created_at": "2025-07-08T00:59:18Z",
    "updated_at": "2025-07-08T18:29:00Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in: Godot 4.5.beta2  ### System information  Windows 11 - Godot 4.5.beta2 - Compatibility Renderer - VR  ### Issue description  The ReflectionProbe doesn't work in VR with the Compatibility Renderer. I reported the bug to @BastiaanOlij a few months ago, but somehow I couldn't find that entry anymore. For me, this is a show stopper for releasing my app.  ### Steps to reproduce  Use a ReflectionProbe in VR  ### Minimal reproduction project (MRP)  Use Godot-XR-Tools with a ReflectionProbe"
  },
  {
    "number": 108393,
    "title": "[Android] Update the maven publishing configuration following the deprecation of the OSSHR service",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108393",
    "user": "m4gr3d",
    "labels": [
      "enhancement",
      "platform:android",
      "topic:buildsystem",
      "cherrypick:3.x",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-07T23:14:08Z",
    "updated_at": "2025-07-08T23:08:12Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "See https://central.sonatype.org/news/20250326_ossrh_sunset/ for more details.    <!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  "
  },
  {
    "number": 108392,
    "title": "Clarify move_and_collide only returning a KinematicCollision2D if there is a collision",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108392",
    "user": "chance-nb",
    "labels": [
      "enhancement",
      "documentation"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-07T22:53:56Z",
    "updated_at": "2025-07-08T08:01:46Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "`move_and_collide` only returns a `KinematicCollision2D` if there _is_ a collision, but the Documentation makes it sound like it always does, regardless of whether there is a collision or not. This PR clarifies that."
  },
  {
    "number": 108391,
    "title": "Add expression history to evaluator",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108391",
    "user": "KoBeWi",
    "labels": [
      "enhancement",
      "topic:editor",
      "usability"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T22:29:17Z",
    "updated_at": "2025-07-08T17:51:34Z",
    "closed_at": null,
    "milestone": "4.6",
    "is_pull_request": true,
    "body": "Allows going back to previous expressions with Up/Down.    https://github.com/user-attachments/assets/61aad5df-c774-4e78-9f26-7623a0ac6354    The history is kept for the editor session."
  },
  {
    "number": 108390,
    "title": "Crash when creating VoxelGI data as a non-external subresource since version 4.5-beta1.",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108390",
    "user": "brcontainer",
    "labels": [
      "bug",
      "topic:rendering",
      "confirmed",
      "crash",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [
      {
        "user": "precup",
        "created_at": "2025-07-07T23:04:12Z",
        "body": "Confirmed, bisects to #106673."
      },
      {
        "user": "Calinou",
        "created_at": "2025-07-07T23:10:24Z",
        "body": "cc @retrotails   This is likely due to missing a `null` check somewhere in the added/changed code.  Note that in general, creating a new VoxelGIData resource in the inspector doesn't make much sense (you need to bake data somehow). It might be useful to set parameters *before* baking, but you don't need to anyway, as VoxelGI does not require rebaking after changing parameters within VoxelGIData. We should fix the crash either way, I'm just mentioning this here for completeness.  Backtrace:  ``` handle_crash: Program crashed with signal 8 Engine version: Godot Engine v4.5.beta.custom_build (4d1f26e1fd1fa46f2223fe0b6ac300744bf79b88) Dumping the backtrace. Please include this when reporting the bug on: https://github.com/godotengine/godot/issues [1] /lib64/libc.so.6(+0x19c30) [0x7fc196539c30] (??:0) [2] bin/godot.linuxbsd.editor.x86_64() [0x9c97931] (/home/hugo/Documents/Git/godotengine/godot/core/math/vector3i.h:209) [3] bin/godot.linuxbsd.editor.x86_64() [0x9c5ceff] (/home/hugo/Documents/Git/godotengine/godot/servers/rendering/renderer_rd/environment/gi.cpp:2947 (discriminator 3)) [4] bin/godot.linuxbsd.editor.x86_64() [0x9c77c69] (/home/hugo/Documents/Git/godotengine/godot/servers/rendering/renderer_rd/environment/gi.cpp:4139) [5] bin/godot.linuxbsd.editor.x86_64() [0x9ad5aa9] (/home/hugo/Documents/Git/godotengine/godot/servers/rendering/renderer_rd/renderer_scene_render_rd.cpp:223) [6] bin/godot.linuxbsd.editor.x86_64() [0x9719720] (/home/hugo/Documents/Git/godotengine/godot/servers/rendering/renderer_scene_cull.cpp:3889) [7] bin/godot.linuxbsd.editor.x86_64() [0x98d967a] (/home/hugo/Documents/Git/godotengine/godot/servers/rendering/rendering_server_default.cpp:94) [8] bin/godot.linuxbsd.editor.x86_64() [0x98dc35b] (/home/hugo/Documents/Git/godotengine/godot/servers/rendering/rendering_server_default.cpp:425) [9] bin/godot.linuxbsd.editor.x86_64() [0x36c61aa] (/home/hugo/Documents/Git/godotengine/godot/main/main.cpp:4795) [10] bin/godot.linuxbsd.editor.x86_64() [0x35cad38] (/home/hugo/Documents/Git/godotengine/godot/platform/linuxbsd/os_linuxbsd.cpp:989 (discriminator 1)) [11] bin/godot.linuxbsd.editor.x86_64() [0x35bedb1] (/home/hugo/Documents/Git/godotengine/godot/platform/linuxbsd/godot_linuxbsd.cpp:85) [12] /lib64/libc.so.6(+0x35f5) [0x7fc1965235f5] (??:0) [13] /lib64/libc.so.6(__libc_start_main+0x88) [0x7fc1965236a8] (??:0) [14] bin/godot.linuxbsd.editor.x86_64() [0x35beba5] (??:?) -- END OF C++ BACKTRACE -- ```"
      },
      {
        "user": "brcontainer",
        "created_at": "2025-07-08T00:53:33Z",
        "body": "> Note that in general, creating a new VoxelGIData resource in the inspector doesn't make much sense (you need to bake data somehow). It might be useful to set parameters _before_ baking, but you don't need to anyway, as VoxelGI does not require rebaking after changing parameters within VoxelGIData. We should fix the crash either way, I'm just mentioning this here for completeness.  I forgot to mention that some projects created in previous versions can also cause failures in 4.5.dev5, even without going through the upgrade process. This happens when the data is a non-external sub-resource. While it's not necessarily an issue at the time of creation, I assumed it might be ***a separate problem***, possibly related to the changes introduced in https://github.com/godotengine/godot/pull/107151.  In any case, this problem will probably be solved if you can recreate or upgrade the entire project. I only mentioned this in case anyone else comments with a question."
      }
    ],
    "created_at": "2025-07-07T22:07:32Z",
    "updated_at": "2025-07-08T18:10:28Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in: 4.5.beta24.5.beta1, 4.5.beta2. - Not reproducible in: 4.5.dev5.  ### System information  Windows 10 - Godot v4.5.beta2 - Vulkan (Forward+) - GTX 1050 ti  ### Issue description  The problem only occurs when I try to create **non-external** _VoxelGI data_ (the problem is not in the bake).  ### Steps to reproduce  Demonstration:  https://github.com/user-attachments/assets/dd7d2114-4841-4c7d-a3f5-a90cac1ab426  Log:  ```console TextServer: Primary interface set to: \"ICU / HarfBuzz / Graphite (Built-in)\". CORE API HASH: 2267698207 EDITOR API HASH: 109155038 SceneTreeFTI: traversal method DEFAULT Loading resource: C:/Users/user/AppData/Roaming/Godot/editor_settings-4.5.tres EditorSettings: Load OK! EditorTheme: Generating new theme for the config '3010344575'. EditorTheme: Generating new icons. EditorTheme: Generating new fonts. EditorTheme: Generating new styles. Loading resource: C:/Users/user/AppData/Local/Godot/editor_doc_cache-4.5.res Loaded system CA certificates Loading resource: res://test.tscn Loading resource: res://.godot/editor/editor_script_doc_cache.res Generated 'ID:-9223369629391304072' preview in 14 usec  ================================================================ CrashHandlerException: Program crashed with signal 8 Engine version: Godot Engine v4.5.beta2.official (e1b4101e3460dd9c6ba0b7f8d88e9751b8383f5b) Dumping the backtrace. Please include this when reporting the bug on: https://github.com/godotengine/godot/issues [1] error(-1): no debug info in PE/COFF executable [2] error(-1): no debug info in PE/COFF executable [3] error(-1): no debug info in PE/COFF executable [4] error(-1): no debug info in PE/COFF executable [5] error(-1): no debug info in PE/COFF executable [6] error(-1): no debug info in PE/COFF executable [7] error(-1): no debug info in PE/COFF executable [8] error(-1): no debug info in PE/COFF executable [9] error(-1): no debug info in PE/COFF executable [10] error(-1): no debug info in PE/COFF executable [11] error(-1): no debug info in PE/COFF executable [12] error(-1): no debug info in PE/COFF executable [13] error(-1): no debug info in PE/COFF executable [14] error(-1): no debug info in PE/COFF executable [15] error(-1): no debug info in PE/COFF executable [16] error(-1): no debug info in PE/COFF executable -- END OF C++ BACKTRACE -- ================================================================  C:\\DATA\\Godot> ```  ### Minimal reproduction project (MRP)  - Create a scene. - Add VoxelGI to scene. - Add data to VoxelGI.  After this the editor crashes.  - [voxelgi-mrp.zip](https://github.com/user-attachments/files/21112285/voxelgi-mrp.zip)"
  },
  {
    "number": 108389,
    "title": "Document AudioStreamInteractive only supporting Ogg Vorbis and MP3 formats",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108389",
    "user": "Calinou",
    "labels": [
      "enhancement",
      "documentation",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T22:06:39Z",
    "updated_at": "2025-07-08T16:06:36Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "- This closes https://github.com/godotengine/godot/issues/108184. "
  },
  {
    "number": 108388,
    "title": "Add syncing of changes in editor's audio bus to the running game",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108388",
    "user": "pohy",
    "labels": [
      "enhancement",
      "topic:editor",
      "topic:audio"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T20:42:02Z",
    "updated_at": "2025-07-08T08:00:28Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "<!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  Partially solves https://github.com/godotengine/godot-proposals/issues/1186    Implemented:  - Syncing Audio pane's bus gain, mute, solo, bypass and toggling existing effects    NOT implemented:  - Adding/removing effects. Well, adding new effects doesn't work. Removing existing effects does.  - Syncing VU meters from the game to the editor  - Toggle button for the syncing functionality. Akin to Unity's \"Edit in play mode\"  - Syncing bus state from the running game to the editor. Aka. scripts can change gains/mutes/effects/etc."
  },
  {
    "number": 108387,
    "title": "Fix wrong \"location\" substring matching when HTTP status is 301 or 302",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108387",
    "user": "BadMachine",
    "labels": [
      "bug",
      "topic:editor",
      "topic:assetlib",
      "cherrypick:4.3",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-07T20:08:34Z",
    "updated_at": "2025-07-08T08:04:34Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "## Description:    This PR addresses an issue with the parsing of the Location header when handling HTTP status codes 301 or 302.    ### Problem:  Previously, headers with a name matching the pattern *-location (e.g., X-location, My-location) were incorrectly interpreted as redirect targets. This caused unintended behavior when following redirects.    ### Fix:  Updated the logic to only recognize the standard Location header (case-insensitive) for determining redirect URLs in 301/302 responses.    Reference:  https://http.dev/redirects    * *Bugsquad edit, fixes: https://github.com/godotengine/godot/issues/102960*"
  },
  {
    "number": 108386,
    "title": "[Android] Issue with background opacity with vulkan renderer when `display/window/per_pixel_transparency/allowed` is enabled",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108386",
    "user": "m4gr3d",
    "labels": [
      "bug",
      "platform:android",
      "topic:rendering"
    ],
    "assignee": "clayjohn",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T20:07:48Z",
    "updated_at": "2025-07-07T20:39:29Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in https://github.com/godotengine/godot/pull/107473  ### System information  Reproducible on Samsung Tab S8 running Android 15; reproducible on Pixel 9 Pro Fold running Android 16  ### Issue description  https://github.com/godotengine/godot/pull/107473 is adding transparency support on Android.  While testing the capability using the [Window Management demo project](https://github.com/godotengine/godot-demo-projects/tree/master/misc/window_management), I noticed that the viewport background rendering differs between the OpenGL and Vulkan renderers.  It behaves as expected using the OpenGL renderer as shown in the recording below:  https://github.com/user-attachments/assets/42e5d817-5e66-4e04-9ca1-e57133b7aca7  Using the Vulkan renderer, when `get_viewport().transparent_bg == false`, the viewport background is not fully opaque as with the OpenGL renderer. See the recording below for the issue:    https://github.com/user-attachments/assets/fe4a7a17-4dbb-4089-bd37-5ea0719dd984  ### Steps to reproduce  - Grab Android templates from https://github.com/godotengine/godot/pull/107473: https://github.com/godotengine/godot/actions/runs/16125750520?pr=107473 - Using the latest version of the editor (`beta2` or `master` or a build from https://github.com/godotengine/godot/pull/107473 should do fine), open the https://github.com/godotengine/godot-demo-projects/tree/master/misc/window_management project - Set the project renderer to `mobile`, and export the project onto an Android device - Switch the `transparent` toggle on/off to replicate the issue.  ### Minimal reproduction project (MRP)  https://github.com/godotengine/godot-demo-projects/tree/master/misc/window_management"
  },
  {
    "number": 108385,
    "title": "Download links for 4.5 beta 2 are broken",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108385",
    "user": "aekobear",
    "labels": [
      "archived"
    ],
    "assignee": "",
    "comments_count": 6,
    "comments": [
      {
        "user": "brcontainer",
        "created_at": "2025-07-07T19:52:37Z",
        "body": "> **Note:** I believe you are referring to 4.5-beta2, Godot 5 does not exist yet.  In fact the release does not exist in: https://github.com/godotengine/godot-builds/releases"
      },
      {
        "user": "AThousandShips",
        "created_at": "2025-07-07T19:57:25Z",
        "body": "Can't replicate, the links work for me  The release exists in the releases: * https://github.com/godotengine/godot-builds/releases/tag/4.5-beta2"
      },
      {
        "user": "clayjohn",
        "created_at": "2025-07-07T19:59:07Z",
        "body": "I also can't reproduce. I can download them just fine. "
      },
      {
        "user": "akien-mga",
        "created_at": "2025-07-07T20:02:28Z",
        "body": "I fixed it 8 min ago, that's why. https://github.com/godotengine/godot-builds/issues/13"
      },
      {
        "user": "brcontainer",
        "created_at": "2025-07-07T20:03:19Z",
        "body": "> I fixed it 8 min ago, that's why. [godotengine/godot-builds#13](https://github.com/godotengine/godot-builds/issues/13)  exactly! 😃 "
      },
      {
        "user": "aekobear",
        "created_at": "2025-07-08T15:59:20Z",
        "body": "Thanks for the quick fix! I did not know about the godot-builds repo. Next time I'll be sure to post an issue in the right place 👍 "
      }
    ],
    "created_at": "2025-07-07T19:47:51Z",
    "updated_at": "2025-07-08T16:32:02Z",
    "closed_at": "2025-07-08T15:59:20Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - only reproducible for 4.5 beta 2  ### System information  -   ### Issue description  All links to 4.5 beta 2 here are broken:  https://godotengine.org/download/archive/4.5-beta2/  This also means that for people who have already downloaded it, trying to get export templates in editor also throws a 404   ### Steps to reproduce  -   ### Minimal reproduction project (MRP)  - "
  },
  {
    "number": 108384,
    "title": "[Web] Fix sample playback deletion and `AudioStreamPolyphonic` issue",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108384",
    "user": "adamscott",
    "labels": [
      "bug",
      "platform:web",
      "topic:porting",
      "topic:audio"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T18:48:07Z",
    "updated_at": "2025-07-07T21:36:33Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "This PR fixes sample playback deletion, as samples were never flagged as deleted.    This also fixes #103311 as samples were marked as active, but never marked as inactive, filling up the polyphonic playback without any way to make space.    > [!NOTE]  > A commit will follow to inverse the flow: instead of polling JavaScript to know if a sample is active or not, I'll create a callback for JavaScript to notify Godot directly when a sample was deleted.   "
  },
  {
    "number": 108383,
    "title": "[iOS] LineEdit forces uppercase on first letter even with EMAIL_ADDRESS or PASSWORD keyboard type",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108383",
    "user": "guylhermed",
    "labels": [
      "bug",
      "platform:ios",
      "topic:input"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T17:46:40Z",
    "updated_at": "2025-07-07T17:51:11Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Godot 4.4.1 Stable (Official)  ### System information  iOS 17+ (iPhone and iPad)  ### Issue description  When using LineEdit with virtual_keyboard_type set to either: ``` LineEdit.VirtualKeyboardType.KEYBOARD_TYPE_EMAIL_ADDRESS LineEdit.VirtualKeyboardType.KEYBOARD_TYPE_PASSWORD ``` The iOS keyboard still opens with the first letter capitalized (uppercase), which is not appropriate for login or email input fields.  This behavior does not happen on Android, where the keyboard opens correctly in lowercase when these types are set.   Expected behavior: On iOS, when using EMAIL_ADDRESS or PASSWORD, the keyboard should open with the lowercase layout by default (i.e., autocapitalizationType = .none).   Suggested solution: Expose a property like:  `line_edit.autocapitalize = false`  Or internally set autocapitalizationType = .none for EMAIL_ADDRESS and PASSWORD types on iOS exports.  Why it matters:  It causes confusion for users on login/sign-up forms  It’s a UX inconsistency between platforms  It might lead to invalid input, especially for emails    ### Steps to reproduce  Create a LineEdit in a Godot project  Set virtual_keyboard_type = KEYBOARD_TYPE_EMAIL_ADDRESS  Export to iOS and test on real device  Open the keyboard — it starts with capitalized layout  ### Minimal reproduction project (MRP)  N/A (can reproduce in any project with a LineEdit)"
  },
  {
    "number": 108382,
    "title": "[3.x] mbedTLS: Update to mbedTLS 3.6.4",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108382",
    "user": "Faless",
    "labels": [
      "enhancement",
      "topic:thirdparty",
      "needs testing",
      "topic:network",
      "cherrypick:3.6"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T14:43:23Z",
    "updated_at": "2025-07-07T18:26:29Z",
    "closed_at": null,
    "milestone": "3.7",
    "is_pull_request": true,
    "body": "mbedTLS 2.28 is now EOL, and will no longer receive security updates.    This commit backports from Godot 4 the changes needed to update to mbedTLS 3.6 (new LTS), including TLSv1.3 support.    See https://github.com/godotengine/godot/pull/108371#issuecomment-3043985468 .    This will probably need some more testing (I only tested the asset library and the MRP in https://github.com/godotengine/godot/issues/101910 to confirm TLS 1.3 is working as intended)."
  },
  {
    "number": 108381,
    "title": "Fix error when \"Toggle Files Panel\" in shader editor",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108381",
    "user": "timothyqiu",
    "labels": [
      "bug",
      "topic:editor"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T14:41:37Z",
    "updated_at": "2025-07-07T14:41:38Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Fixes #108315    - `get_current_tab()` could return `-1` when there is no tab available.  - Checking whether `index` is a valid index for `shader_tabs` does not make sense as the value is returned from the tab container itself. Should be checking if it's a valid index for the `edited_shaders` array instead."
  },
  {
    "number": 108380,
    "title": "Update hover when changing editor tool",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108380",
    "user": "KoBeWi",
    "labels": [
      "bug",
      "topic:editor",
      "topic:2d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T14:10:49Z",
    "updated_at": "2025-07-07T14:45:39Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Addresses https://github.com/godotengine/godot/pull/104190#discussion_r2143167813"
  },
  {
    "number": 108379,
    "title": "Remove unused member variables in `EditorInspector`",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108379",
    "user": "timothyqiu",
    "labels": [
      "enhancement",
      "topic:editor",
      "topic:codestyle"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T14:09:19Z",
    "updated_at": "2025-07-07T17:33:16Z",
    "closed_at": null,
    "milestone": "4.6",
    "is_pull_request": true,
    "body": "These member variables are left overs of the old add metadata dialog (now `AddMetadataDialog`)."
  },
  {
    "number": 108378,
    "title": "Fix division by zero in clearcoat specular BRDF",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108378",
    "user": "Mingxi-Z",
    "labels": [
      "bug",
      "topic:rendering",
      "topic:3d",
      "cherrypick:4.3",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T13:46:41Z",
    "updated_at": "2025-07-08T18:16:02Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "This PR fixes a bug where the clearcoat implementation could generate NaN values at grazing angles, causing visual artifacts such as flickering.    The issue is resolved by adding a small epsilon value to the denominator of the Gr term in the clearcoat specular BRDF calculation, preventing division by zero.     Fixes #86530  "
  },
  {
    "number": 108377,
    "title": "Fix can't remove inspector plugins after reaching max count",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108377",
    "user": "timothyqiu",
    "labels": [
      "bug",
      "topic:editor",
      "cherrypick:3.x",
      "cherrypick:4.3",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-07T12:56:47Z",
    "updated_at": "2025-07-07T15:20:15Z",
    "closed_at": "2025-07-07T15:14:05Z",
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "The condition only makes sense for `add_inspector_plugin()`. Probably a copy-paste error."
  },
  {
    "number": 108376,
    "title": "abstract class doesn't work any longer",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108376",
    "user": "MarkoGrbec",
    "labels": [
      "archived"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [
      {
        "user": "HolonProduction",
        "created_at": "2025-07-07T12:24:06Z",
        "body": "Abstract was changed to an annotation. Use `@abstract`."
      },
      {
        "user": "MarkoGrbec",
        "created_at": "2025-07-07T12:41:34Z",
        "body": "uhm:  `@abstract class_name WindowManager`  ``` Line 2:Unexpected \"class_name\" in class body. Line 4:Annotation \"@abstract\" cannot be applied to a variable. Line 2:Annotation \"@abstract\" does not precede a valid target, so it will have no effect. ``` so how should I use it?"
      },
      {
        "user": "HolonProduction",
        "created_at": "2025-07-07T13:18:41Z",
        "body": "Top level annoations are placed first in the file. You can't use them after either class_name or extends:  ```gdscript @abstract extends Node class_name ClassName ```"
      }
    ],
    "created_at": "2025-07-07T11:57:28Z",
    "updated_at": "2025-07-07T13:18:48Z",
    "closed_at": "2025-07-07T12:24:06Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  reproducible in 4.5Beta2 not reproducible in 4.5Beta1  ### System information  Godot v4.5.beta1 - Manjaro Linux #1 SMP PREEMPT_DYNAMIC Mon, 03 Feb 2025 16:27:19 +0000 on X11 - X11 display driver, Multi-window, 1 monitor - OpenGL 3 (Compatibility) - Mesa Intel(R) HD Graphics 4600 (HSW GT2) - Intel(R) Core(TM) i7-4700HQ CPU @ 2.40GHz (8 threads) - 15.49 GiB memory  ### Issue description  I used to use abstract class like this:  ``` extends Control abstract class_name SomeClass ```  in beta 2 it doesn't work any longer  ### Steps to reproduce  just type  ``` extends Node abstract class_name ClassName ```  ### Minimal reproduction project (MRP)  N/A"
  },
  {
    "number": 108375,
    "title": "VRAM Uncompressed: Optimize channels when possible",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108375",
    "user": "BlueCube3310",
    "labels": [
      "enhancement",
      "topic:import"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T11:07:30Z",
    "updated_at": "2025-07-07T11:08:18Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "Makes the VRAM Uncompressed import mode properly detect/optimize color channels present in an image based on the import settings.    This required modifying the `optimize_channels` method to account for non-8-bit formats."
  },
  {
    "number": 108374,
    "title": "Deactivate orientation gizmo on window exit",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108374",
    "user": "DanielGSilva",
    "labels": [
      "bug",
      "topic:editor",
      "topic:gui",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T10:59:31Z",
    "updated_at": "2025-07-07T13:39:50Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Fix #106932   "
  },
  {
    "number": 108373,
    "title": "Fix the usage of libudev with SDL joystick input driver",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108373",
    "user": "Nintorch",
    "labels": [
      "bug",
      "topic:input"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T09:05:52Z",
    "updated_at": "2025-07-07T13:36:27Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "In the SDL joystick input PR I decided to not compile it with libudev because it was a bit too late to make new changes.  Yesterday I found out that SDL actually uses dynamic loading of libudev and uses the <libudev.h> only for structs, typedefs, etc. in the thirdparty/sdl/core/linux/SDL_udev.c file, so I decided to fix the compilation of libudev to use the header file that was already bundled with Godot's source code (thirdparty/linuxbsd_headers/udev/libudev.h) and in another file (thirdparty/sdl/hidapi/linux/hid.c) where SDL actually does use functions from said header, I redirect the calls to the struct where they're loaded dynamically (the one in SDL_udev.c). And I removed the usage of SOWRAP_ENABLED in the detect.py file where UDEV_ENABLED is defined, because SDL loads the library dynamically anyway and we probably can't/shouldn't change the way it works.  I tested the PR with WSL and it didn't seem to crash or break the controller support (my Dualshock 4 and a cheap Sega Mega Drive-like controller work fine just like before), so I assume it works 😅     I also added a reference to the 0003-std-include.patch file that was added in https://github.com/godotengine/godot/pull/108144 but was not added to the thirdparty/README.md file."
  },
  {
    "number": 108372,
    "title": "Add `null` and range checks to `DisplayServerMacOSBase::clipboard_get()`.",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108372",
    "user": "bruvzg",
    "labels": [
      "bug",
      "platform:macos",
      "topic:porting",
      "crash"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T08:44:20Z",
    "updated_at": "2025-07-07T13:43:10Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Should fix https://github.com/godotengine/godot/issues/108370"
  },
  {
    "number": 108371,
    "title": "mbedTLS: Update to version 3.6.4, fixes GCC 15 compatibility",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108371",
    "user": "akien-mga",
    "labels": [
      "bug",
      "topic:thirdparty",
      "topic:network",
      "cherrypick:4.3",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-07T08:26:26Z",
    "updated_at": "2025-07-07T15:14:18Z",
    "closed_at": "2025-07-07T15:14:05Z",
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "- Security fixes: https://github.com/Mbed-TLS/mbedtls/releases/tag/mbedtls-3.6.4    * CVE-2025-49601    * CVE-2025-49600    * CVE-2025-52496    * CVE-2025-47917    * CVE-2025-48965    * CVE-2025-52497    * CVE-2025-49087    * Did not evaluate if any of those can be triggered from Godot / Godot projects, but we should update supported branches either way.    * @Faless / @lawnjelly: We're still on mbedTLS 2.28.10 on `3.x` / `3.6`, which was the previous LTS, but is now EOL. So notably we're missing this batch of security fixes, assuming some of those affect 2.28.10. So I would suggest looking into updating mbedTLS to 3.6.4 on `3.x` and `3.6` too.    - Fixes #107754 (Arch users, please confirm).  - Fixes #108048 (tested on Fedora 42 with GCC 15.1.1).    This part of the release notes seem to explain why we've had issues with custom builds of Godot with mbedTLS 3.6.3 on Arch and Fedora 42, both providing the latest GCC 15.    ![image](https://github.com/user-attachments/assets/489aa152-5418-41ff-847d-55c6645ee7ab)  "
  },
  {
    "number": 108370,
    "title": "Crash in DisplayServer.clipboard_get() on macOS with invalid cleared clipboard state",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108370",
    "user": "lostminds",
    "labels": [
      "bug",
      "platform:macos",
      "topic:porting",
      "crash"
    ],
    "assignee": "bruvzg",
    "comments_count": 1,
    "comments": [
      {
        "user": "bruvzg",
        "created_at": "2025-07-07T08:32:33Z",
        "body": "> According to their description they have some system plugins that sometimes modifies the system pasteboard, they suspect that it's their password manager that may be removing copied passwords.  Tried it with the password manager that is doing the same, but was not able to reproduce it (might be timing specific and clipboard is cleared in between `canReadObjectForClasses` and `readObjectsForClasses` calls), but index check should be added anyway, since empty array or `nil` are valid return values:  > Returns nil if there is an error in retrieving the requested items from the pasteboard, or an empty array if no objects of the specified classes can be created."
      }
    ],
    "created_at": "2025-07-07T08:15:45Z",
    "updated_at": "2025-07-07T08:41:30Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  4.4.1  ### System information  macOS 15.5  ### Issue description  A user of my Godot project has reported a crash that seems to indicate a problem in `DisplayServerMacOS::clipboard_get()`. According to their description they have some system plugins that sometimes modifies the system pasteboard, they suspect that it's their password manager that may be removing copied passwords. And at this point it seems it incorrectly clears the system pasteboard, or it could be that something has registered as ready to supply pasteboard information of a string-compatible type, but then fails to deliver this when it's requested.   The result is that next time my Godot project (or any Godot app) calls `DisplayServer.clipboard_get()` it will crash.  The crash stack trace: ``` Thread 0 Crashed:: Dispatch queue: com.apple.main-thread 0 libsystem_kernel.dylib  0x182bf5388 __pthread_kill + 8 1 libsystem_pthread.dylib  0x182c2e88c pthread_kill + 296 2 libsystem_c.dylib  0x182b37c60 abort + 124 3 libc++abi.dylib  0x182be439c abort_message + 132 4 libc++abi.dylib  0x182bd2d0c demangling_terminate_handler() + 344 5 libobjc.A.dylib  0x182858dd4 _objc_terminate() + 156 6 libc++abi.dylib  0x182be36b0 std::__terminate(void (*)()) + 16 7 libc++abi.dylib  0x182be6c48 __cxxabiv1::failed_throw(__cxxabiv1::__cxa_exception*) + 88 8 libc++abi.dylib  0x182be6bf0 __cxa_throw + 92 9 libobjc.A.dylib  0x18284ecf8 objc_exception_throw + 448 10 CoreFoundation  0x182cbc6dc -[__NSArrayM objectAtIndex:] + 592 11 Paragraphic  0x104c8ecbc DisplayServerMacOS::clipboard_get() const + 248 12 Paragraphic  ```  Seems to indicate it's crashing at  https://github.com/godotengine/godot/blob/53be3b78d1634406f1fb29e3802c608a5f5104a1/platform/macos/display_server_macos_base.mm#L65  Relevant code section: ``` BOOL ok = [pasteboard canReadObjectForClasses:classArray options:options];  if (!ok) { \treturn \"\"; }  NSArray *objectsToPaste = [pasteboard readObjectsForClasses:classArray options:options]; NSString *string = [objectsToPaste objectAtIndex:0]; ```  In other words it seems like in some circumstances `pasteboard canReadObjectForClasses` returns true, but then it seems `pasteboard readObjectsForClasses` still returns an empty array, resulting in the crash on trying to get the first object in this array.   While the crash is of course the most serious it's worth noting that `DisplayServer.clipboard_has()` uses the same `canReadObjectForClasses` check. So if that's returning true when there's no valid string on the pasteboard this would also be incorrect.   A quick way to avoid the crash would be to just add an extra check of `objectsToPaste` to see it's not empty before getting the first object. However, to also solve the related issue with `clipboard_has()` a more robust way to handle this could be to move away from the `canReadObjectForClasses` method if this is unreliable, and instead use NSPasteboard `stringForType` and [availableTypeFromArray](https://developer.apple.com/documentation/appkit/nspasteboard/availabletype(from:)?language=objc) related methods to check for string data availability.   ### Steps to reproduce  At first the suspicion was that this happened when the clipboard was empty, but this luckily does not seem to be enough. I've attempted to (correctly) clear the clipboard using `pasteboard clearContents` and this does not trigger the issue.   So I've not been able to reproduce the issue on my system, but since it's reproducible on the user system and seems clear where it's crashing at least I'm reporting this anyway.   ### Minimal reproduction project (MRP)  In the situation with the invalid pasteboard state no specific project Godot is needed.  Just calling `DisplayServer.clipboard_get()` on macOS would cause the crash."
  },
  {
    "number": 108369,
    "title": "[WIP] Presort text draw calls.",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108369",
    "user": "bruvzg",
    "labels": [
      "enhancement",
      "topic:rendering",
      "topic:gui",
      "performance"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T08:10:39Z",
    "updated_at": "2025-07-08T09:01:25Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "Pre-sort text draw calls to improve batching, should significantly reduce draw call number for languages with a lot of glyphs and multiline text with outlines/shadow.    ### TODO:    - [x] `TextServer` backend.  - [ ] `Label`.    - [X] Add support.    - [ ] Cleanup and optimize draw (excessive nested loops can be removed).  - [ ] `RichTextLabel`.  - [ ] `TextEdit`.  - [ ] `Font.draw_*` methods.  - [ ] Document new methods.    ## Before:    <img width=\"954\" alt=\"Screenshot 2025-07-07 at 09 21 28\" src=\"https://github.com/user-attachments/assets/f014b917-5e0b-40be-9c93-ec2f67ee83a7\" />    ## After:    <img width=\"954\" alt=\"Screenshot 2025-07-07 at 10 43 35\" src=\"https://github.com/user-attachments/assets/3c9615a9-875e-488c-b8df-7cb03a53033f\" />    Depends on https://github.com/godotengine/godot-cpp/pull/1812    Fixes https://github.com/godotengine/godot/issues/107109  Fixes https://github.com/godotengine/godot/issues/104537"
  },
  {
    "number": 108368,
    "title": "Move 2D and 3D particle editors to the 2D and 3D folders",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108368",
    "user": "aaronfranke",
    "labels": [
      "enhancement",
      "topic:editor",
      "topic:codestyle",
      "topic:particles"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T07:54:54Z",
    "updated_at": "2025-07-07T10:01:45Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Follow-up to PR #104696. This PR moves the 2D and 3D particle editors into the new 2D and 3D folders. Previously, the 2D particle editors, 3D particle editors, and general shared code was all in one file (well, two, `.h` and `.cpp`).    This PR doesn't undo PR #94371, the code is still unified, with the 2D and 3D editors each inheriting the general base class, just now the 2D and 3D parts are organized into the 2D and 3D folders."
  },
  {
    "number": 108367,
    "title": "Fix typo in `TextParagraph.direction` hint string",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108367",
    "user": "timothyqiu",
    "labels": [
      "bug",
      "topic:gui",
      "cherrypick:4.3",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-07T07:25:25Z",
    "updated_at": "2025-07-07T15:19:29Z",
    "closed_at": "2025-07-07T15:14:05Z",
    "milestone": "4.5",
    "is_pull_request": true,
    "body": ""
  },
  {
    "number": 108366,
    "title": "Changing any text_editor/theme/highlighting value changes the color theme to Godot 2",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108366",
    "user": "uintsareawesome",
    "labels": [
      "archived"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [
      {
        "user": "arkology",
        "created_at": "2025-07-07T07:25:17Z",
        "body": "This is the same as https://github.com/godotengine/godot/issues/103914 Beta 2 release blogpost - 1 July, linked PR merged on 2 July. So fix will be in beta 3."
      }
    ],
    "created_at": "2025-07-07T07:06:38Z",
    "updated_at": "2025-07-07T14:17:49Z",
    "closed_at": "2025-07-07T07:25:53Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Reproducible in **v4.4.1.stable.official**,  _v4.5.beta2.official_  ### System information  Fedora Linux 42 (KDE Plasma Desktop Edition)  ### Issue description  Changing any color value for the editor's highlights switches the theme to Godot 2 after an editor restart. The `text_editor/theme/color_theme` value is correctly set to \"Custom\", however all colors change to their Godot 2 values.  Changing the `text_editor/theme/color_theme` to custom without modifying any values also does the same thing after a restart.  Switching between the Default theme and the Godot 2 theme does not require a restart for the changes to take effect. Changing any values or switching to Custom without any modifications works as expected during the session. The bug only occurs after an editor restart.  https://github.com/user-attachments/assets/389770cd-b433-4ca6-a10c-e073c6cab23e  ### Steps to reproduce  Modify any color of any highlight and restart the editor.  ### Minimal reproduction project (MRP)  N/A"
  },
  {
    "number": 108365,
    "title": "Fix: Multi-select for unwrapping uv2 for meshes",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108365",
    "user": "aryan-11825114",
    "labels": [
      "enhancement",
      "topic:editor",
      "usability",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-07T05:01:09Z",
    "updated_at": "2025-07-07T09:51:21Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "Closes #108000    I tried implementing multi-select for unwrapping uv2 for meshes, hopefully this is the correct fix looking forward for some feedback."
  },
  {
    "number": 108364,
    "title": "Use inotify to detect devices for better reliability on Linux",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108364",
    "user": "Rindbee",
    "labels": [
      "bug",
      "platform:linuxbsd",
      "topic:thirdparty",
      "topic:input"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T03:42:18Z",
    "updated_at": "2025-07-07T09:53:38Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Fix the issue that some devices were not detected when hot plugged.    <!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  Fix #108362."
  },
  {
    "number": 108363,
    "title": "Would like the ability to call `super` methods on classes defined in gdextensions from subclasses written in gdscript",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108363",
    "user": "bcolloran",
    "labels": [
      "enhancement",
      "topic:gdextension"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T02:22:40Z",
    "updated_at": "2025-07-07T17:51:47Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - v4.4.1.stable.official [49a5bc7b6] - v4.4.stable.custom_build [d127a0434] (official build of GodotSteam)       ### System information  Godot v4.4.1.stable - Linux Mint 22.1 (Xia) on X11 - X11 display driver, Multi-window, 1 monitor - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 2060 (nvidia; 550.144.03) - AMD Ryzen 9 5900XT 16-Core Processor (32 threads)  ### Issue description  I have a custom class defined in a gdextension that has a bit of setup logic in its lifecycle methods (in my specific case, both `_enter_tree` and `_ready`, though I belive the issue is more general than that). I'd like to be able to write subclasses in gdscript that have a bit of additional setup logic, but I need the setup logic in the gdextension base class to run as well.  Currently, when I attempt to accomplish this by running e.g. `super._ready()` from within the gdscript subclass, I get the error ``` ERROR: Cannot call the parent class' virtual function \"_ready()\" because it hasn't been defined. ```  This is a parser error that is visible in the editor as soon as the gdscript is saved, so not a run time issue.  Additionally, I know for sure that the gdextension super class has the `_ready` lifecycle method, because it runs as expected (prints to console in the MRP below).  My gdextension is written using the *absolutely amazing* godot-rust, about which I can seriously not say enough good things :-). MRP uses the latest stable release of the project. I checked in with the project lead @Bromeon, and he [suggested adding an issue with godot core](https://discord.com/channels/723850269347283004/1192118392660963338), since this would probably be valuable to users across the ecosystem. He also mentioned two possibly related issues, which I will link here in case it's helpful: - https://github.com/godotengine/godot-cpp/issues/1022 - https://github.com/godotengine/godot/pull/83583    ### Steps to reproduce  reproduction steps included in the README of the MRP in the repo below -- basically, run uncomment the `super` method call and you'll see the parser error.  ### Minimal reproduction project (MRP)  https://github.com/bcolloran/call_gdextension_super-repro"
  },
  {
    "number": 108362,
    "title": "Hot-plugging third-party devices that use Nintendo's mapping scheme may not be detected",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108362",
    "user": "Rindbee",
    "labels": [
      "bug",
      "topic:input"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-07T01:03:15Z",
    "updated_at": "2025-07-07T14:46:13Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": false,
    "body": "### Tested versions  Reproducible in: v4.5.beta2.official [e1b4101e3] Not reproducible in: v4.5.beta1.official [46c495ca2]  ### System information  Godot v4.5.beta2 - Linux Mint 22.1 (Xia) on X11 - X11 display driver, Multi-window, 1 monitor - Vulkan (Forward+) - dedicated NVIDIA GeForce GTX 1050 Ti (nvidia; 570.133.07) - Intel(R) Core(TM) i5-7300HQ CPU @ 2.50GHz (4 threads) - 23.37 GiB memory  ### Issue description  It can detect devices that were connected before Godot was run, but cannot detect hot-plugged devices.   <details> <summary>dmesg log</summary>  ```dmesg [ 7400.787462] usb 1-8: new full-speed USB device number 21 using xhci_hcd [ 7400.984420] usb 1-8: New USB device found, idVendor=3537, idProduct=2106, bcdDevice= 1.00 [ 7400.984449] usb 1-8: New USB device strings: Mfr=1, Product=2, SerialNumber=0 [ 7400.984457] usb 1-8: Product: HID zk [ 7400.984463] usb 1-8: Manufacturer: Zikway [ 7400.989232] hid-generic 0003:3537:2106.001A: hiddev2,hidraw4: USB HID v1.11 Device [Zikway HID zk] on usb-0000:00:14.0-8/input0 [ 7401.101419] usb 1-8: USB disconnect, device number 21 [ 7401.709476] usb 1-8: new full-speed USB device number 22 using xhci_hcd [ 7401.882829] usb 1-8: New USB device found, idVendor=057e, idProduct=2009, bcdDevice= 2.00 [ 7401.882848] usb 1-8: New USB device strings: Mfr=1, Product=2, SerialNumber=3 [ 7401.882856] usb 1-8: Product: Pro Controller [ 7401.882862] usb 1-8: Manufacturer: Zikway [ 7401.882867] usb 1-8: SerialNumber: 314838353800c9c4 [ 7401.889648] nintendo 0003:057E:2009.001B: hidraw4: USB HID v81.11 Joystick [Zikway Pro Controller] on usb-0000:00:14.0-8/input0 [ 7402.176995] nintendo 0003:057E:2009.001B: controller MAC = 15:DC:43:F3:76:30 [ 7402.185010] nintendo 0003:057E:2009.001B: using user cal for left stick [ 7402.193004] nintendo 0003:057E:2009.001B: using user cal for right stick [ 7402.216985] nintendo 0003:057E:2009.001B: using user cal for IMU [ 7402.249016] nintendo 0003:057E:2009.001B: assigned player 1 led pattern [ 7402.265421] input: Zikway Pro Controller as /devices/pci0000:00/0000:00:14.0/usb1/1-8/1-8:1.0/0003:057E:2009.001B/input/input44 [ 7402.265668] input: Zikway Pro Controller (IMU) as /devices/pci0000:00/0000:00:14.0/usb1/1-8/1-8:1.0/0003:057E:2009.001B/input/input45 [ 7402.270736] nintendo 0003:057E:2009.001C: hidraw5: USB HID v81.11 Device [Zikway Pro Controller] on usb-0000:00:14.0-8/input1 [ 7406.429455] nintendo 0003:057E:2009.001C: Failed to get joycon info; ret=-110 [ 7406.429474] nintendo 0003:057E:2009.001C: Failed to retrieve controller info; ret=-110 [ 7406.429484] nintendo 0003:057E:2009.001C: Failed to initialize controller; ret=-110 [ 7406.429817] nintendo 0003:057E:2009.001C: probe - fail = -110 [ 7406.429836] nintendo 0003:057E:2009.001C: probe with driver nintendo failed with error -110 ``` </details>  It may be related to the error message above. Currently, it will be detected using the `LINUX_FallbackJoystickDetect()` method.  https://github.com/godotengine/godot/blob/53be3b78d1634406f1fb29e3802c608a5f5104a1/thirdparty/sdl/joystick/linux/SDL_sysjoystick.c#L947-L964   https://github.com/godotengine/godot/blob/53be3b78d1634406f1fb29e3802c608a5f5104a1/thirdparty/sdl/joystick/linux/SDL_sysjoystick.c#L448  When debugging with a breakpoint at line 448, it works; but when outputting `fd` using `SDL_log()`, it seems to show that opening the file corresponding to the device failed.  This issue does not occur when `HAVE_INOTIFY` is defined.    ### Steps to reproduce  1. Connect the device; 2. Run the project and the device can be detected: Nintendo Switch Pro Controller - 03005d777e0500000920000011810000 3. Disconnect and reconnect, the device cannot be detected.  ### Minimal reproduction project (MRP)  [Joypads Demo](https://github.com/godotengine/godot-demo-projects/tree/master/misc/joypads)"
  },
  {
    "number": 108361,
    "title": "Modifying JSON files in Godot 4.4.1-stable does not save the file as it is written.",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108361",
    "user": "David-Everlasting-Media",
    "labels": [
      "enhancement",
      "archived",
      "discussion",
      "topic:editor"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [
      {
        "user": "SamInTheShell",
        "created_at": "2025-07-06T23:54:13Z",
        "body": "We confirmed on Mac OS and Linux. This is bad editor behavior. "
      },
      {
        "user": "AThousandShips",
        "created_at": "2025-07-07T14:25:03Z",
        "body": "Thank you for reporting, this is already tracked in: * https://github.com/godotengine/godot/issues/105160  Closing this to keep things in one place, please see there for more details"
      }
    ],
    "created_at": "2025-07-06T23:52:18Z",
    "updated_at": "2025-07-07T14:25:07Z",
    "closed_at": "2025-07-07T14:25:03Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  4.4.1.stable.mono  ### System information  Linux Mint (Cinnamon, latest stable) - Forward+ - 4090  ### Issue description  The following behavoir is unexpected from the Godot editor when working with JSON files. If a user saves a file, the contents should match exactly what they saw upon saving. In no universe is it acceptable for the data to be repopulated without some form of feedback explaining it happened.   When editing JSON files in the Godot editor, the actual contents and formatting are not respected.  Saving a blank file after clearing its contents leaves junk data from the previous save.  Godot Editor reports a save, after clearing data, and in Godot Editor it appears clear, but in any other text editor or command line (i.e. cat filename.json) the file is not cleared, and is in-fact populated with the previous save's text, but with additional formatting (newlines etc).   This becomes problematic when troubleshooting writing to JSON files from the editor (in this case, building a custom dialogue system).   ### Steps to reproduce  ### Step 1 I created the json file in Godot. Below is the contents.  ``` {\"foo\":\"bar\"} ```  ### Step 2 I deleted all the contents of the file and tried to save an empty json file.  ### Step 3 I check the file contents and it was populated with the garbage I tried to delete, with additional text formatting.  ``` % cat myfile.json {     \"foo\": \"bar\" } ```  ### Minimal reproduction project (MRP)  ./"
  },
  {
    "number": 108360,
    "title": "[4.3] Add `CLIP_SPACE_FAR` built-in to spatial shader",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108360",
    "user": "aaronfranke",
    "labels": [
      "enhancement",
      "topic:shaders"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T22:36:05Z",
    "updated_at": "2025-07-06T22:37:21Z",
    "closed_at": null,
    "milestone": "4.3",
    "is_pull_request": true,
    "body": "Manual backport of PR #95057 to the Godot 4.3 branch because there were conflicts. I tested that this works.    I resolved conflicts, but otherwise the code is entirely from @Chaosus's original PR."
  },
  {
    "number": 108359,
    "title": "Double Precision GPU Particles Scale Over Time Broken",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108359",
    "user": "TCROC",
    "labels": [
      "discussion",
      "topic:rendering",
      "topic:particles"
    ],
    "assignee": "",
    "comments_count": 5,
    "comments": [
      {
        "user": "clayjohn",
        "created_at": "2025-07-06T23:32:50Z",
        "body": "CC @celyk @fire "
      },
      {
        "user": "celyk",
        "created_at": "2025-07-07T03:31:32Z",
        "body": "Tested in 4.4.1.stable with normal precision, and the scale also doesn't affect it there. Try enabling billboard_keep_scale in the Billboard category of the StandardMaterial. If that fixes it in the double precision build as well I think that the previous behaviour would be wrong for being inconsistent with normal precision builds.  ### System information Godot v4.4.1.stable - macOS Sequoia (15.3.0) - Multi-window, 1 monitor - Metal (Forward+) - integrated Apple M2 (Apple8) - Apple M2 (8 threads)"
      },
      {
        "user": "celyk",
        "created_at": "2025-07-07T14:36:02Z",
        "body": "Tested before and after my patch (#106951), and only the double precision build is affected.  Before the patch the double precision build behaves differently from the normal build. The scale of the particles happens in the MRP, but enabling `billboard_keep_scale` appears to apply the scale a second time (wrong).  After the patch the double precision build behaves the same as the normal build. The scale of the particles doesn't happen in the MRP, but enabling `billboard_keep_scale` appears to apply the scale once, as expected.  In conclusion, the previous behaviour is inconsistent and buggy and should not be revived. The issue can be resolved by enabling `billboard_keep_scale`."
      },
      {
        "user": "TCROC",
        "created_at": "2025-07-07T15:21:13Z",
        "body": "> Tested before and after my patch ([#106951](https://github.com/godotengine/godot/pull/106951)), and only the double precision build is affected. >  > Before the patch the double precision build behaves differently from the normal build. The scale of the particles happens in the MRP, but enabling `billboard_keep_scale` appears to apply the scale a second time (wrong). >  > After the patch the double precision build behaves the same as the normal build. The scale of the particles doesn't happen in the MRP, but enabling `billboard_keep_scale` appears to apply the scale once, as expected. >  > In conclusion, the previous behaviour is inconsistent and buggy and should not be revived. The issue can be resolved by enabling `billboard_keep_scale`.  I can confirm this fixes it.  Should we add some kind of \"Warning\" or prompt the user to enable \"billboard_keep_scale\" on their material if they have a billboard material and they set scale over lifetime?  Otherwise, it is not obvious to me why my particles aren't scaling and I can see this being a stumbling block for other users."
      },
      {
        "user": "Calinou",
        "created_at": "2025-07-07T20:35:38Z",
        "body": "> Should we add some kind of \"Warning\" or prompt the user to enable \"billboard_keep_scale\" on their material if they have a billboard material and they set scale over lifetime?   Yes, but implementing this kind of warning is difficult (if not impossible) as you'd need to reference the ParticleProcessMaterial from the BaseMaterial3D. The ParticleProcessMaterial is where scale over lifetime is configured, while the BaseMaterial3D is where the Keep Scale property is toggled.  In the long term, we should make it so creating a particles node in the editor automatically creates a correct ParticleProcessMaterial + BaseMaterial3D setup. See OP from https://github.com/godotengine/godot/pull/88647 for details."
      }
    ],
    "created_at": "2025-07-06T21:43:20Z",
    "updated_at": "2025-07-07T20:36:48Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Introduced by pr: https://github.com/godotengine/godot/pull/106951  ### System information  Linux Vulkan Forward+, iOS Metal Mobile  ### Issue description  The PR above introduced some logic that fixed several double precision issues with gpu particles, but unfortunately broke gpu particles so they no longer scale over time in double precision builds.  ### Steps to reproduce  1. Open the attached MRP 2. Open the \"Particles.tscn\" scene 3. See that the particles no longer scale over time  ### Before PR ✅  <img width=\"1901\" height=\"943\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/6030cb26-756f-4dc9-b20e-0e9eaae170df\" />  ### After PR ❌  <img width=\"1875\" height=\"1017\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/dc64e412-2573-458e-8f50-2cd954917984\" />  ### Minimal reproduction project (MRP)  [particle_scale_mrp.zip](https://github.com/user-attachments/files/21092141/particle_scale_mrp.zip)"
  },
  {
    "number": 108358,
    "title": "Use square versions of distance/length where appropriate",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108358",
    "user": "AThousandShips",
    "labels": [
      "enhancement",
      "topic:core",
      "performance"
    ],
    "assignee": "",
    "comments_count": 26,
    "comments": [],
    "created_at": "2025-07-06T21:10:18Z",
    "updated_at": "2025-07-08T07:56:50Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "In cases where the actual value is not directly relevant it's unnecessary to take the square root, as squares preserve ordering    Split into three separate commits for ease of review, with increasing complexity of cases    Very open to detailed tweaks in the exact solutions, some cases are a bit messy for readability but I think they're still worth avoiding the square root    The exact limits in some cases can also be discussed to avoid clutter and complexity, but the current solution keeps the exact comparisons from the original taking the square of the compared value    There are a few more cases that could be improved with this where the value is used specifically, I left those out but can add them in a follow-up where we instead take the square root manually at the end (a few cases like that where the closest value is calculated, and then used once at the end. In cases like that we can do the computations on the square and then take the root at the end)    Left a few cases that were especially messy for readability, and can restore some of the explicit expressions in some of the cases if the meaning of the values are more relevant, i.e. `10.0 * 10.0` instead of `100.0`, or more relevant `(5.0 * EDSCALE) * (5.0 * EDSCALE)` over `25.0 * EDSCALE * EDSCALE` etc., simplified most of the expressions for readability but it might be relevant to keep the original value explicitly.    Created temporaries for a lot of cases to help readability, they should simply be optimized out in cases where they're used exactly once, can restore them to just `foo * foo` instead of `foo_squared` but felt they were more readable this way    Considered adding a helper `SQUARE` macro that just does `#define SQUARE(m_arg) ((m_arg) * (m_arg))` but felt it obscured things too much, it would help readability in a lot of cases though assuming it isn't too obscuring  <!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  "
  },
  {
    "number": 108357,
    "title": "Some BMFont characters have a solid line of pixels at the top or bottom when rendered",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108357",
    "user": "joshsegall",
    "labels": [
      "needs testing",
      "topic:gui"
    ],
    "assignee": "",
    "comments_count": 5,
    "comments": [
      {
        "user": "AThousandShips",
        "created_at": "2025-07-06T20:57:52Z",
        "body": "Sounds like: * https://github.com/godotengine/godot/issues/107137"
      },
      {
        "user": "bruvzg",
        "created_at": "2025-07-06T21:01:50Z",
        "body": "> Sounds like: https://github.com/godotengine/godot/issues/107137  Unlikely, BMFont can't use MSDF it's bitmap only format."
      },
      {
        "user": "bruvzg",
        "created_at": "2025-07-06T21:08:32Z",
        "body": "~The issue seems to be non alpha-premultiplied PNG~ Font file have `alphaChnl=1 redChnl=0 greenChnl=0 blueChnl=0` so alpha channel is ignored (1 is outline channel), and only color channels are used (0 is glyph channel), if you disable alpha channel, you can see color channels have the line:  <img width=\"527\" height=\"537\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/16f291e4-b9de-4f20-8241-5b9e0dc27c4a\" />  If it's changed to `alphaChnl=0 redChnl=0 greenChnl=0 blueChnl=0` it will work, so I think it's an issue with font file."
      },
      {
        "user": "bruvzg",
        "created_at": "2025-07-06T21:24:00Z",
        "body": "> so I think it's an issue with font file.  What app was this BMFont file created with? File seems invalid, but if `outline=0 alphaChnl=1 redChnl=0 greenChnl=0 blueChnl=0` format without actual outline is common, we might add an exception for it."
      },
      {
        "user": "joshsegall",
        "created_at": "2025-07-06T21:42:53Z",
        "body": "I couldn't find a useful editor for macOS, so I copied the BMFont file from another font (can't remember which), so it's unlikely to be a common issue. But the fix to the BMFont file header does work, thanks!"
      }
    ],
    "created_at": "2025-07-06T20:48:44Z",
    "updated_at": "2025-07-06T21:50:52Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in 4.4.1 stable, 4.1 stable - Not reproducible in 3.6 stable  ### System information  Godot v4.4.1.stable - macOS Sequoia (15.5.0) - Multi-window, 1 monitor - OpenGL 3 (Compatibility) - Apple M4 Pro - Apple M4 Pro (14 threads)  ### Issue description  I have a bitmap font with a text format BMFont and associated PNG. It works fine in all 3.6 versions but in all 4.x versions it is rendering a line of pixels at the top and sometimes bottom of some characters (j, p, q). It seems to mostly affect lowercase characters, but some other characters are also affected, such as $ and *. Some characters, like \"w\" only have a single extra pixel instead of a whole line.  <img width=\"544\" height=\"384\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/75c04341-f326-4161-827e-15dc3fee42bb\" />  Things I've tried that haven't changed the behavior of the bug: - Import settings on the font, including Compress and every Scaling Mode - Project settings: Default Texture Filter, Default Filters, Decals (Nearest) - Project settings: Theme > Default Font Subpixel Positioning, LCD Subpixel Layout (Disabled) - Label > Texture > Filter = Nearest, Repeat = Disabled - PNG: moving characters to other places in the image and updating the FNT file to match - PNG: adding an empty pixel border to the whole image  One thing that sort of seems to work is to erase the character from the image, reimport, then build the character pixel-by-pixel reimporting each time. That sounds strange, but simply erasing the character, reimporting, redrawing the character in its entirety, and reimporting doesn't work. However, this doesn't work for all characters all the time. I've also experimented with erasing other parts of the image but that seems to have no effect.  ### Steps to reproduce  Import the BMFont file and use it in a Label with lowercase alphabetic characters (See example image in description)  ### Minimal reproduction project (MRP)  [fontbugtext.zip](https://github.com/user-attachments/files/21091634/fontbugtext.zip)"
  },
  {
    "number": 108356,
    "title": "Fix incorrect light values on blend import",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108356",
    "user": "neonmoe",
    "labels": [
      "bug",
      "topic:import",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 5,
    "comments": [],
    "created_at": "2025-07-06T20:28:33Z",
    "updated_at": "2025-07-08T18:57:50Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "This commit changes the Blender glTF export process to output light intensities in watts, and adds a separate conversion step to convert those into appropriate units for Godot.    Blender's watts result in correct relative brightnesses for the lights when using use_physical_light_units, but unfortunately only then. Due to this discrepancy, the conversion process has separate branches depending on that project setting, which also means that blend files need to be reimported after changing that setting.    When using physical light units, Blender's light values are already in the correct quantities, the values are just in the wrong \"scale\" (radiometric vs photometric). To account for this, the conversion process converts the watts (and watts/m^2) to lumens (and lux) by using a luminous efficacy constant picked up from Blender's IES profile parser, an existing case of Blender converting lumens (well, candelas) into watts. The luminous efficacy value used (177.83) is also currently being proposed to be used in glTF-Blender-IO#2554.    When using non-physical light units, using Blender's watts directly as the energy ends up with way too bright lights. Turns out, Blender's \"Unitless\" export option gets pretty close to Blender with the default Godot exposure, so that is used when physical light units are disabled, and no further post-processing is applied.    Additionally, this sets the light attenuation for glTF (and thus Blender) imports to 2.0 by default, to match the attenuation seen in Cycles and EEVEE.    Fixes #92168.    ### Screenshots    The screenshots using physical light units use camera attributes tuned for indoor scenes (2.4 f-stop, 100 Hz shutter speed, 400 ISO sensitivity), fine-tuned to match Blender. I think indoor levels of exposure make sense, because adding a sun into Blender's default cube scene ends up being way overexposed. Note that the exposure being eyeballed means that these screenshots aren't really helpful for validating if 177.83 is the correct luminous efficacy, but I do think 177.83 results in appropriate lumens, and the exposure used to match Blender here feels about right to me.    The non-physical light units screenshots are using the default camera attributes' exposure.    | Blender Cycles | Blender EEVEE | Godot (physical light units) | Godot (non-physical light units) |  |---|---|---|---|  | ![render-blender-4 4 3-cycles](https://github.com/user-attachments/assets/6c789178-a331-427f-b298-ba1d1574b965) | ![render-blender-4 4 3-eevee](https://github.com/user-attachments/assets/02fc9e63-317d-49bf-bace-877eb7abcf1e) | ![render-godot-PR-forward+](https://github.com/user-attachments/assets/d26ccf4a-d76c-4f62-bf3d-ab5593fd6744) | ![render-godot-PR-forward+-non-physical](https://github.com/user-attachments/assets/c9ad3aba-c31c-4ce4-b0a1-c3df8421f552) |  | ![render-blender-4 4 3-cycles](https://github.com/user-attachments/assets/cff5022c-74eb-430d-8728-22446da76169) | ![render-blender-4 4 3-eevee](https://github.com/user-attachments/assets/4e53abaf-cb08-4637-903c-0d564333109f) | ![render-godot-PR-forward+](https://github.com/user-attachments/assets/f041ad67-b4f8-49e4-9566-17260b7c0a46) | ![render-godot-PR-forward+-non-physical](https://github.com/user-attachments/assets/90c02a66-6e6a-4b94-8e17-7e50ef5437f4) |  | ![render-blender-4 4 3-cycles](https://github.com/user-attachments/assets/ec3bcd32-9bc4-48d0-bd18-dce77ccbbd63) | ![render-blender-4 4 3-eevee](https://github.com/user-attachments/assets/a3408ac8-3c2f-4272-8d9d-5caf68dada25) | ![render-godot-PR-forward+](https://github.com/user-attachments/assets/a3299566-aab2-45d2-92cb-0baa6dd74eb4) | ![render-godot-PR-forward+-non-physical](https://github.com/user-attachments/assets/ae77a6d8-4666-4a2a-9f5a-cae6be094140) |  | ![render-blender-4 4 3-cycles](https://github.com/user-attachments/assets/cde14727-4ecd-4316-9d5b-33c1de83e428) | ![render-blender-4 4 3-eevee](https://github.com/user-attachments/assets/aac30a2d-91e1-43f7-99e3-dd6e89445922) | ![render-godot-PR-forward+](https://github.com/user-attachments/assets/c123558f-faf1-4bd7-8e22-b308029cf89d) | ![render-godot-PR-forward+-non-physical](https://github.com/user-attachments/assets/ad415280-32af-4c6c-aa9d-2c7862e3f487) |    (The Godot screenshots reflect commit 2b3b6f06cccd1440fa8d0b9b67bf95b5e05df010.)    The first scene is just the default Blender cube with the background taken out to ease calibration. The second one has all the three light types, to validate that they look appropriate relative to each other. The third one has a single directional light, which is The Sun levels of bright, except it has an almost black color to avoid overexposing the default (\"indoors\") exposure. The fourth one is the Blender scene included in the issue's MRP, with the background set to black (since that can't be accounted for by this import process, and the default Godot background is too bright for this exposure with physical light units).    The point of the three scenes is to move around the lights, use different intensities, and then see if the same exposure settings lead to matching results with Blender.    Here's the project including all the scenes that those screenshots are from: [light-tests.zip](https://github.com/user-attachments/files/21106497/light-tests.zip)  "
  },
  {
    "number": 108355,
    "title": "Web: Experimental Virtual Keyboard Does Not Work With LineEdit/TextEdit in SubViewport",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108355",
    "user": "barthy-koeln",
    "labels": [
      "bug",
      "platform:web",
      "topic:input"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T20:27:11Z",
    "updated_at": "2025-07-07T14:22:37Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in 4.4.1-stable - Reproducible in 4.5-beta2 - Reproducible in `master` by the time of writing  ### System information  iOS WebKit (Safari), Android Blink (Chrome etc)  ### Issue description  Any `LineEdit` or `TextEdit` that is located within a `SubViewportContainer > Subviewport` tree will not receive any input in web builds that have `html/experimental_virtual_keyboard=true`.  ___  (educated guess from here)  Based on some experiments, it seems the `SubViewport` loses focus (in-engine) when the HTML input gains focus. I assume this is also because the HTLM canvas loses focus.  This would make the following code basically a no-op:  ```cpp //file:  /godot/scene/main/viewport.cpp:2777  void Viewport::push_text_input(const String &p_text) { \tERR_MAIN_THREAD_GUARD; \tif (gui.subwindow_focused) { \t\tgui.subwindow_focused->push_text_input(p_text); \t\treturn; \t}  \tif (gui.key_focus) { \t\tgui.key_focus->call(\"set_text\", p_text); \t} } ```  ### Steps to reproduce  * Create empty Project * Add a `SubViewportContainer > Subviewport > LineEdit` node structure * Add a Web export template * Enable  `html/experimental_virtual_keyboard=true` * Run in browser * Focus the input * Type with on-screen keyboard * Nothing is added to the `LineEdit`  ### Minimal reproduction project (MRP)  * [Repository](https://github.com/barthy-koeln/godot-repro-web-vk-subviewport) * [Hosted Preview](https://barthy-koeln.github.io/godot-repro-web-vk-subviewport/) * [ZIP Archive](https://github.com/user-attachments/files/21091366/godot-repro-web-vk-subviewport--src.zip)"
  },
  {
    "number": 108354,
    "title": "Thirdparty: Fix SDL arm64 compilation on Windows",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108354",
    "user": "Repiteo",
    "labels": [
      "bug",
      "topic:buildsystem"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T20:18:21Z",
    "updated_at": "2025-07-07T15:14:37Z",
    "closed_at": "2025-07-07T15:14:05Z",
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Arm64 builds failed for Windows for beta 2, and that was ultiamtely down to `errno.h` being excluded. This was caused by a define which explicitly removes the include, but didn't affect x86 compilation because some other header just so happened to include it anyway. This removes the exlusion define entirely.    * *Bugsquad edit, fixes: https://github.com/godotengine/godot/issues/108345*"
  },
  {
    "number": 108353,
    "title": "2D Canvas Shader - instance uniform vec4 with the source_color hint creates a color that behaves differently than expected.",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108353",
    "user": "ThornedOwl",
    "labels": [
      "archived"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [
      {
        "user": "ThornedOwl",
        "created_at": "2025-07-06T21:21:25Z",
        "body": "After a bit of testing, the problematic instance uniform vec4 color with source_color hint is acting a lot like its being multiplied by itself. I tried multiplying the COLOR value by a correctly working color uniform twice and the color it yields is very similar to the \"broken\" instance version."
      },
      {
        "user": "AThousandShips",
        "created_at": "2025-07-06T22:08:50Z",
        "body": "Sounds like: * https://github.com/godotengine/godot/issues/102746"
      },
      {
        "user": "ThornedOwl",
        "created_at": "2025-07-06T23:18:00Z",
        "body": "> Sounds like: >  > * [2D instance uniform with source_color flag incorrectly shows in Vulkan #102746](https://github.com/godotengine/godot/issues/102746)  Thank you. This looks like the same problem. I didn't find that when I searched."
      }
    ],
    "created_at": "2025-07-06T19:44:19Z",
    "updated_at": "2025-07-07T14:17:51Z",
    "closed_at": "2025-07-06T23:19:09Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  -Reproducible in Godot v4.4.1 stable -The instance feature was not available on 2D canvas item shader uniforms prior to v4.4 so previous versions are irrelevant.  ### System information  Godot v4.4.1.stable - Windows 10 (build 19045) - Multi-window, 1 monitor - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 2080 SUPER (NVIDIA; 32.0.15.6094) - AMD Ryzen 9 3900X 12-Core Processor (24 threads)  ### Issue description  Hi all, this is my first bug report so please be patient. I've been working on a shader to recolor grayscale sprites with a multiply effect similarly to how the canvas item modulate feature works. The problem is that when I use an instance uniform vec4 color with the source_color hint, the resulting color multiplication comes out much darker and more saturated than the same uniform without instance or the same uniform without the source_color hint. Please see the attached image.  <img width=\"2880\" height=\"1080\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/6647e512-965c-4427-aa24-70c9cf772ffd\" />  The center image is clearly much more saturated and darker than the left or right images, even though the color is set to the same as the one on the left and right. The color will still behave incorrectly when other operators besides multiply are applied.  ### Steps to reproduce  1. Create a v4.4 project and make sure that the render mode is set to forward+ 2.  Create a new 2D canvas item shader and apply it to any sprite, preferably grayscale. 3. Give the shader an instance uniform vec4 with a source_color hint. 4. Set the color of the uniform above in the editor to something noticeable, not white or black. 5. Multiply the COLOR of the shader in the fragment function by the color uniform above.  Shader example:  ``` shader_type canvas_item; render_mode blend_mix;  uniform vec4 vec4_source_color: source_color; //this color is correctly applied instance uniform vec4 instance_source_color: source_color; //this color is incocorrectly applied, notice how it creates a darker color when set below instance uniform vec4 instance_vec4_color; //this color is correctly applied  void fragment() { \tCOLOR *= vec4_source_color; //Multiply effect. Replace the uniform to the left with one of the three options above to see the results }  ```    ### Minimal reproduction project (MRP)  The project below features a sprite with a simple shader applied. The shader features 3 uniforms that you can swap between to see the visual effects.  [shader-instance-uniform-color-bug.zip](https://github.com/user-attachments/files/21091071/shader-instance-uniform-color-bug.zip)"
  },
  {
    "number": 108352,
    "title": "When setting scale to 0 for any 3d node, you get constantly: \"ERROR: core/math/basis.cpp:47 - Condition \"det == 0\" is true.\"",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108352",
    "user": "arnaucmd",
    "labels": [
      "archived",
      "discussion",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [
      {
        "user": "AThousandShips",
        "created_at": "2025-07-06T21:00:57Z",
        "body": "The error is correct, the scale should never be zero, but this should probably be prevented, but there's no real bug here except possibly for being able to assign the scale  Related: * https://github.com/godotengine/godot/issues/102536 * https://github.com/godotengine/godot/issues/63011"
      },
      {
        "user": "arnaucmd",
        "created_at": "2025-07-07T09:14:52Z",
        "body": "why you can't set scale to 0 though? It should have the same effect as visible false more or less imo. Even if it's really impossible for some reason, at least just one warning explaining you why it should not be zero, or at least that a node has scale to zero and this is no good. and the specific node and path on the project. or make the 0 scale be 0.0001 idk. But this is really weird behaviour, specially because I lost hours trying to figure out what did the error even mean, and some more hours to find the specific node. "
      },
      {
        "user": "Calinou",
        "created_at": "2025-07-07T20:55:21Z",
        "body": "Thanks for the report! Consolidating in https://github.com/godotengine/godot/issues/63011 and https://github.com/godotengine/godot/issues/102536, as this is due to the same cause."
      }
    ],
    "created_at": "2025-07-06T19:11:12Z",
    "updated_at": "2025-07-07T20:55:24Z",
    "closed_at": "2025-07-07T20:55:21Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Godot 4.4 stable  ### System information  Windows 10 Godot 4.4 stable, Forward+ , lenove legion slim 5 with gtx 4070 laptop  ### Issue description  Title. Just new 3d scne add any 3d node and set scale to 0. my ouput starts printing the error message: \"\"ERROR: core/math/basis.cpp:47 - Condition \"det == 0\" is true.\"\"  ### Steps to reproduce  .  ### Minimal reproduction project (MRP)  ."
  },
  {
    "number": 108351,
    "title": "Store editor log button state globally",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108351",
    "user": "KoBeWi",
    "labels": [
      "enhancement",
      "topic:editor",
      "usability"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T18:36:41Z",
    "updated_at": "2025-07-06T18:36:41Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "Makes editor log buttons state global instead of per-project, which makes more sense. Also fixes a bug where closing the editor too quickly would not save the state of the buttons (because of 2s timer).    That aside, EditorLog was using `editor_layout.cfg` incorrectly. It should not load it manually every time it wants to read or write changes. Interestingly, it's not done anywhere else."
  },
  {
    "number": 108350,
    "title": "Add environment variable access defines to SDL linux build config",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108350",
    "user": "DanielSnd",
    "labels": [
      "bug",
      "topic:input",
      "regression"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T18:10:19Z",
    "updated_at": "2025-07-06T19:45:42Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Enables SDL's access to environment variables on Linux by adding necessary build configuration defines.    This fixes an issue where SDL couldn't read environment variables on Linux systems, particularly affecting SteamDeck users where environment variables allow for the steamdeck's own controller to work.    Closes #108311 as well as enabling end-user configuration of SDL via environment variables on linux."
  },
  {
    "number": 108349,
    "title": "[GraphNode] queue_free() triggers error: Attempt to disconnect a nonexistent connection.",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108349",
    "user": "The-Cyber-Captain",
    "labels": [
      "bug",
      "topic:gui"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [
      {
        "user": "The-Cyber-Captain",
        "created_at": "2025-07-07T00:23:13Z",
        "body": "Curiously... GraphNodes instantiated during runtime (eg, via GraphNode.new() or duplicate() - be that scripted automagically, or result of user-interaction) don't seem to exhibit this problem. 🤔"
      },
      {
        "user": "Naros",
        "created_at": "2025-07-07T13:25:22Z",
        "body": "Hi so the issue here is when the `GraphNode` is added to the `GraphEdit`, the following `item_rect_changed` signal connections are established:  - GraphEdit::_graph_node_rect_changed (binding the node as argument) - GraphEditMinimap::queue_redraw  During the delete the following disconnects are executed for `item_rect_changed`  - GraphEdit::_graph_node_rect_changed - CanvasItem::queue_redraw  This points to the fact that `GraphEdit::add_child_notify` does not connect to the `connections_layer`, and it isn't because that member variable is null, but because its not yet part of the tree.  I would suggest we change: ```cpp \t\tif (connections_layer != nullptr && connections_layer->is_inside_tree()) { \t\t\tgraph_element->connect(SceneStringName(item_rect_changed), callable_mp((CanvasItem *)connections_layer, &CanvasItem::queue_redraw)); \t\t} ``` to ```cpp \t\tif (connections_layer != nullptr) { \t\t\tgraph_element->connect(SceneStringName(item_rect_changed), callable_mp((CanvasItem *)connections_layer, &CanvasItem::queue_redraw)); \t\t} ``` because I do not see the relevance of whether or not the connection layer is in the tree or not.  But if its in the tree or not is relevant, then the `remove_child_notify` method should guard against the fact that a node may not be connected to the `connections_layer`.  I should note that by adding 1 frame between the time when `GraphEdit` is ready and adding its children works around the problem, but in situations like the attached MRP where the `GraphNode` is part of the scene tree, that's not possible unless you force users to add nodes programatically.  As to the differences from 4.3 to 4.4+, in 4.3, the `add_child_notify` does not guard against `connections_layer` being null or not being part of the tree.  In reference to the original change, what I don't grok is why would you remove the `connections_layer` object. I would expect if the `GraphEdit` is designed around specific child widgets being present and you mistakenly remove something in the widget's hierarchy that's required, non-deterministic results should be the outcome. "
      }
    ],
    "created_at": "2025-07-06T18:01:46Z",
    "updated_at": "2025-07-07T14:35:49Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in 4.4.1-stable, 4.5-beta2 - Not reproducible in 4.3-stable  ### System information  Tested on Windows 11, Quest v78 (Android)  ### Issue description  A queue_free() of GraphNode (GraphNode) throws error: `E 0:00:03:416   _disconnect: Attempt to disconnect a nonexistent connection from 'GraphNode:<GraphNode#29880223220>'. Signal: 'item_rect_changed', callable: 'CanvasItem::queue_redraw'.   <C++ Error>   Condition \"!s->slot_map.has(*p_callable.get_base_comparator())\" is true. Returning: false   <C++ Source>  core/object/object.cpp:1529 @ _disconnect() `  ### Steps to reproduce  Create a GraphEdit node Add a child GraphNode  Connect signal GraphEdit.delete_nodes_request to a method which finds the node, and queue_free()s it.  Or, download the MRP, hit play. Select the node. Delete it. Appears to mirror @Naros experiences on #94810. Regression?  ### Minimal reproduction project (MRP)  [graph_node_delete_mrp.zip](https://github.com/user-attachments/files/21090648/graph_node_delete_mrp.zip)"
  },
  {
    "number": 108348,
    "title": "SVG is not fully supported",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108348",
    "user": "Neodevils",
    "labels": [
      "enhancement",
      "discussion",
      "topic:import"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [
      {
        "user": "Telahair",
        "created_at": "2025-07-06T17:32:38Z",
        "body": "Bump"
      },
      {
        "user": "thatoneham",
        "created_at": "2025-07-07T12:59:01Z",
        "body": "same issue here"
      },
      {
        "user": "thatoneham",
        "created_at": "2025-07-07T12:59:35Z",
        "body": "it seems that if i export a shape instead of a sprite it renders correctly?"
      }
    ],
    "created_at": "2025-07-06T17:27:53Z",
    "updated_at": "2025-07-07T14:22:13Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  4.x stable  ### System information  MacOS 15.5, Godot 4.x  ### Issue description  So far, I am trying to use extracted SVG files from a SWF file with using FFDec Flash Decompiler. It exports SVG files with `<use>` along with `defs` & `g` elements.  ### Example ```xml  <use ffdec:characterId=\"797\" ffdec:characterName=\"WholeSword\" height=\"79.45\" transform=\"matrix(0.9871, -0.1571, 0.1571, 0.9871, -95.6324, -201.0661)\" width=\"132.65\" xlink:href=\"#sprite25\"/> <!-- ... --> ```  When I import this to Godot, it just shows a blank screen for SVG file. I have tried to SVG to SVG converter to escape from these elements but now it returns the file just as `<path>` which is making the dedicated sprite name unable to detect _since all become path_.    ### Steps to reproduce  1. Upload the file to Godot. 2. You can't see it is output. --- 1. Open it on any kind of browser. 2. It is being displayed on browser.  ![Image](https://github.com/user-attachments/assets/1e831e81-6416-4a35-a414-ea00ea833507)  ### Minimal reproduction project (MRP)  \\-"
  },
  {
    "number": 108347,
    "title": "Fix underculling of occulusion culling",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108347",
    "user": "Rudolph-B",
    "labels": [
      "bug",
      "topic:rendering",
      "regression",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-06T17:02:48Z",
    "updated_at": "2025-07-08T11:41:21Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Fixes #106184     This commit effectively undoes #103798, reverting to the previous behavior. To ensure that distant objects are culled correctly, I force the distance calculation to use double precision.    The video below compares this PR to v4.4.1 and v4.5.beta2 in a [test scene](https://github.com/user-attachments/files/21090324/occlusion-base.zip). In this scene, the camera is placed within a transparent occluder, so ideally, everything should be occluded at all times.    https://github.com/user-attachments/assets/eb77cb6f-4dcc-4224-8cd4-3749c1750527"
  },
  {
    "number": 108346,
    "title": "Area3D.get_overlapping_bodies() doesn't detect StaticBodies with Jolt",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108346",
    "user": "Yobbolita",
    "labels": [
      "archived"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [
      {
        "user": "precup",
        "created_at": "2025-07-06T19:02:58Z",
        "body": "Have you turned on the setting that enables it for Jolt? It's called Areas Detect Static Bodies.  <img width=\"807\" height=\"743\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/ab484040-e0f3-45e8-8ea4-50a87c994e07\" />"
      },
      {
        "user": "Yobbolita",
        "created_at": "2025-07-06T21:34:26Z",
        "body": "Yes, that works, thanks.  That sounds like a weird option to be turned off by default, but the engine says it's because of performance reasons. Does anyone know if this is StaticBody specific or if using get_overlapping_areas() to detect Area3Ds placed on top of the StaticBodies would have the same performance problems ?"
      },
      {
        "user": "precup",
        "created_at": "2025-07-06T22:55:36Z",
        "body": "I'm not sure, I haven't personally worked with Jolt much, but I would expect that doing so would result in fewer physics objects since not every staticbody would need one, and *that* would help. I'm not particularly knowledgeable about jolt, though."
      }
    ],
    "created_at": "2025-07-06T16:11:23Z",
    "updated_at": "2025-07-07T14:17:54Z",
    "closed_at": "2025-07-06T21:34:39Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Godot v4.4.1.stable  ### System information  Godot v4.4.1.stable - Pop!_OS 22.04 LTS on X11 - X11 display driver, Multi-window, 1 monitor - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 3060 Laptop GPU - AMD Ryzen 5 5600H with Radeon Graphics (12 threads)  ### Issue description  I want to use the function Area3D.get_overlapping_bodies() to detect whether my Area3D is overlapping with a StaticBody3D I have in my scene. But when I run this function, I can only detect the RigidBody3Ds overlapping my Area3D, not the StaticBodies.  As we can see in the docs, this function should detect all PhysicsBody3Ds, so it should detect StaticBodies  https://docs.godotengine.org/en/stable/classes/class_area3d.html#class-area3d-method-get-overlapping-bodies.  I get this problem when running the project with Jolt Physics. But when I go back to DEFAULT, the StaticBody gets properly detected.  ### Steps to reproduce  Open the MRP  Check Debug > Visible Collision Shapes  Run the game in the 3D scene  use the left and right arrows to move the Area3D. Use spacebar to run get_overlapping_bodies(). The result gets printed. You can see that the StaticBody3D doesn't get detected.  There is also a 2D scene because I wanted to test if the bug happens in 2D but it doesn't since Jolt doesn't exist in 2D.  ### Minimal reproduction project (MRP)  [GodotBug_GetOverlappingBodies.zip](https://github.com/user-attachments/files/21090037/GodotBug_GetOverlappingBodies.zip) "
  },
  {
    "number": 108345,
    "title": "Unable to build Windows arm64 export template 4.5-beta2 / SDL3",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108345",
    "user": "graydoubt",
    "labels": [
      "bug",
      "topic:buildsystem"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T15:50:04Z",
    "updated_at": "2025-07-07T15:14:11Z",
    "closed_at": "2025-07-07T15:14:09Z",
    "milestone": "4.5",
    "is_pull_request": false,
    "body": "### Tested versions  - Godot 4.5-dev2 [`af2c71397`](https://github.com/godotengine/godot/commit/af2c713971499953373380b9ae8673f64423bd59) builds correctly - Godot 4.5-dev3 [`28089c40c`](https://github.com/godotengine/godot/commit/28089c40c13597bf908802c61352c6fffe0a4465) fails with `error: use of undeclared identifier 'ACCESSKIT_HAS_POPUP_TRUE';` - Godot 4.5-dev4 [`209a446e3`](https://github.com/godotengine/godot/commit/209a446e3657e6fd736b9b7589b94cbdaad2d854) fails with `error: use of undeclared identifier 'ACCESSKIT_HAS_POPUP_TRUE';` - Godot 4.5-dev5 [`64b09905c`](https://github.com/godotengine/godot/commit/64b09905c7b2877f8aef99d8b63e73e5d31acfb9) fails with `error: use of undeclared identifier 'ACCESSKIT_HAS_POPUP_TRUE';` - Godot 4.5-beta1 [`46c495ca2`](https://github.com/godotengine/godot/commit/46c495ca21f40f57a7fb9c7cde6143738f1652d4) builds correctly - Godot 4.5-beta2 [`e1b4101e3`](https://github.com/godotengine/godot/commit/e1b4101e3460dd9c6ba0b7f8d88e9751b8383f5b) fails with error: `error: use of undeclared identifier 'EINVAL'` - master [53be3b78d](https://github.com/godotengine/godot/commit/53be3b78d1634406f1fb29e3802c608a5f5104a1) fails with error: `error: use of undeclared identifier 'EINVAL'`   ### System information  Ubuntu 24.04.2 LTS (x86_64)  ### Issue description  I've built the container images using the [build-containers](https://github.com/godotengine/build-containers) and I'm compiling Godot with the [godot-build-scripts](https://github.com/godotengine/godot-build-scripts).   Since I'm only interested in Windows builds, I've modified the `build.sh` and commented out all other platforms. The x86-64/32 builds compile fine, but once it gets to arm64, it will fail with the following error:  ``` /root/llvm-mingw/bin/aarch64-w64-mingw32-clang -o thirdparty/sdl/joystick/hidapi/SDL_hidapi_rumble.windows.template_debug.arm64.llvm.o -c -std=gnu17 -ffp-contract=off -flto=thin -fcolor-diagnostics -O2 -w -DSDL_PLATFORM_PRIVATE -DDEBUG_ENABLED -DNDEBUG -DWINDOWS_ENABLED -DWASAPI_ENABLED -DWINMIDI_ENABLED -DWINVER=0x0A00 -D_WIN32_WINNT=0x0A00 -DACCESSKIT_ENABLED -DVULKAN_ENABLED -DRD_ENABLED -DSDL_ENABLED -DD3D12_ENABLED -DGLES3_ENABLED -DEGL_STATIC -DMINGW_ENABLED -DMINGW_HAS_SECURE_API=1 -DMINIZIP_ENABLED -DBROTLI_ENABLED -DTHREADS_ENABLED -DCLIPPER2_ENABLED -DZSTD_STATIC_LINKING_ONLY -DUSE_VOLK -DVK_USE_PLATFORM_WIN32_KHR -DDCOMP_ENABLED -DGLAD_ENABLED -DEGL_ENABLED -DSDL_PLATFORM_WINDOWS -Ithirdparty/sdl -Ithirdparty/sdl/include -Ithirdparty/sdl/include/build_config -Idrivers/sdl -I/root/accesskit/accesskit-c/include -Iplatform/windows -I. -isystem thirdparty/glad -isystem thirdparty/directx_headers/include/directx -isystem thirdparty/volk -isystem thirdparty/vulkan -isystem thirdparty/vulkan/include -isystem thirdparty/zstd -isystem thirdparty/zlib -isystem thirdparty/clipper2/include -isystem thirdparty/brotli/include -isystem thirdparty/angle/include -isystem thirdparty/d3d12ma thirdparty/sdl/joystick/hidapi/SDL_hidapi_rumble.c thirdparty/sdl/stdlib/SDL_malloc.c:5313:14: error: use of undeclared identifier 'EINVAL'  5313 |       return EINVAL;       |              ^ thirdparty/sdl/stdlib/SDL_malloc.c:5321:12: error: use of undeclared identifier 'ENOMEM'  5321 |     return ENOMEM;       |            ^ 2 errors generated. scons: *** [thirdparty/sdl/stdlib/SDL_malloc.windows.template_debug.arm64.llvm.o] Error 1 scons: building terminated because of errors. INFO: Time elapsed: 00:12:12.87 ```  I can work around it by editing the `SDL_malloc.c` and ensuring that `#include <errno.h>` is included. The quickest 'hack' was to just move the line down by one outside the `LACKS_ERROR_H` check:  <img width=\"968\" height=\"307\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/f544a356-307c-4c07-9428-8acd344ceccb\" />    ### Steps to reproduce  - Ensure [build-containers](https://github.com/godotengine/build-containers) are built for 4.5-f42. - `git clone https://github.com/graydoubt/godot-build-scripts.git` - `cd godot-build-scripts` - `git checkout windows-arm-only` - copy `config.sh.in` to `config.sh`, and set `IMAGE_VERSION='4.5-f42'` - `git clone https://github.com/godotengine/godot.git` - `cd godot` - switch to 4.5-beta2: `git checkout e1b4101e3` - `cd ..` - `./build.sh -v 4.5-beta2`    ### Minimal reproduction project (MRP)  The [windows-arm-only](https://github.com/graydoubt/godot-build-scripts/tree/windows-arm-only) branch of my godot-build-scripts fork disables unwanted platforms to reduce time to failure, and mounts the `godot` directory directly, rather than expecting an archive."
  },
  {
    "number": 108344,
    "title": "Fix argument order in GodotArea2Pair2D instantiation for broadphase pair",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108344",
    "user": "dillona",
    "labels": [
      "bug",
      "topic:physics",
      "topic:2d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T15:36:46Z",
    "updated_at": "2025-07-07T13:28:44Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "This PR fixes the argument order when instantiating `GodotArea2Pair2D` in the broadphase pair creation logic. Previously, the constructor was called with the area and subindex arguments swapped, which could lead to incorrect collision pairing and monitoring behavior between areas in 2D physics."
  },
  {
    "number": 108343,
    "title": "Fix collision solver to use correct motion parameters in static world boundary checks",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108343",
    "user": "dillona",
    "labels": [
      "bug",
      "topic:physics",
      "topic:2d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T15:10:10Z",
    "updated_at": "2025-07-07T13:28:25Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "This pull request fixes an issue in the 2D collision solver where the incorrect motion parameters were being used during static world boundary checks. Previously, when the `swap` flag was set, the solver would pass `p_motion_A` and `p_margin_A` to `solve_static_world_boundary`, even though the correct parameters should have been `p_motion_B` and `p_margin_B` to match the swapped shapes and transforms.    With this change, the collision solver now consistently uses the correct motion and margin parameters for each shape, ensuring accurate collision detection and resolution when interacting with static world boundaries."
  },
  {
    "number": 108342,
    "title": "Automatically open newly created script",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108342",
    "user": "KoBeWi",
    "labels": [
      "enhancement",
      "topic:editor",
      "usability"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T15:00:17Z",
    "updated_at": "2025-07-06T15:00:18Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "  https://github.com/user-attachments/assets/ccffaf81-ef31-4da7-bfd6-71b7f2fd176f    It's especially useful when you create a script inside a folded directory; you no longer need to search for it to open.    We do it already with other resources."
  },
  {
    "number": 108341,
    "title": "Correct raycast closest hit calculation by subtracting ray origin",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108341",
    "user": "dillona",
    "labels": [
      "bug",
      "topic:physics",
      "topic:2d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T14:16:12Z",
    "updated_at": "2025-07-07T13:28:04Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "This PR corrects the calculation of the closest hit point in the 2D raycast implementation of Godot Physics. Previously, the distance was computed using the dot product of the normal and the transformed shape point, which did not account for the ray's origin. This could result in incorrect hit distances, especially when the ray did not start at the origin."
  },
  {
    "number": 108340,
    "title": "Remove empty constructors and destructors from `core/`",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108340",
    "user": "KoBeWi",
    "labels": [
      "enhancement",
      "topic:codestyle"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [],
    "created_at": "2025-07-06T13:58:36Z",
    "updated_at": "2025-07-06T14:53:46Z",
    "closed_at": null,
    "milestone": "4.6",
    "is_pull_request": true,
    "body": "Follow-up to #106124"
  },
  {
    "number": 108339,
    "title": "Expose `Image::get_format_name`",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108339",
    "user": "Geometror",
    "labels": [
      "enhancement",
      "topic:core",
      "topic:gdscript"
    ],
    "assignee": "",
    "comments_count": 4,
    "comments": [],
    "created_at": "2025-07-06T13:57:12Z",
    "updated_at": "2025-07-07T14:57:53Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "There is currently no way to get the name of an image format, which is rather important for helpful warning/error messages in non-game applications and add-ons. `<Enum>.keys()[idx]` just works for user defined enums.    Example usage:  ```GDScript  #...  print(\"Image format \", Image.get_format_name(img.get_format()), \" not supported, converting to \", Image.get_format_name(Image.FORMAT_RGB8))  # Output: Image format RGBAHalf not supported, converting to RGB8  ```"
  },
  {
    "number": 108338,
    "title": "ConcavePolygonShape2D segments array cannot be properly edited in Inspector",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108338",
    "user": "bingtang0629",
    "labels": [
      "bug",
      "topic:editor",
      "usability",
      "topic:2d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T13:01:18Z",
    "updated_at": "2025-07-07T14:39:55Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  4.4.1  ### System information  Godot v4.4.1.stable - Windows 11 (build 26100) - Multi-window, 1 monitor - Vulkan (Mobile) - integrated Intel(R) Iris(R) Xe Graphics - 13th Gen Intel(R) Core(TM) i5-1334U (12 threads)  ### Issue description  The Inspector doesn't allow valid editing of ConcavePolygonShape2D's `segments` property (PackedVector2Array). When attempting to add Vector2 points individually through the Inspector interface, it immediately causes errors because segments require **pairs of points** to form valid line segments. The current UI forces invalid single-point additions.  ### Steps to reproduce  1. Create a ConcavePolygonShape2D resource 2. In Inspector, locate the `segments` property under \"Data\" 3. Attempt to add any number of Vector2 points using the array \"+\" button 4. Observe error: `Condition \"len & 2\" is true` in Output  ### Minimal reproduction project (MRP)  N/A"
  },
  {
    "number": 108337,
    "title": "DAP: Cast request's `seq` value to int",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108337",
    "user": "fstxz",
    "labels": [
      "enhancement",
      "topic:gdscript",
      "topic:editor",
      "regression"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T11:34:15Z",
    "updated_at": "2025-07-07T14:32:31Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "Closes #108288 "
  },
  {
    "number": 108336,
    "title": "Fix and improve auto-translation for `FindInFiles`",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108336",
    "user": "arkology",
    "labels": [
      "bug",
      "enhancement",
      "topic:editor"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T10:38:23Z",
    "updated_at": "2025-07-06T12:10:05Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Handles everything related to `FindInFiles` dialog and panel.    Initially, I found a bug when searched text (`_search_text_label`) was auto-translated when the translation was changed.  But since it was enough to change only one line to fix the bug, I decided to make the entire file at once so as not to return to this \"topic\" twice.  So this could be labeled as a bugfix and an enhancement."
  },
  {
    "number": 108335,
    "title": "SpinBox: Add a property to set whether `custom_arrow_step` rounds value",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108335",
    "user": "beicause",
    "labels": [
      "enhancement",
      "topic:gui"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T10:22:05Z",
    "updated_at": "2025-07-07T13:44:58Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "Adds a property to set whether `custom_arrow_step` rounds value, to restore the behavior in 4.3. It is useful to avoid breadking original value when clicking the arrow.    Builds on top of #108196 to avoid conflicts.  "
  },
  {
    "number": 108334,
    "title": "When folder is renamed the use_external and save_to_file paths in import files are not updated ",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108334",
    "user": "Nodragem",
    "labels": [
      "discussion",
      "topic:editor",
      "topic:import"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T09:54:04Z",
    "updated_at": "2025-07-07T14:39:38Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  4.4.1  ### System information  Godot v4.4.1.stable - Windows 11 (build 26100) - Multi-window, 1 monitor - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 2060 (NVIDIA; 32.0.15.6119) - Intel(R) Core(TM) i7-10750H CPU @ 2.60GHz (12 threads)  ### Issue description  Examples of resource paths (e.g. `use_external`, `save_to_file`) not being changed after I renamed a folder in Godot Editor: <img width=\"611\" height=\"578\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/91e20c4d-0de3-4c24-9287-44a7ecb198aa\" />  Examples of resource paths (e.g. `use_external`, `save_to_file`)  not being changed after I moved two folders out of their parent folder in Godot Editor: <img width=\"696\" height=\"820\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0244d097-0b02-41fe-8540-e621d8c76185\" />  There might also be some issues with normal maps (e.g. `scr_normal`), not sure.  ### Steps to reproduce  Change folder name in the godot file editor after using `Material`>`use external` or Animation>`save to file` in the advanced import editor.  ### Minimal reproduction project (MRP)  Default Project."
  },
  {
    "number": 108333,
    "title": "Saving Bone Transforms when AnimationTree is active is polluting Version Control",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108333",
    "user": "Nodragem",
    "labels": [
      "discussion",
      "topic:editor",
      "documentation",
      "topic:animation",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [
      {
        "user": "precup",
        "created_at": "2025-07-06T15:17:40Z",
        "body": "This is already an available option. In order to prevent this, you need to add a RESET animation, as noted in the [reset_on_save property of AnimationMixer](https://docs.godotengine.org/en/stable/classes/class_animationmixer.html#class-animationmixer-property-reset-on-save)."
      },
      {
        "user": "AThousandShips",
        "created_at": "2025-07-07T14:33:10Z",
        "body": "This does indeed look by design, you are changing the values, so they should be saved, and as suggested above the solution is to use reset on save to ensure a clean state"
      }
    ],
    "created_at": "2025-07-06T09:42:48Z",
    "updated_at": "2025-07-07T14:33:10Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  4.4.1  ### System information  Godot v4.4.1.stable - Windows 11 (build 26100) - Multi-window, 1 monitor - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 2060 (NVIDIA; 32.0.15.6119) - Intel(R) Core(TM) i7-10750H CPU @ 2.60GHz (12 threads)  ### Issue description  I am using Git/Github to version control my project, and I have many enemies/characters that use an AnimationTree.  When they are active, AnimationTree  will run the current animation of the characters in the editor. The problem is that when we save the scenes / all scenes, Godot will also save the change in Bone Transformation for these characters. Hence, even when I just change a small thing in my scene, I end up commiting (or having to discard manually) these polluting, unnecessary changes to Bone transformations, like here:  <img width=\"808\" height=\"644\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/e3f4f547-82ac-4cf0-8882-8cd537987405\" />  ### Steps to reproduce  You can use any character setup wih an AnimationTree.  I would suggest to not save the bone transformations when they are controlled by a AnimationTree. Or to temporarily reset the animations when saving.  ### Minimal reproduction project (MRP)  Default project."
  },
  {
    "number": 108332,
    "title": "Fix remaining physics and navigation disabling issues.",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108332",
    "user": "WhalesState",
    "labels": [
      "bug",
      "topic:buildsystem"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T09:27:10Z",
    "updated_at": "2025-07-06T09:37:46Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Fix World3D continues errors when Navigation3D is disabled.    Fix SceneDebugger disabling physics 2d instead of 3d which causes build to fail.    Move unused variables inside PHYSICS_3D_DISABLED to avoid warnings while building.    Fix Gridmap errors when initializing physics_material while 3d physics is disabled."
  },
  {
    "number": 108331,
    "title": "ColorPicker puts values into wrong places in code",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108331",
    "user": "OlegVegan",
    "labels": [
      "bug",
      "topic:editor",
      "regression"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [
      {
        "user": "precup",
        "created_at": "2025-07-06T15:33:53Z",
        "body": "How reliably are you able to reproduce this? I'm unable to reproduce this on a very similar system by attempting to copy the steps in the video.  > Godot v4.5-beta2 (e1b4101e3) - Windows 10 (build 19045) - Multi-window, 3 monitors - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 2080 Ti (NVIDIA; 31.0.15.3713) - AMD Ryzen 9 3900X 12-Core Processor (24 threads) - 31.94 GiB memory"
      },
      {
        "user": "OlegVegan",
        "created_at": "2025-07-08T14:28:10Z",
        "body": "> How reliably are you able to reproduce this? I'm unable to reproduce this on a very similar system by attempting to copy the steps in the video.  Before filing the report, I tried the same actions for about 5 times, to make sure it's bugged. I tried it again right now, and managed to get it 1 time into the testing testing (at 0:44)  https://github.com/user-attachments/assets/5425f38c-e691-4e47-aa25-406bd00bab3a"
      },
      {
        "user": "OlegVegan",
        "created_at": "2025-07-08T14:36:21Z",
        "body": "Here's another test, also takes about a minute to get it for me (at 0:50)  https://github.com/user-attachments/assets/402d6cd2-dba7-407d-a008-97b72a78c218"
      }
    ],
    "created_at": "2025-07-06T08:33:48Z",
    "updated_at": "2025-07-08T14:36:21Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": false,
    "body": "### Tested versions  - NOT reproducible in 4.4.1 Stable - reproducible in 4.5 beta2  ### System information  Godot v4.5.beta2 - Windows 10 (build 19045) - Multi-window, 2 monitors - Vulkan (Forward+) - dedicated NVIDIA GeForce GTX 1660 SUPER (NVIDIA; 32.0.15.6614) - AMD Ryzen 9 3900X 12-Core Processor (24 threads) - 47.92 GiB memory  ### Issue description  https://github.com/user-attachments/assets/327e73e8-8723-44e4-9c8a-90058abdf449  If you use the new color picker preview icon to pick a color, it places values into wrong places   ### Steps to reproduce  1. Have an Array of Colors (you can use this code used in the MRP)  `const sky_colors = [ \t[Color(0.263, 0.518, 0.878), Color(0.502, 0.651, 1.0)], \t[Color(0.004, 0.451, 0.831), Color(0.545, 0.804, 0.937)], \t[Color(0.086, 0.63, 0.998, 1.0), Color(0.996, 0.847, 0.776, 1.0)], \t[Color(0.0, 0.567, 0.978, 1.0), Color(0.808, 0.882, 0.945)], ]`  2. Click on the color preview square thing and change the color  ### Minimal reproduction project (MRP)  [bugreport_MRP.zip](https://github.com/user-attachments/files/21087381/bugreport_MRP.zip)"
  },
  {
    "number": 108330,
    "title": "Remove result button for files is not functional in `FindInFilesPanel` in replace mode",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108330",
    "user": "arkology",
    "labels": [
      "bug",
      "topic:editor",
      "confirmed",
      "regression"
    ],
    "assignee": "",
    "comments_count": 7,
    "comments": [
      {
        "user": "CreatedBySeb",
        "created_at": "2025-07-06T17:00:08Z",
        "body": "Able to partially replicate on `v4.4.1.stable.official [49a5bc7b6]` - the hover effect and tooltip are not present in Replace but are in Find, however clicking the button is still working for me in the Replace pane. Also able to replicate on ` v4.5.beta.custom_build [53be3b78d]` (latest master) but there the close button doesn't work in the Replace pane indicating a regression beyond the bug present in v4.4.1 stable.  ``` Godot v4.4.1.stable - Pop!_OS 22.04 LTS on X11 - X11 display driver, Multi-window, 2 monitors - Vulkan (Mobile) - dedicated NVIDIA GeForce RTX 3060 (nvidia; 575.57.08) - AMD Ryzen 7 3700X 8-Core Processor (16 threads) ```"
      },
      {
        "user": "CreatedBySeb",
        "created_at": "2025-07-06T17:03:59Z",
        "body": "For team assessment: I'd consider specifically the further issue in `4.5` a Release Blocker since it impairs use of `Replace in Files...` by losing the ability to exclude results. The original bug present in `4.4.1` may not be considered a release blocker since it is inconvenient but doesn't prevent usage, and isn't a regression from stable."
      },
      {
        "user": "CreatedBySeb",
        "created_at": "2025-07-06T17:12:52Z",
        "body": "Reproducible in `v4.5.beta1.official [46c495ca2]` and  `v4.5.dev2.official [af2c71397]`, but not `v4.5.dev1.official [97241ffea]`, will try to bisect between these commits."
      },
      {
        "user": "Rudolph-B",
        "created_at": "2025-07-06T17:13:19Z",
        "body": "I am able to replicate on v4.5.beta2 as well  > Godot v4.5.beta2 - Ubuntu 24.04.2 LTS 24.04 on X11 - X11 display driver, Multi-window, 2 monitors - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 2070 SUPER (nvidia; 575.64.03) - AMD Ryzen 7 3700X 8-Core Processor (16 threads) - 14.81 GiB memory"
      },
      {
        "user": "CreatedBySeb",
        "created_at": "2025-07-06T18:43:34Z",
        "body": "From commit log scanning while the bisect builds run, I spotted https://github.com/godotengine/godot/commit/146fa48a4ad2f64d62b9eddac7e9dcb991d64b85 from between the good and bad releases which looks like a possible culprit. My hypothesis is that if the original hover issue is from an issue with the button layout/detection, this change to avoid events in invalid conditions could have prevented the event from being sent since the button was bugged. The answer here then would probably be not to remove this commit but to fix the button to avoid both bugs. Will have confirmation once bisect is done."
      },
      {
        "user": "CreatedBySeb",
        "created_at": "2025-07-07T17:59:45Z",
        "body": "Bisect confirmed that the culprit is https://github.com/godotengine/godot/commit/146fa48a4ad2f64d62b9eddac7e9dcb991d64b85 like I guessed - we will need to look at fixing this button to fix the regression, which should also solve the bug from 4.4. I'm not sure what would cause the button to have invalid dimensions, but it should be doable to look into. (Not sure why these compiles took so long, I don't remember this much of an issue on my last bisect, will need to look into it)"
      },
      {
        "user": "CreatedBySeb",
        "created_at": "2025-07-07T20:36:51Z",
        "body": "Localised the issue to these sections:  https://github.com/godotengine/godot/blob/4d1f26e1fd1fa46f2223fe0b6ac300744bf79b88/editor/script/find_in_files.cpp#L788  https://github.com/godotengine/godot/blob/4d1f26e1fd1fa46f2223fe0b6ac300744bf79b88/editor/script/find_in_files.cpp#L858-L873  Since column 0 is set to not expand (presumably because of the checkboxes), it seems to cause this issue with the button being out of bounds. If I shift `int text_index = _with_replace ? 1 : 0;` up before the if statement and use it in place of `0` to have the text + button in column 1, then it fixes the issue. This isn't an ideal solution though as it makes it look different to the Find pane, so I'll figure something else out.  Also - I am not sure what is the purpose of the checkboxes when the X buttons serve a similar purpose? I'm not quite sure I understand the benefit of them"
      }
    ],
    "created_at": "2025-07-06T08:22:05Z",
    "updated_at": "2025-07-07T20:45:53Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  4.5 beta 2 4.4.1 stable  ### System information  Godot v4.5.beta2 - Windows 10 (build 19045) - Single-window, 1 monitor - OpenGL 3 (Compatibility) - NVIDIA GeForce RTX 3070 (NVIDIA; 32.0.15.6614) - AMD Ryzen 5 5600X 6-Core Processor (12 threads) - 31.94 GiB memory  ### Issue description  In find mode everything works fine:  https://github.com/user-attachments/assets/9f33458d-889e-493b-8cf9-27b808942124  In replace mode - no tooltip, no hover state and nothing happens on remove button press:  https://github.com/user-attachments/assets/87c85dd7-fcb6-4907-b170-a467104f9fa0  ### Steps to reproduce  Open find in files dialog, write something into find field and press `Replace...`. Try to hover and press `Remove result` button for file result. Nothing will happen.  ### Minimal reproduction project (MRP)  N/A"
  },
  {
    "number": 108329,
    "title": "Android: Fix the EOF detection logic",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108329",
    "user": "m4gr3d",
    "labels": [
      "bug",
      "platform:android",
      "topic:input",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-06T08:15:48Z",
    "updated_at": "2025-07-07T11:09:45Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "The current logic was causing file loading to omit the last character because the EOF flag was triggered too early.    This was mostly unnoticed because most files loaded by the editor terminate with a newline character. The issue can be reproduced however by attempting to load [@passivestar's minimal theme](https://github.com/passivestar/godot-minimal-theme) in the Android editor.  The minimal theme config file does not terminate with a newline character, and so attempting to load it in the current version of the editor (4.5 beta 2 and earlier) fails because the last `)` character is omitted.    This PR fixes that issue.  Following the Java documentation, the EOF flag is now only set when a `read()` operation returns `-1`.    <!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  "
  },
  {
    "number": 108328,
    "title": "Fix ColorPicker linear mode sliders color",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108328",
    "user": "beicause",
    "labels": [
      "bug",
      "topic:gui"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T05:23:34Z",
    "updated_at": "2025-07-06T05:25:53Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "`color_normalized` is already srgb, it incorrectly does a linear to srgb conversion.    Before:  ![屏幕截图_20250706_131024](https://github.com/user-attachments/assets/1b04078a-467f-4f20-98db-00f61d7e8b30)    After:  ![屏幕截图_20250706_131109](https://github.com/user-attachments/assets/aa63b849-5016-4ab7-8ce1-a47794c0dcfe)  "
  },
  {
    "number": 108327,
    "title": "Fix: Reset simplify_with_attrib_func in uninitialize_meshoptimizer_module",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108327",
    "user": "dillona",
    "labels": [
      "bug",
      "topic:import",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T04:38:34Z",
    "updated_at": "2025-07-06T08:45:37Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "This pull request addresses a bug in the `meshoptimizer` module where the `uninitialize_meshoptimizer_module` function did not clear all function pointers set during initialization. Specifically, the `SurfaceTool::simplify_with_attrib_func` was not being reset to `nullptr`, which could lead to a dangling pointer when the module is uninitialized.     "
  },
  {
    "number": 108326,
    "title": "Fix alignment calculation for camera rays buffer in RaycastOcclusionCull",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108326",
    "user": "dillona",
    "labels": [
      "bug",
      "topic:rendering",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T04:03:12Z",
    "updated_at": "2025-07-06T08:46:01Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "This PR fixes a bug in the pointer alignment logic within the raycast-based occlusion culling system.                                                                                                       The formula used in RaycastOcclusionCull::RaycastHZBuffer::resize to ensure the camera_rays buffer was 64-byte aligned was flawed. If the memory allocated for the buffer was already aligned, the        calculation would incorrectly add a 64-byte offset to the pointer. This caused the first 64 bytes of the buffer to be skipped, which is wasteful and incorrect.                                             The change corrects the pointer arithmetic to properly calculate the required alignment offset, which will be zero if the buffer is already aligned. This ensures the buffer is always correctly          positioned at the first available aligned address within the allocated memory block.                                                                                                                    "
  },
  {
    "number": 108325,
    "title": "Enabling `rendering/viewport/hdr_2d` affects editor ui colors (in `Forward+`)",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108325",
    "user": "cofeek-codes",
    "labels": [
      "archived",
      "discussion",
      "topic:rendering",
      "topic:editor",
      "topic:2d"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [
      {
        "user": "clayjohn",
        "created_at": "2025-07-06T08:50:43Z",
        "body": "This is due to HDR2D forcing the engine to render in linear color space which affects the blending of transparent objects.   The difference in colours is expected and is a natural consequence of using HDR2D"
      },
      {
        "user": "Calinou",
        "created_at": "2025-07-07T20:52:03Z",
        "body": "Thanks for the report! Consolidating in https://github.com/godotengine/godot/issues/80868, as this is due to the same cause."
      }
    ],
    "created_at": "2025-07-06T02:31:56Z",
    "updated_at": "2025-07-07T20:52:35Z",
    "closed_at": "2025-07-07T20:52:03Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Reproducible in v4.4.1.stable.official [49a5bc7b6]  ### System information  Godot v4.4.1.stable - Windows 10 (build 19045) - Multi-window, 2 monitors - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 3050 (NVIDIA; 32.0.15.7688) - AMD Ryzen 5 5600G with Radeon Graphics (12 threads)  ### Issue description  After enabling `rendering/viewport/hdr_2d` in project settings color of the editor interface changes (it becomes brighter), when disabled it comes back to normal  https://github.com/user-attachments/assets/e39bce3c-f7d5-4694-a119-fdbdc30f565f  ### Steps to reproduce  1) Create empty Forward+ project 2) Go to Project Settings > Rendering > Viewport > HDR 2D 3) Toggle it and see how editor interface changes  ### Minimal reproduction project (MRP)  N/A, any empty Forward+ project"
  },
  {
    "number": 108324,
    "title": "Add instructions for using `ViewportTexture`",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108324",
    "user": "Rindbee",
    "labels": [
      "enhancement",
      "documentation"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-06T00:56:39Z",
    "updated_at": "2025-07-06T11:13:24Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "<!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  Clarify the conditions that need to be met when using `ViewportTexture`.    Close #108286."
  },
  {
    "number": 108323,
    "title": "Add Stack class for LIFO data structure operations",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108323",
    "user": "WebLDix",
    "labels": [
      "feature proposal",
      "archived",
      "topic:core"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-05T23:27:21Z",
    "updated_at": "2025-07-06T09:01:36Z",
    "closed_at": "2025-07-06T08:03:26Z",
    "milestone": "",
    "is_pull_request": true,
    "body": "Adds a new Stack class that provides Last-In-First-Out (LIFO) data structure functionality to Godot, eliminating the need for developers to manually implement stack operations using Array.    ## Problem Solved  - Developers frequently need to manually implement stack functionality using Array, leading to code duplication and potential errors  - Lack of semantically clear stack operation APIs  - No unified stack implementation standard, with every project \"reinventing the wheel\"    ## What this PR does  - Implements a Stack class inheriting from RefCounted  - Provides standard stack operations: push, pop, peek  - Includes utility methods: is_empty, size, clear, to_array  - Exposes all methods to GDScript through ClassDB bindings  - Includes proper error handling for empty stack operations  - Registers the Stack class in core types for engine integration    ## Use cases  - Game state management (undo/redo systems)  - Algorithm implementations requiring LIFO behavior  - Call stack simulation  - Backtracking algorithms  - Any scenario requiring stack data structure without manually implementing it with Array    ## Implementation details  - Uses Godot's Array as underlying storage for guaranteed performance  - Follows Godot's coding conventions and error handling patterns  - All methods are bound for GDScript access  - Includes _to_string() for debugging support  - Properly registered in register_core_types.cpp    ## Testing  - [x] Compiles without errors  - [x] Basic functionality tested (push/pop/peek)  - [x] Error handling for empty stack operations  - [x] Class registration verified    Say goodbye to the era of reinventing stack wheels with Array!"
  },
  {
    "number": 108322,
    "title": "Change `PROPERTY_HINT_GROUP_ENABLE` behavior to read_only",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108322",
    "user": "lodetrick",
    "labels": [
      "enhancement",
      "discussion",
      "topic:editor"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-05T23:13:15Z",
    "updated_at": "2025-07-07T18:35:04Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "This PR follows from the discussion on #108257.    Currently, when Inspector Sections are toggled off, they hide all their children in order to convey that these children have no impact on the current state of the object. However, there is another way to convey this, which is by making all the children `read_only`. This has the benefit of not hiding child properties, while also showing that it makes no sense to edit them.    This PR is meant to be a test of the `read_only` approach, and if it has support, to replace the current method.    TODO:  - [ ] Have the read_only change affect more classes  - [ ] Find a way to deal with external changes to the properties (ideally avoiding an `update_tree()` call each time it is ticked)  Edit: I looked into it more and believe that calling `update_tree` every time something checks that mark is the only \"proper\" way to do it at the moment, without more sophisticated methods of dealing with read_only"
  },
  {
    "number": 108321,
    "title": "[4.3] Fix MSVC warning for potential mod by 0 (C4724)",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108321",
    "user": "aaronfranke",
    "labels": [
      "topic:editor",
      "topic:codestyle",
      "cherrypick:4.2"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-05T22:34:53Z",
    "updated_at": "2025-07-05T22:34:53Z",
    "closed_at": null,
    "milestone": "4.3",
    "is_pull_request": true,
    "body": "Manual backport of PR #106634 to the Godot 4.3 branch because the code is different and there were conflicts."
  },
  {
    "number": 108320,
    "title": "GLTF: Move accessor and buffer view Dictionary conversion into those classes",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108320",
    "user": "aaronfranke",
    "labels": [
      "enhancement",
      "topic:import",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-05T22:32:42Z",
    "updated_at": "2025-07-08T08:39:53Z",
    "closed_at": null,
    "milestone": "4.6",
    "is_pull_request": true,
    "body": "This PR moves the logic currently in GLTFDocument for converting GLTFAccessor to/from Dictionary, and converting GLTFBufferView to/from Dictionary, into those respective classes, and exposes it.    I also renamed some variables for clarity (ex: `si` -> `sparse_indices_dict`), and removed some error checks that will never be true (`!d.has(\"buffer\")` can't happen after `d[\"buffer\"] = ...`), but otherwise it is mostly a trivial move, it has the same logic as the existing code.    Note that `_get_accessor_type_from_str` and `_get_accessor_type_name` are duplicated code since their counterparts are still in GLTFDocument for now, but this will be cleaned up later when the rest of the logic is moved into GLTFAccessor.    This is part of a refactor to allow using glTF accessors and buffer views from extensions (or just generally outside of GLTFDocument)."
  },
  {
    "number": 108319,
    "title": "Debug window scaling not behaving as expected when set to - mode = viewport, aspect = expand",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108319",
    "user": "parmezan38",
    "labels": [
      "archived"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [
      {
        "user": "precup",
        "created_at": "2025-07-06T02:13:18Z",
        "body": "This looks like it could be a duplicate of #102334."
      }
    ],
    "created_at": "2025-07-05T22:06:38Z",
    "updated_at": "2025-07-06T09:05:38Z",
    "closed_at": "2025-07-06T09:05:31Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in v4.4.1 and v4.5-beta2  ### System information  Godot v4.4.1 - Windows 10 (build 19045) - Multi-window, 2 monitors - OpenGL 3 (Compatibility) - NVIDIA GeForce RTX 3060 (NVIDIA; 32.0.15.6094) - AMD Ryzen 7 1700 Eight-Core Processor (16 threads) - 15.92 GiB memory  ### Issue description  When setting the Stretch Mode to viewport and Stretch Aspect to expand in the Display Project Settings, the Debug window does not behave as expected. It does not render anything outside the blue lines in the scene, no matter the settings. In the documentation: [https://docs.godotengine.org/en/stable/tutorials/rendering/multiple_resolutions.html]() it says: \"In the animations below, you will notice gray and black areas. The black areas are added by the engine and cannot be drawn into. The gray areas are part of your scene, and can be drawn to. The gray areas correspond to the region outside the blue frame you see in the 2D editor.\" Here are the screenshots of the Debug window and how it looks in the Scene: <img width=\"1159\" height=\"727\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/a7c36c76-3d17-4243-ae34-f564a5559f97\" /> <img width=\"1295\" height=\"883\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/94a1f1c7-1d90-4aa2-931e-286c7c0928a4\" /> Here are my settings: <img width=\"942\" height=\"626\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/9636bc1d-b56a-4a74-afc2-42725f92a1cd\" />    ### Steps to reproduce  - Create an empty scene - Add 2D Node - Add any sprites outside the boundaries of the blue lines - Go to Project > Settings > Display > Window and change the Stretch Mode to viewport and Aspect to expand - Run the Project  ### Minimal reproduction project (MRP)  [debug-window-issue.zip](https://github.com/user-attachments/files/21081744/debug-window-issue.zip)"
  },
  {
    "number": 108318,
    "title": "Fix ViewportTexture not properly loading on scene reload.",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108318",
    "user": "zedzee37",
    "labels": [
      "bug",
      "topic:core",
      "cherrypick:4.3",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-05T19:20:06Z",
    "updated_at": "2025-07-06T08:51:33Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "<!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  Related issue: #108286   I am sorry if I have done anything wrong! I am very new to this.    * *Bugsquad edit, fixes: #108286*"
  },
  {
    "number": 108317,
    "title": "RAW Hazard Validation Error in FastNoiseLite",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108317",
    "user": "darksylinc",
    "labels": [
      "bug",
      "topic:core"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [
      {
        "user": "darksylinc",
        "created_at": "2025-07-05T18:09:31Z",
        "body": "This issue may be related with [this bug](https://github.com/godotengine/godot/pull/108127#issuecomment-3020517626) that is preventing my PR from getting merged (I discovered this bug while investigating mine; and mine appears to come from a data hazard as well).  **Update:** It's unrelated."
      }
    ],
    "created_at": "2025-07-05T18:07:23Z",
    "updated_at": "2025-07-07T15:03:33Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - master  ### System information  Godot v4.5.beta (c89f5cd7d) - Ubuntu 24.04.2 LTS 24.04 on X11 - X11 display driver, Multi-window, 2 monitors - Vulkan (Mobile) - dedicated AMD Radeon RX 6800 XT (RADV NAVI21) - AMD Ryzen 9 5900X 12-Core Processor (24 threads) - 31.26 GiB memory  ### Issue description  Using FastNoiseLite may result in visible glitchy artifacts on screen. The validation is correct that there is a Read after Write (RAW) hazard.  ### Steps to reproduce  1. Turn on Vulkan Layer Hazard validation in vkconfig 2. Open MRP with `--gpu-validation` 3. Go to WorldEnvironment 4. Go to Environment -> Sky -> ShaderMaterial -> Shader Parameters 5. From there Clouds Sampler -> Noise -> FastNoiseLite 6. Change the Noise type from Simplex to Simplex Smooth back and forth (see attached picture on where to go to, much easier to see it there).  ``` SYNC-HAZARD-READ-AFTER-WRITE(ERROR / SPEC): msgNum: -455515022 - Validation Error: [ SYNC-HAZARD-READ-AFTER-WRITE ] Object 0: handle = 0x483d000000483d, name = RID:1008093248888260 View, type = VK_OBJECT_TYPE_IMAGE_VIEW; | MessageID = 0xe4d96472 | vkCmdDraw: Hazard READ_AFTER_WRITE for VkImageView 0x483d000000483d[RID:1008093248888260 View], in VkCommandBuffer 0x59b846314e50[], and VkPipeline 0x420b000000420b[RID:996733060382780], VkDescriptorSet 0x483e000000483e[RID:1008101838815309], type: VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, imageLayout: VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, binding #1, index 0. Access info (usage: SYNC_FRAGMENT_SHADER_SHADER_SAMPLED_READ, prior_usage: SYNC_IMAGE_LAYOUT_TRANSITION, write_barriers: SYNC_VERTEX_SHADER_UNIFORM_READ|SYNC_FRAGMENT_SHADER_COLOR_ATTACHMENT_READ|SYNC_FRAGMENT_SHADER_DEPTH_STENCIL_ATTACHMENT_READ|SYNC_FRAGMENT_SHADER_INPUT_ATTACHMENT_READ|SYNC_FRAGMENT_SHADER_UNIFORM_READ|SYNC_EARLY_FRAGMENT_TESTS_DEPTH_STENCIL_ATTACHMENT_READ|SYNC_EARLY_FRAGMENT_TESTS_DEPTH_STENCIL_ATTACHMENT_WRITE|SYNC_LATE_FRAGMENT_TESTS_DEPTH_STENCIL_ATTACHMENT_READ|SYNC_LATE_FRAGMENT_TESTS_DEPTH_STENCIL_ATTACHMENT_WRITE|SYNC_COLOR_ATTACHMENT_OUTPUT_COLOR_ATTACHMENT_READ|SYNC_COLOR_ATTACHMENT_OUTPUT_COLOR_ATTACHMENT_WRITE|SYNC_COMPUTE_SHADER_UNIFORM_READ|SYNC_COPY_TRANSFER_WRITE|SYNC_RESOLVE_TRANSFER_WRITE|SYNC_BLIT_TRANSFER_WRITE|SYNC_CLEAR_TRANSFER_WRITE|SYNC_SUBPASS_SHADER_HUAWEI_INPUT_ATTACHMENT_READ, command: vkCmdPipelineBarrier, seq_no: 1, reset_no: 198).     Objects: 1         [0] 0x483d000000483d, type: 14, name: RID:1008093248888260 View ERROR: VALIDATION - Message Id Number: -455515022 | Message Id Name: SYNC-HAZARD-READ-AFTER-WRITE \tValidation Error: [ SYNC-HAZARD-READ-AFTER-WRITE ] Object 0: handle = 0x483d000000483d, name = RID:1008093248888260 View, type = VK_OBJECT_TYPE_IMAGE_VIEW; | MessageID = 0xe4d96472 | vkCmdDraw: Hazard READ_AFTER_WRITE for VkImageView 0x483d000000483d[RID:1008093248888260 View], in VkCommandBuffer 0x59b846314e50[], and VkPipeline 0x420b000000420b[RID:996733060382780], VkDescriptorSet 0x483e000000483e[RID:1008101838815309], type: VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, imageLayout: VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, binding #1, index 0. Access info (usage: SYNC_FRAGMENT_SHADER_SHADER_SAMPLED_READ, prior_usage: SYNC_IMAGE_LAYOUT_TRANSITION, write_barriers: SYNC_VERTEX_SHADER_UNIFORM_READ|SYNC_FRAGMENT_SHADER_COLOR_ATTACHMENT_READ|SYNC_FRAGMENT_SHADER_DEPTH_STENCIL_ATTACHMENT_READ|SYNC_FRAGMENT_SHADER_INPUT_ATTACHMENT_READ|SYNC_FRAGMENT_SHADER_UNIFORM_READ|SYNC_EARLY_FRAGMENT_TESTS_DEPTH_STENCIL_ATTACHMENT_READ|SYNC_EARLY_FRAGMENT_TESTS_DEPTH_STENCIL_ATTACHMENT_WRITE|SYNC_LATE_FRAGMENT_TESTS_DEPTH_STENCIL_ATTACHMENT_READ|SYNC_LATE_FRAGMENT_TESTS_DEPTH_STENCIL_ATTACHMENT_WRITE|SYNC_COLOR_ATTACHMENT_OUTPUT_COLOR_ATTACHMENT_READ|SYNC_COLOR_ATTACHMENT_OUTPUT_COLOR_ATTACHMENT_WRITE|SYNC_COMPUTE_SHADER_UNIFORM_READ|SYNC_COPY_TRANSFER_WRITE|SYNC_RESOLVE_TRANSFER_WRITE|SYNC_BLIT_TRANSFER_WRITE|SYNC_CLEAR_TRANSFER_WRITE|SYNC_SUBPASS_SHADER_HUAWEI_INPUT_ATTACHMENT_READ, command: vkCmdPipelineBarrier, seq_no: 1, reset_no: 198). \tObjects - 1 \t\tObject[0] - VK_OBJECT_TYPE_IMAGE_VIEW, Handle 20333268532480061, Name \"RID:1008093248888260 View\"    at: _debug_messenger_callback (drivers/vulkan/rendering_context_driver_vulkan.cpp:642) SYNC-HAZARD-READ-AFTER-WRITE(ERROR / SPEC): msgNum: -455515022 - Validation Error: [ SYNC-HAZARD-READ-AFTER-WRITE ] Object 0: handle = 0x483d000000483d, name = RID:1008093248888260 View, type = VK_OBJECT_TYPE_IMAGE_VIEW; | MessageID = 0xe4d96472 | vkCmdDraw: Hazard READ_AFTER_WRITE for VkImageView 0x483d000000483d[RID:1008093248888260 View], in VkCommandBuffer 0x59b846314e50[], and VkPipeline 0x420b000000420b[RID:996733060382780], VkDescriptorSet 0x483e000000483e[RID:1008101838815309], type: VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, imageLayout: VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, binding #1, index 0. Access info (usage: SYNC_FRAGMENT_SHADER_SHADER_SAMPLED_READ, prior_usage: SYNC_IMAGE_LAYOUT_TRANSITION, write_barriers: SYNC_VERTEX_SHADER_UNIFORM_READ|SYNC_FRAGMENT_SHADER_COLOR_ATTACHMENT_READ|SYNC_FRAGMENT_SHADER_DEPTH_STENCIL_ATTACHMENT_READ|SYNC_FRAGMENT_SHADER_INPUT_ATTACHMENT_READ|SYNC_FRAGMENT_SHADER_UNIFORM_READ|SYNC_EARLY_FRAGMENT_TESTS_DEPTH_STENCIL_ATTACHMENT_READ|SYNC_EARLY_FRAGMENT_TESTS_DEPTH_STENCIL_ATTACHMENT_WRITE|SYNC_LATE_FRAGMENT_TESTS_DEPTH_STENCIL_ATTACHMENT_READ|SYNC_LATE_FRAGMENT_TESTS_DEPTH_STENCIL_ATTACHMENT_WRITE|SYNC_COLOR_ATTACHMENT_OUTPUT_COLOR_ATTACHMENT_READ|SYNC_COLOR_ATTACHMENT_OUTPUT_COLOR_ATTACHMENT_WRITE|SYNC_COMPUTE_SHADER_UNIFORM_READ|SYNC_COPY_TRANSFER_WRITE|SYNC_RESOLVE_TRANSFER_WRITE|SYNC_BLIT_TRANSFER_WRITE|SYNC_CLEAR_TRANSFER_WRITE|SYNC_SUBPASS_SHADER_HUAWEI_INPUT_ATTACHMENT_READ, command: vkCmdPipelineBarrier, seq_no: 1, reset_no: 198).     Objects: 1         [0] 0x483d000000483d, type: 14, name: RID:1008093248888260 View ERROR: VALIDATION - Message Id Number: -455515022 | Message Id Name: SYNC-HAZARD-READ-AFTER-WRITE \tValidation Error: [ SYNC-HAZARD-READ-AFTER-WRITE ] Object 0: handle = 0x483d000000483d, name = RID:1008093248888260 View, type = VK_OBJECT_TYPE_IMAGE_VIEW; | MessageID = 0xe4d96472 | vkCmdDraw: Hazard READ_AFTER_WRITE for VkImageView 0x483d000000483d[RID:1008093248888260 View], in VkCommandBuffer 0x59b846314e50[], and VkPipeline 0x420b000000420b[RID:996733060382780], VkDescriptorSet 0x483e000000483e[RID:1008101838815309], type: VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, imageLayout: VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, binding #1, index 0. Access info (usage: SYNC_FRAGMENT_SHADER_SHADER_SAMPLED_READ, prior_usage: SYNC_IMAGE_LAYOUT_TRANSITION, write_barriers: SYNC_VERTEX_SHADER_UNIFORM_READ|SYNC_FRAGMENT_SHADER_COLOR_ATTACHMENT_READ|SYNC_FRAGMENT_SHADER_DEPTH_STENCIL_ATTACHMENT_READ|SYNC_FRAGMENT_SHADER_INPUT_ATTACHMENT_READ|SYNC_FRAGMENT_SHADER_UNIFORM_READ|SYNC_EARLY_FRAGMENT_TESTS_DEPTH_STENCIL_ATTACHMENT_READ|SYNC_EARLY_FRAGMENT_TESTS_DEPTH_STENCIL_ATTACHMENT_WRITE|SYNC_LATE_FRAGMENT_TESTS_DEPTH_STENCIL_ATTACHMENT_READ|SYNC_LATE_FRAGMENT_TESTS_DEPTH_STENCIL_ATTACHMENT_WRITE|SYNC_COLOR_ATTACHMENT_OUTPUT_COLOR_ATTACHMENT_READ|SYNC_COLOR_ATTACHMENT_OUTPUT_COLOR_ATTACHMENT_WRITE|SYNC_COMPUTE_SHADER_UNIFORM_READ|SYNC_COPY_TRANSFER_WRITE|SYNC_RESOLVE_TRANSFER_WRITE|SYNC_BLIT_TRANSFER_WRITE|SYNC_CLEAR_TRANSFER_WRITE|SYNC_SUBPASS_SHADER_HUAWEI_INPUT_ATTACHMENT_READ, command: vkCmdPipelineBarrier, seq_no: 1, reset_no: 198). ```  ![Image](https://github.com/user-attachments/assets/286e02a8-a474-44b1-a117-a76cc6cb0fed)  ### Minimal reproduction project (MRP)  [AndroidTest.zip](https://github.com/user-attachments/files/21078775/AndroidTest.zip) (note: ignore that it says \"Android\", the problem is not related to any platform)."
  },
  {
    "number": 108316,
    "title": "Autocompletion doesn't find class in some parts of file",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108316",
    "user": "precup",
    "labels": [
      "bug",
      "topic:gdscript",
      "topic:editor"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-05T17:10:18Z",
    "updated_at": "2025-07-06T09:10:46Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Reproducible in 4.4-stable, latest master (v4.5.beta.custom_build [53be3b78d])  ### System information  Godot v4.5.beta (53be3b78d) - Linux Mint 22.1 (Xia) on X11 - X11 display driver, Multi-window, 3 monitors - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 2080 Ti (nvidia; 570.133.07) - AMD Ryzen 9 3900X 12-Core Processor (24 threads) - 31.28 GiB memory. I also had this occur on a Windows machine yesterday.  ### Issue description  While attempting to make an MRP for #108045, I ran into an issue where, on an unsaved scene, autocomplete would work for a class_name in some places but not others.   In the following code, only the first use of MyClass.InnerClass works with autocomplete. The second instance doesn't recognize that MyClass exists in the function signature or if you add a reference inside the function. ``` extends Node2D  class_name MyClass  class InnerClass:     pass      # does work var a = MyClass.InnerClass   # doesn't work func test() -> MyClass.InnerClass:     return null ```  Upon saving, an error would be printed, something along the lines of `SCRIPT ERROR: Compile Error: Identifier not found: MyClass`, despite the fact that the script doesn't seem to have any compiler errors when viewed in the editor.  In the original occurrence of the issue, the script wasn't a built in script, it was a file on disk, but had unsaved content. Saving the file then fixed the issue. I've figured out an MRP that behaves identically despite being saved to disk by instead using a built in script; I'm not 100% sure the two are the same but the behavior is so similar I would expect it to be.  In case you think the problem is the line `var a = MyClass.InnerClass`, you can change the line to `var a = MyClass.InnerClass.new()` or `var a = MyClass.new()`; the behavior on the type completion in the function signature is the same.  ### Steps to reproduce  #### The easy way The reproduction project I've included below has identical behavior with respect to autocomplete and the error message, but triggers consistently, even though it's already been saved. I would recommend using that project to reproduce the issue.   1) Open the MRP; a compile error will be printed. 2) Open node_2d.tscn and click the script icon on Node2D to open the builtin script 3) Delete and retype the `InnerClass` in both instance of `MyClass.InnerClass`, observe that they behave differently. Bonus: the compile error gets printed again every time you save the file.  #### The hard way To reproduce the original issue, start with a blank project. 1) Click 2D Scene under Create Root Node 2) Right click the Node2D, Attach Script, and click Create 3) Select all of the existing code, and then paste in the following WITHOUT SAVING: ``` extends Node2D  class_name MyClass  class InnerClass:     pass      # does work var a = MyClass.InnerClass   # doesn't work func test() -> MyClass.InnerClass:     return null ``` 4) Attempt to autocomplete the `InnerClass` after `MyClass.` in the function signature and see that no autocomplete window appears  ### Minimal reproduction project (MRP)  [AutocompleteIssue.zip](https://github.com/user-attachments/files/21078548/AutocompleteIssue.zip)"
  },
  {
    "number": 108315,
    "title": "Error when selecting \"Toggle Files Panel\" in shader editor",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108315",
    "user": "JekSun97",
    "labels": [
      "bug",
      "topic:editor"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-05T16:35:34Z",
    "updated_at": "2025-07-05T16:41:20Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  4.5 beta2  ### System information  Godot v4.5.beta2 - Windows 10 (build 19045) - Multi-window, 1 monitor - OpenGL 3 (Compatibility) - Radeon RX 560 Series (Advanced Micro Devices, Inc.; 31.0.21912.14) - Intel(R) Core(TM) i5-4570 CPU @ 3.20GHz (4 threads)  ### Issue description  Error when clicking \"Toggles Files Panels\" in shader editor, shader editor should not have open shader.  `  ERROR: editor/plugins/shader_editor_plugin.cpp:636 - Index index = -1 is out of bounds (shader_tabs->get_tab_count() = 0).`   ### Steps to reproduce  1. Open the shader editor 2. Click on the \"Toggles Files Panes\" section in the File menu 3. The shader editor should be empty, without any shaders open.  ### Minimal reproduction project (MRP)  N/A"
  },
  {
    "number": 108314,
    "title": "Replace repetitive meta/ctrl condition with a method",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108314",
    "user": "KoBeWi",
    "labels": [
      "enhancement",
      "topic:codestyle"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-05T16:16:47Z",
    "updated_at": "2025-07-07T21:44:39Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "<!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->    _Bugsquad edit:_  - ~~Supersedes #108215~~  - Supersedes #108218  - Fixes https://github.com/godotengine/godot-proposals/issues/12717"
  },
  {
    "number": 108313,
    "title": "Log spam \"Failed to bind socket. Error: 3.\"",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108313",
    "user": "Zylann",
    "labels": [
      "bug",
      "topic:editor",
      "needs work",
      "needs testing"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [
      {
        "user": "bruvzg",
        "created_at": "2025-07-06T15:45:25Z",
        "body": "Error 3 is `ERR_NET_ADDRESS_INVALID_OR_UNAVAILABLE`, so it might be address/port number conflict related to multiple running instances of LSP or debugger."
      }
    ],
    "created_at": "2025-07-05T16:01:01Z",
    "updated_at": "2025-07-06T15:45:25Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  v4.5.beta.custom_build [53be3b78d]  ### System information  Windows 11 64 bits  ### Issue description  When I open a project in my current build of Godot based on the master branch, this constantly gets logged in the console, thousands of times:  ``` Failed to bind socket. Error: 3. ```   ### Steps to reproduce  I don't know if there is a specific repro for this, but while doing my own stuff I noticed it printing in a practically empty project. If that's relevant, I have VSCode open to edit C++ stuff, but I also have the godot-tools extension and my C++ module contains a bit of GDScript (I don't have any GDScript file open tho). I also have another instance of Godot open (4.4.1).  Later the spam eventually stopped, but I'm unsure what did that.  ### Minimal reproduction project (MRP)  N.A"
  },
  {
    "number": 108312,
    "title": "Fix filtered out nodes not getting deselected",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108312",
    "user": "KoBeWi",
    "labels": [
      "bug",
      "topic:editor",
      "regression"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-05T14:32:26Z",
    "updated_at": "2025-07-05T14:32:27Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Fixes #108008"
  },
  {
    "number": 108311,
    "title": "[4.5.beta2] SteamDeck controller not detected/not working anymore. (regression)",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108311",
    "user": "DanielSnd",
    "labels": [
      "bug",
      "topic:input",
      "regression"
    ],
    "assignee": "",
    "comments_count": 7,
    "comments": [
      {
        "user": "DanielSnd",
        "created_at": "2025-07-05T18:28:05Z",
        "body": "Been looking around more and found a ton of more information.  I got 2 --verbose logs from the device using the MRP. One from 4.5.1 beta 1 when it was working correctly: [godot_4_5_1_beta_1_working_correctly.log](https://github.com/user-attachments/files/21078971/godot_4_5_1_beta_1_working_correctly.log)  And one from 4.5.1 beta 2 when it's no longer working: [godot_4_5_1_beta_2_not_working.log](https://github.com/user-attachments/files/21078963/godot_4_5_1_beta_2_not_working.log)  From looking at the 2 differeng verbose logs, the one that does work and the one that doesn't, the one that doesn't has this in the beginning: ``` Unrecognized output string \"misc2\" in mapping: 030000000d0f0000ab01000011010000,Horipad Steam,a:b0,b:b1,back:b10,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,dpup:h0.1,guide:b12,leftshoulder:b6,leftstick:b13,lefttrigger:a5,leftx:a0,lefty:a1,misc2:b2,paddle1:b19,paddle2:b18,paddle3:b15,paddle4:b5,rightshoulder:b7,rightstick:b14,righttrigger:a4,rightx:a2,righty:a3,start:b11,x:b3,y:b4,platform:Linux, Unrecognized output string \"misc2\" in mapping: 050000000d0f00009601000091000000,Horipad Steam,a:b0,b:b1,back:b10,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,dpup:h0.1,guide:b12,leftshoulder:b6,leftstick:b13,lefttrigger:a5,leftx:a0,lefty:a1,misc2:b2,paddle1:b19,paddle2:b18,paddle3:b15,paddle4:b5,rightshoulder:b7,rightstick:b14,righttrigger:a4,rightx:a2,righty:a3,start:b11,x:b3,y:b4,platform:Linux, Unrecognized output string \"misc2\" in mapping: 030000007e0500006920000011010000,Nintendo Switch 2 Pro Controller,a:b0,b:b1,back:b14,dpdown:b8,dpleft:b10,dpright:b9,dpup:b11,guide:b16,leftshoulder:b12,leftstick:b15,lefttrigger:b13,leftx:a0,lefty:a1~,misc1:b17,misc2:b20,paddle1:b18,paddle2:b19,rightshoulder:b4,rightstick:b7,righttrigger:b5,rightx:a2,righty:a3~,start:b6,x:b2,y:b3,platform:Linux, ```  After the whole big list of Device Ignored which seems to be the same (I didn't double check, but both have a huge list of Device ignored which I'm assuming is normal), The working version has: `JoypadLinux: udev enabled, but detected incompatible sandboxed mode. Falling back to /dev/input to detect joypads.` The non-working version has: `SDL: Init OK!`  After that, it's mostly the same until the end when it loads my gdscript code. The working version after loading my gdscript code prints: ``` XInput: Refreshing devices. XInput: Absolute pointing device: xwayland-pointer:19 XInput: Using touch device: xwayland-touch:19 XInput: Absolute pointing device: xwayland-touch:19 ```  Looked into the code where Refreshing devices gets called... In that version it gets called either when Display Server X11 is created on the constructor, or on the Display Server X11 class on process events when processing a XI_DeviceChanged event. It shows up in that same log way earlier on line 713 which I'm assuming is when the DisplayServerX11 was created, so it seems that on the working version it received a XI_DeviceChanged event when initialization completed, while in the non-working version it doesn't receive that event.  Hmmm, perhaps the central issue is here. I see this in the log in the working correctly version: `JoypadLinux: udev enabled, but detected incompatible sandboxed mode. Falling back to /dev/input to detect joypads.`  I followed the code and it's in the joypad_linux.cpp file that no longer exists in the new version. Following where that is in the code I find this: ```cpp JoypadLinux::JoypadLinux(Input *in) { #ifdef UDEV_ENABLED \tif (OS::get_singleton()->is_sandboxed()) { \t\t// Linux binaries in sandboxes / containers need special handling because \t\t// libudev doesn't work there. So we need to fallback to manual parsing \t\t// of /dev/input in such case. \t\tuse_udev = false; \t\tprint_verbose(\"JoypadLinux: udev enabled, but detected incompatible sandboxed mode. Falling back to /dev/input to detect joypads.\"); \t} ````  So I'm thinking it's perhaps because of the way that the steamdeck runs the game, sandboxed, it can't detect the main steamdeck controller? Maybe the new SDL system needs to do something similar to what the previous one was doing to handle those cases that the previous system was doing, like avoiding udev if it detects its running sandboxed/containerized?"
      },
      {
        "user": "geowarin",
        "created_at": "2025-07-05T18:48:18Z",
        "body": "@DanielSnd  It might be a long shot but could you revert #107962 to see if it makes any difference?"
      },
      {
        "user": "DanielSnd",
        "created_at": "2025-07-06T02:42:39Z",
        "body": "@geowarin This log is with a build made right before #107962   [godot(1).log](https://github.com/user-attachments/files/21084128/godot.1.log)  It doesn't have the `Unrecognized output string \"misc2\" in mapping:` but it still doesn't work.  I also added in this build a way of getting more SDL logs with SDL_SetLogOutputFunction and SDL_SetHint, but it didn't give me a whole lot of more info.  All it did was give me those 4 extra logs before SDL Init: ``` SDL: SYSTEM INFO App name: SDL Application SDL: SYSTEM INFO App version: <unspecified> SDL: SYSTEM INFO App ID: <unspecified> SDL: SYSTEM INFO SDL revision: SDL: Init OK! ```"
      },
      {
        "user": "geowarin",
        "created_at": "2025-07-06T11:26:55Z",
        "body": "Thank you for testing.  It does look a lot like an upstream regression between SDL 2 and 3.  I found this issue, which highlights some difference between v2 and v3: https://github.com/libsdl-org/SDL/issues/9148"
      },
      {
        "user": "DanielSnd",
        "created_at": "2025-07-06T14:25:42Z",
        "body": "> Thank you for testing. It does look a lot like an upstream regression between SDL 2 and 3. >  > I found this issue, which highlights some difference between v2 and v3: [libsdl-org/SDL#9148](https://github.com/libsdl-org/SDL/issues/9148)  I'm not entirely sure it's related. I did more investigating, now that I knew how to get SDL Logs to show up on the verbose logs I added a TON of extra logging all over the place to understand in more detail what was happening in the device. This is the log file with the result of that:  [godot(3).log](https://github.com/user-attachments/files/21089071/godot.3.log)  From that I learned quite a lot. Turns out it does detect the steamdeck controllers: ``` SDL: INPUT DEBUG LINUX_ListAllInputDevices: Device /dev/input/event10 - name: Valve Software Steam Deck Controller, vendor: 0x28de, product: 0x1205, version: 273 SDL: INPUT DEBUG LINUX_ListAllInputDevices: *** VALVE DEVICE FOUND *** /dev/input/event10 (...) SDL: INPUT DEBUG LINUX_ListAllInputDevices: Device /dev/input/event13 - name: Microsoft X-Box 360 pad 0, vendor: 0x28de, product: 0x11ff, version: 1 SDL: INPUT DEBUG LINUX_ListAllInputDevices: *** VALVE DEVICE FOUND *** /dev/input/event13 (...) SDL: INPUT DEBUG LINUX_ListAllInputDevices: Device /dev/input/event6 - name: Valve Software Steam Deck Controller, vendor: 0x28de, product: 0x1205, version: 273 SDL: INPUT DEBUG LINUX_ListAllInputDevices: *** VALVE DEVICE FOUND *** /dev/input/event6 ```  It then goes on to look for Steam Virtual Gamepads: ``` SDL: INPUT DEBUG LINUX_JoystickInit: Performing initial joystick detection SDL: INPUT DEBUG LINUX_JoystickDetect: Starting joystick detection SDL: INPUT DEBUG LINUX_JoystickDetect: Using fallback detection SDL: INPUT DEBUG LINUX_FallbackJoystickDetect: Checking for new devices SDL: INPUT DEBUG LINUX_FallbackJoystickDetect: /dev/input directory modified, rescanning SDL: INPUT DEBUG LINUX_ScanSteamVirtualGamepads: Scanning for Steam virtual gamepads SDL: INPUT DEBUG GetSteamVirtualGamepadSlot: Device name: Microsoft X-Box 360 pad 0 SDL: INPUT DEBUG GetSteamVirtualGamepadSlot: Found slot 0 SDL: INPUT DEBUG LINUX_ScanSteamVirtualGamepads: Found Steam virtual gamepad at /dev/input/event13 (slot 0) SDL: INPUT DEBUG LINUX_ScanSteamVirtualGamepads: Added Steam virtual gamepad 1 SDL: INPUT DEBUG LINUX_ScanSteamVirtualGamepads: Found 1 Steam virtual gamepads SDL: INPUT DEBUG LINUX_ScanSteamVirtualGamepads: Adding Steam virtual gamepad 0 (slot 0): /dev/input/event13 SDL: INPUT DEBUG MaybeAddDevice: Checking device /dev/input/event13 SDL: INPUT DEBUG GuessDeviceClass: Device class returned: 0x4 SDL: INPUT DEBUG GuessIsJoystick: Device class 0x4, joystick bit: 0x4, result: true SDL: INPUT DEBUG IsJoystick: Device /dev/input/event13 - name: Microsoft X-Box 360 pad 0, vendor: 0x28de, product: 0x11ff, version: 1 SDL: INPUT DEBUG IsJoystick: Found Valve device - vendor: 0x28de, product: 0x11ff, name: Microsoft X-Box 360 pad 0 SDL: INPUT DEBUG IsJoystick: This is a Steam virtual gamepad SDL: INPUT DEBUG SDL_ShouldIgnoreGamepad: Checking device - vendor: 0x28de, product: 0x11ff, version: 1, name: Microsoft X-Box 360 pad 0 SDL: INPUT DEBUG SDL_ShouldIgnoreGamepad: Steam virtual gamepad detected, allow_steam_virtual=false SDL: INPUT DEBUG IsJoystick: /dev/input/event13 should be ignored SDL: INPUT DEBUG GuessDeviceClass: Device class returned: 0x4 SDL: INPUT DEBUG MaybeAddDevice: Device /dev/input/event13 is not a joystick or sensor SDL: INPUT DEBUG LINUX_ScanSteamVirtualGamepads: Steam virtual gamepad scan complete ```  It decides that controller is a steam virtual gamepad, and allow_steam_virtual is false, so it's not allowed, it is then ignored and not used.  For event10 and event 7, it decides they are not controllers (which it does seem they're not exactly, it seems they are a mouse and a touchpad). At this point I realize that not only steamdeck controller isn't working, the mouse and touchpad are also not working ;( ``` SDL: INPUT DEBUG MaybeAddDevice: Checking device /dev/input/event10 SDL: INPUT DEBUG GuessDeviceClass: Device class returned: 0x82 SDL: INPUT DEBUG GuessIsJoystick: Device class 0x82, joystick bit: 0x4, result: false SDL: INPUT DEBUG IsJoystick: /dev/input/event10 is not a joystick according to GuessIsJoystick SDL: INPUT DEBUG LINUX_ScanInputDevices: Checking device /dev/input/event7 SDL: INPUT DEBUG MaybeAddDevice: Checking device /dev/input/event7 SDL: INPUT DEBUG GuessDeviceClass: Device class returned: 0x82 SDL: INPUT DEBUG GuessIsJoystick: Device class 0x82, joystick bit: 0x4, result: false SDL: INPUT DEBUG IsJoystick: /dev/input/event7 is not a joystick according to GuessIsJoystick ```  So I decided to try and set allow_steam_virtual to true, done by adding `SDL_SetHint(\"SDL_GAMECONTROLLER_ALLOW_STEAM_VIRTUAL_GAMEPAD\", \"1\");` before SDL initialization in `joypad_sdl.cpp` in `JoypadSDL::initialize()`. That finally got the steamdeck controller working. Using the joystick skips buttons in the UI navigation, but it works overall and the d-pad navigates fine.  I was worried about unintended consequences of setting that variable to true. Assuming it was off for a reason, so I decided to try to connect a gamepad to it to see if it would double the input or something. Connecting a gamepad to it while the game was running crashed the game. After reloading the game the steam controller wasn't working anymore, and only the gamepad input would be accepted. So that's still not a real solution.  This is what it looks like without any gamepads connected:  ![Image](https://github.com/user-attachments/assets/69ba33b5-e38f-4b0f-aaf5-f0ad169f99e9)  And this is what it looks like with a gamepad connected:  ![Image](https://github.com/user-attachments/assets/f1dbd0d5-274f-435e-88fd-de7a92104ac0)"
      },
      {
        "user": "DanielSnd",
        "created_at": "2025-07-06T17:21:56Z",
        "body": "Ok, I figured it out.  In 4.5 beta 1 what happens is that both gamepads (the built-in one on the steamdeck and my other external gamepad) get interpreted as Virtual Gamepads. In 4.5 beta 2 when I forced it to accept virtual gamepads it duplicates it.  I found out that \"beta 1\" got an extra list of device ids to ignore from environment variable \"SDL_GAMECONTROLLER_IGNORE_DEVICES\".  In the old deleted file `joypad_linux.cpp` it checked if it should add a device or not with a comment about steam and its virtual rebindings: ```cpp if (input->should_ignore_device(vendor, product)) { \t\t\t// This can be true in cases where Steam is passing information into the game to ignore \t\t\t// original gamepads when using virtual rebindings (See SteamInput). \t\t\treturn; \t\t} ```  So by taking that environment variable and setting it manually in sdl so it would ignore the devices steam is telling us to ignore it works just like in 4.5 beta 1.  That led me into investigating further, in theory SDL should have gotten those environment variables itself. Turns out steam already has those environment variables in place (\"SDL_GAMECONTROLLER_ALLOW_STEAM_VIRTUAL_GAMEPAD\" and \"SDL_GAMECONTROLLER_IGNORE_DEVICES\") on the steamdeck specifically to handle the inputs correctly with SDL.  **The main issue here is that SDL isn't getting the correct access to the environment variables.**  I added this to the joystick initialization code to try and print the environment variables that SDL could find and it prints nothing: ```cpp Error JoypadSDL::initialize() { \tSDL_Environment *env = SDL_GetEnvironment(); \tchar** env_vars = SDL_GetEnvironmentVariables(env); \tfor (char** env_var = env_vars; *env_var; env_var++) { \t\tprint_verbose(vformat(\"SDL Environment: %s\", *env_var)); \t} \tSDL_free(env_vars); ```  If we solve the issue of SDL getting the environment variables correctly it'll solve not only this current steamdeck issue, but will also allow SDL to be further customized with environment variables by end users."
      },
      {
        "user": "DanielSnd",
        "created_at": "2025-07-06T18:14:01Z",
        "body": "Created a pull request #108350 with a fix, by adding the following defines to the build config for linux SDL can now properly get the environment variables, before it was using static \"local environment variables\": ``` #define HAVE_GETENV 1 #define HAVE_SETENV 1 #define HAVE_UNSETENV 1 ```  And with the environment variables being accessed correctly there is no more issues with the SteamDeck Controller."
      }
    ],
    "created_at": "2025-07-05T14:24:24Z",
    "updated_at": "2025-07-06T18:14:01Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in 4.5.beta2 - Not reproducible in 4.5.beta1  ### System information  SteamDeck 4.5.beta2 (Linux native x86_64)  ### Issue description  The SteamDeck Controllers are not working in the Steamdeck. Other controllers (I tried Xbox One controllers) connected to the steam deck work fine.  I made a little MRP to see if the controller was even being detected with `Input.get_connected_joypads()`, which in 4.5 beta2 it is not, but on 4.5 beta 1 it is.  ### Steps to reproduce  - Run a game exported to linux 86_64 in the steamdeck with 4.5.beta2 - Try to use the built-in steam deck controllers. - Controllers won't work.  ### Minimal reproduction project (MRP)  [SteamdeckControllerMRP.zip](https://github.com/user-attachments/files/21076951/SteamdeckControllerMRP.zip)  The MRP has a Rich Text Label which prints the connected joypads with `Input.get_connected_joypads()` with their joy name, guid, device id and joy_info.  It also prints joy_connection_changed messages."
  },
  {
    "number": 108310,
    "title": "InputEventPanGesture always spreads to unhandled input",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108310",
    "user": "maelig-moreau",
    "labels": [
      "archived",
      "topic:input",
      "topic:gui"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [
      {
        "user": "AThousandShips",
        "created_at": "2025-07-06T10:03:03Z",
        "body": "You never handle the input event, so it follows the default processing, which only captures mouse events by default, if want the event to be handled explicitly you should use `accept_event`  Also try setting `mouse_force_pass_scroll_events` to `false`"
      },
      {
        "user": "maelig-moreau",
        "created_at": "2025-07-06T10:19:35Z",
        "body": "> You never handle the input event, so it follows the default processing, which only captures mouse events by default, if want the event to be handled explicitly you should use `accept_event` >  > Also try setting `mouse_force_pass_scroll_events` to `false`  Thank you for your help ! You're right, it's my fault, I wasn't careful enough reading the documentation and I skipped over the `accept_event` part. I tested it on my project and it worked perfectly."
      }
    ],
    "created_at": "2025-07-05T14:12:38Z",
    "updated_at": "2025-07-06T10:27:14Z",
    "closed_at": "2025-07-06T10:16:17Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  4.4.1  ### System information  Macbook air M2, macos arm64  ### Issue description  InputEventPanGesture keeps spreading to _unhandled_input() unlike MouseInputEvents. The input is not being consumed as it should, while MouseInputEvents are being handled correctly in the same setup.  ### Steps to reproduce  - Create a Control with a script that handles InputEventMouse and InputEventPanGesture with _gui_input - In the same scene create a Node2D with a similar script using _unhandled_input  ### Minimal reproduction project (MRP)  You can find an archive with a demo minimal project that prints the inputs, as you can see, clicking outisde the blue and red squares doesn't print the Node2D message, while InputEventPanGesture does.  [inputpanevent-bug.zip](https://github.com/user-attachments/files/21076817/inputpanevent-bug.zip)"
  },
  {
    "number": 108309,
    "title": "Imprecise drop position indication in trees",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108309",
    "user": "passivestar",
    "labels": [
      "bug",
      "topic:editor",
      "usability"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-05T13:31:08Z",
    "updated_at": "2025-07-05T15:40:36Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  v4.5.beta2.official [e1b4101e3] v4.4.1.stable.official [49a5bc7b6]  ### System information  Godot v4.5.beta2 - macOS Sequoia (15.1.0) - Multi-window, 1 monitor - Metal (Forward+) - integrated Apple M1 Max (Apple7) - Apple M1 Max (10 threads) - 32.00 GiB memory  ### Issue description  Node may end up inside of another node despite the tree indicating that it will be placed before it:  https://github.com/user-attachments/assets/e5ee92fc-6748-4e03-84eb-23472851ea5a  ### Steps to reproduce  Grab a node, move it above another node, then move your mouse a couple of pixels up for the drop indicator to change from outline to the line above it  ### Minimal reproduction project (MRP)  N/A"
  },
  {
    "number": 108308,
    "title": "Fix `surface_get_arrays` returns wrong index array when using empty vertex array",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108308",
    "user": "beicause",
    "labels": [
      "bug",
      "topic:rendering"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-05T10:17:51Z",
    "updated_at": "2025-07-07T15:58:42Z",
    "closed_at": "2025-07-07T15:14:05Z",
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Fixes #108307"
  },
  {
    "number": 108307,
    "title": "`Mesh.surface_get_arrays` returns wrong index array when using empty vertex array",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108307",
    "user": "beicause",
    "labels": [
      "bug",
      "topic:rendering"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-05T10:07:32Z",
    "updated_at": "2025-07-07T15:16:38Z",
    "closed_at": "2025-07-07T15:14:10Z",
    "milestone": "4.5",
    "is_pull_request": false,
    "body": "### Tested versions  4.4, 4.5  ### System information  Linux  ### Issue description  `Mesh.surface_get_arrays` returns wrong index array when using empty vertex array:  ```gdscript @tool extends Node2D  func _ready() -> void:     var array_mesh := ArrayMesh.new()     var arrays := []     arrays.resize(Mesh.ARRAY_MAX)     # arrays[Mesh.ARRAY_VERTEX] = PackedVector3Array([Vector3(0, 0, 0), Vector3(0, 0, 1), Vector3(0, 0, 2)])     arrays[Mesh.ARRAY_INDEX] = PackedInt32Array([0, 1, 2])     array_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays, [], {}, Mesh.ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY)     var res = array_mesh.surface_get_arrays(0)     print(res)     # result: [0, 0, 1], it's wrong. ```  When writing arrays to surface, index array is always int32 if vertex array is empty:  https://github.com/godotengine/godot/blob/53be3b78d1634406f1fb29e3802c608a5f5104a1/servers/rendering_server.cpp#L892-L916  But when reading surface to arrays, index array is int16:  https://github.com/godotengine/godot/blob/53be3b78d1634406f1fb29e3802c608a5f5104a1/servers/rendering_server.cpp#L1681-L1704    ### Steps to reproduce  Run the script:  <details>   ```gdscript @tool extends Node2D  func _ready() -> void:     var array_mesh := ArrayMesh.new()     var arrays := []     arrays.resize(Mesh.ARRAY_MAX)     # arrays[Mesh.ARRAY_VERTEX] = PackedVector3Array([Vector3(0, 0, 0), Vector3(0, 0, 1), Vector3(0, 0, 2)])     arrays[Mesh.ARRAY_INDEX] = PackedInt32Array([0, 1, 2])     array_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays, [], {}, Mesh.ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY)     var res = array_mesh.surface_get_arrays(0)     print(res)     # result: [0, 0, 1], it's wrong. ```   </details>  ### Minimal reproduction project (MRP)  N/A"
  },
  {
    "number": 108306,
    "title": "Fix lookup symbol for `super()`",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108306",
    "user": "Chaosus",
    "labels": [
      "enhancement",
      "topic:gdscript",
      "topic:editor"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-05T09:47:47Z",
    "updated_at": "2025-07-08T15:31:45Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "- Fix https://github.com/godotengine/godot/issues/103215    ![fix](https://github.com/user-attachments/assets/4362dbbb-4b6f-46b7-ac7d-43cd338db69a)  "
  },
  {
    "number": 108305,
    "title": "GDScript editor falsely reports \"Not all code paths return a value.\" when assigning value to local var and testing for it.",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108305",
    "user": "m4rr5",
    "labels": [
      "archived"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [
      {
        "user": "thygrrr",
        "created_at": "2025-07-05T08:18:11Z",
        "body": "This is not a bug, this would require static analysis."
      },
      {
        "user": "AThousandShips",
        "created_at": "2025-07-05T09:30:27Z",
        "body": "Indeed, see: * https://github.com/godotengine/godot/issues/94464   And others"
      }
    ],
    "created_at": "2025-07-05T07:54:59Z",
    "updated_at": "2025-07-05T09:30:29Z",
    "closed_at": "2025-07-05T09:30:26Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in Godot v4.4.1  ### System information  Godot v4.4.1.stable (49a5bc7b6) - Windows 11 (build 26100) - Single-window, 2 monitors - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 4090 (NVIDIA; 32.0.15.7602) - Intel(R) Core(TM) i9-14900KF (32 threads)  ### Issue description  The editor refuses code that is valid when in a function that returns a value you assign a value to a local variable and directly after test if the variable is set to that value (which it must be at that point) and only return something in that case.  While obviously this little example is a bit artificial, I was originally using a 'while' instead of the 'if' and was recursing up a tree that would either find something (and return true to indicate that) or not (and returning false in that same while loop).  The workaround is to add unreachable code at the end of the test() function to return something (which does not get detected and flagged as an error at the moment).  ### Steps to reproduce  1. Create a new, empty Godot project. 2. Add the script below (see MRP). 3. The editor reports \"Not all code paths return a value.\"  ### Minimal reproduction project (MRP)  ``` @tool extends EditorScript  func test() -> bool: \tvar local = null \tif local == null: \t\treturn true  func _run() -> void: \tprint(test()) ```"
  },
  {
    "number": 108304,
    "title": "[4.3] GLTF: Fix nasty bug with incorrect buffer indices",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108304",
    "user": "aaronfranke",
    "labels": [
      "bug",
      "topic:import",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-05T07:25:27Z",
    "updated_at": "2025-07-05T21:43:35Z",
    "closed_at": null,
    "milestone": "4.3",
    "is_pull_request": true,
    "body": "This PR manually backports PR #108302 to the 4.3 branch since it couldn't be done automatically, and the 4.4 manual backport PR #108303 also couldn't be cherrypicked to 4.3 automatically. I also backported PR #107193 and PR #103303 as well since they both overlap with the same code and they were pending backport anyway.    Draft because PR #108302 has not been merged yet."
  },
  {
    "number": 108303,
    "title": "[4.4] GLTF: Fix nasty bug with incorrect buffer indices",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108303",
    "user": "aaronfranke",
    "labels": [
      "bug",
      "topic:import",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-05T07:21:24Z",
    "updated_at": "2025-07-05T07:21:24Z",
    "closed_at": null,
    "milestone": "4.4",
    "is_pull_request": true,
    "body": "This PR manually backports PR #108302 to the 4.4 branch since it couldn't be done automatically. I also backported PR #107193 as well since it overlaps with the same code and it was pending backport anyway.    Draft because PR #108302 has not been merged yet."
  },
  {
    "number": 108302,
    "title": "GLTF: Fix nasty bug with incorrect buffer indices on export",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108302",
    "user": "aaronfranke",
    "labels": [
      "bug",
      "topic:import",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-05T06:50:06Z",
    "updated_at": "2025-07-05T07:11:37Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "I was writing some code with the GLTF module when I noticed that the buffer indices inside of each buffer view was just... completely and totally wrong at export time. Each buffer view had its buffer index set to its own buffer view index.    The problem was caused by this line of code:    ```cpp  r_accessor = bv->buffer = p_state->buffer_views.size();  ```    This line is utter nonsense. The `bv->buffer` is a buffer index, not a buffer view index. The `r_accessor` is actually a buffer view index... but it's incorrectly named, so I've also fixed that in this PR.    This bug was hidden thanks to this loop in the export code:    ```cpp  for (GLTFBufferViewIndex i = 0; i < state->buffer_views.size(); i++) {      state->buffer_views.write[i]->buffer = 0;  }  ```    This code effectively says... ignore the data in the buffer view, use index 0 always instead. That's just... so bad. Complete and utter nonsense. It completely breaks using any buffer other than 0 and breaks all intermediate export code that tries to take a look at what the buffer view's buffer is.    I also renamed `_encode_buffer_view` to `_encode_accessor_into_buffer_view` because it's not just buffer views, it also deals heavily with accessor stuff. I also fixed a bug where 16-bit `MAT3`s were being misaligned (`MAT3` is used by nothing in glTF so it went unnoticed until I combed over this code). Also, I improved the comments."
  },
  {
    "number": 108301,
    "title": "Request for translation synchronization Godot Reference, Godot Document, and Godot Engine.",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108301",
    "user": "Maksim2005UA2",
    "labels": [
      "archived"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [
      {
        "user": "AThousandShips",
        "created_at": "2025-07-05T09:35:07Z",
        "body": "Thank you for opening an issue, we synchronize the translations periodically so there's no need for an issue to track this, thank you nonetheless!  Note the translations were synced just a month ago so we should probably sync them quite soon, but we're not overdue "
      },
      {
        "user": "AThousandShips",
        "created_at": "2025-07-05T09:51:58Z",
        "body": "In the future I'd suggest joining our [developer chat](https://chat.godotengine.org/home) to bring attention to the need to update, that way it can get more discussion and feedback"
      }
    ],
    "created_at": "2025-07-05T06:30:26Z",
    "updated_at": "2025-07-05T09:51:58Z",
    "closed_at": "2025-07-05T09:35:07Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Playback on any version Godot 4.x and maybe 3.x  ### System information  Android 11, 2/32 GB, Compatibility, Godot 4.4.1 and 4.5 beta, PowerVR8300, Mediatek Hello A22  ### Issue description  Good day, developers Godot Engine, I'm back but with a new account, I'll show you the reasons why I have a new one below. Me question, you you will be able translation synchronization, why, I've not only finished translating, I checked again for the quality of your translation, I even go through it again to make sure it's of high quality. Why do I need a new account, I will give reasons, I lost access to the old account because I forgot the password and data about it, because of this I created a new one, so that I can continue to send a request or feedback about fixing the error, because of this I have already created.  ### Steps to reproduce  I wasn't an editor Godot Engine, because I was on Weblate.  ### Minimal reproduction project (MRP)  I have no files to play because I was Weblate."
  },
  {
    "number": 108300,
    "title": "subwindow steals first mouse/tap event when emulating mouse->touch or touch->mouse",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108300",
    "user": "SiLiKhon",
    "labels": [
      "bug",
      "topic:porting",
      "topic:input"
    ],
    "assignee": "",
    "comments_count": 4,
    "comments": [
      {
        "user": "SiLiKhon",
        "created_at": "2025-07-05T04:31:45Z",
        "body": "Upon checking the stdout a bit more carefully, here's a small correction:  >  the next click outside the window only generates a press event, but not a release event > ... > note that VBox only logs the mouse pressed, but not the mouse released event  In fact, it only logs \"mouse released\" event without the \"mouse pressed\" one. I was confused originally by the fact that this happens when I start the tap, rather than when I finish it. This probably explains why the button \"pressed\" signal processing callback isn't triggered."
      },
      {
        "user": "SiLiKhon",
        "created_at": "2025-07-05T05:54:59Z",
        "body": "I tried the following monitoring method (in the root node's _ready method): ```gd get_window().window_input.connect( \tfunc(evt): \t\tif (evt is InputEventMouseButton or evt is InputEventScreenTouch) and !evt.pressed: \t\t\tprint(\"  >  \", evt) \t\telse: \t\t\tprint(evt) ) ```  Here are the outputs when tapping outside the subwindow. First (problematic) tap and release: ``` ### (tap) InputEventMouseButton: button_index=1, mods=none, pressed=true, canceled=false, position=((797.9688, 154.0068)), button_mask=1, double_click=false   >  InputEventMouseButton: button_index=1, mods=none, pressed=false, canceled=false, position=((797.9688, 154.0068)), button_mask=0, double_click=false InputEventScreenTouch: index=0, pressed=true, canceled=false, position=((797.9688, 154.0068)), double_tap=false ### (release)   >  InputEventScreenTouch: index=0, pressed=false, canceled=false, position=((797.9688, 154.0068)), double_tap=false ```  Subsequent tap and release (working as expected): ``` ### (tap) InputEventMouseButton: button_index=1, mods=none, pressed=true, canceled=false, position=((797.9688, 154.0068)), button_mask=1, double_click=false InputEventScreenTouch: index=0, pressed=true, canceled=false, position=((797.9688, 154.0068)), double_tap=false ### (release)   >  InputEventMouseButton: button_index=1, mods=none, pressed=false, canceled=false, position=((797.9688, 154.0068)), button_mask=0, double_click=false   >  InputEventScreenTouch: index=0, pressed=false, canceled=false, position=((797.9688, 154.0068)), double_tap=false ```  As you can see, in the first case, both mouse press and release happen at the moment of tapping. For some reason, the press event doesn't reach the gui elements though."
      },
      {
        "user": "SiLiKhon",
        "created_at": "2025-07-05T06:19:36Z",
        "body": "Looks like this isn't Android problem, but rather the touch -> click emulation problem. Upon experimenting with processing touch events using TouchScreenButton and turning from touch->mouse to mouse->touch emulation I see the same problem on MacOS.  On Android, for some reason, the touch events never reach the buttons if the window is visible, no matter what window flags I set :(   So it seems like a temporary workaround would be switching off the default touch->mouse emulation and writing my own: ```gd get_window().window_input.connect( \tfunc(evt): \t\tif evt is InputEventScreenTouch: \t\t\tvar mouse_evt := InputEventMouseButton.new() \t\t\tmouse_evt.button_index = MOUSE_BUTTON_LEFT \t\t\tmouse_evt.pressed = evt.pressed \t\t\tmouse_evt.position = evt.position \t\t\tmouse_evt.button_mask = MOUSE_BUTTON_MASK_LEFT                         # get_window().push_input(mouse_evt)  ## <-- (UPD) this doesn't trigger                                                               ## mouse-related actions, so                                                               ## this seems more suitable: \t\t\tInput.parse_input_event(mouse_evt) ) ``` I would appreciate any feedback on potential caveats for this workaround."
      },
      {
        "user": "SiLiKhon",
        "created_at": "2025-07-05T07:09:33Z",
        "body": "found this bit of code that may be connected to this problem, as it seems to be related to clicking between windows + it generates a mouse release event:  https://github.com/godotengine/godot/blob/53be3b78d1634406f1fb29e3802c608a5f5104a1/core/input/input.cpp#L1064-L1085"
      }
    ],
    "created_at": "2025-07-05T04:08:19Z",
    "updated_at": "2025-07-06T06:14:12Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  v4.4.1.stable.official [49a5bc7b6]  ### System information  Godot v4.4.1.stable - macOS Sequoia (15.5.0) - Multi-window, 1 monitor - OpenGL 3 (Compatibility) - Apple M3 Pro - Apple M3 Pro (11 threads)  ### Issue description  When there's a Window node in the scene, and the last click was within that window, the next click outside the window only generates a press event, but not a release event.  I only see this problem in Android, not on my host platform (macos) (UPD: not only android, see comments below). Here is the scene layout where it happens for me:  <img width=\"256\" height=\"273\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/8ee15955-9536-478a-9163-61b5151949fa\" />  ### Steps to reproduce  - Run the attached minimal project on android, check the logged stdout messages about mouse events and \"b1/b2 presssed\" messages - tap inside the window (white rectangle) - tap and release on button b1 or b2 - note that VBox only logs the mouse pressed, but not the mouse released event - note that the first tap on button didn't result in the \"bX pressed\" stdout message (~~because the button didn't receive the mouse button release event~~ (see upd below))  UPD: setting button's mode to \"Button Press\" instead of \"Button Release\" doesn't fix it: the button processing callback still doesn't trigger from the first click. UPD2: I even crosschecked that the button itself receives the press event, but that doesn't trigger the callback for some reason   ### Minimal reproduction project (MRP)  minimal project: [mwe.zip](https://github.com/user-attachments/files/21071688/mwe.zip)"
  },
  {
    "number": 108299,
    "title": "Add annotations to more easily controls what subresources are duplicated in a deep/shallow copy",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108299",
    "user": "MarianoGnu",
    "labels": [
      "feature proposal",
      "topic:gdscript"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-05T01:55:36Z",
    "updated_at": "2025-07-07T15:06:41Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "Related to https://github.com/godotengine/godot/issues/108220  (does not close it)    The test case is still not working as i intended, i am calling for input here, what is more important? the USAGE flag, or the duplicate/duplicate_deep argument? I expected the flag to always take presedence over the method argument, but seems is not the case    **TODO:** Add documentation of the new annotations    <!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  "
  },
  {
    "number": 108298,
    "title": "Crash when creating UniformSet if RDUniform's uniform_type is invalid",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108298",
    "user": "DevPrice",
    "labels": [
      "bug",
      "topic:rendering",
      "crash"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-05T01:38:22Z",
    "updated_at": "2025-07-05T07:38:52Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Reproducible in 4.4.1 stable.  ### System information  Godot v4.4.1.stable - Windows 11 (build 26100) - Multi-window, 2 monitors - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 3080 (NVIDIA; 32.0.15.7680) - AMD Ryzen 9 9950X 16-Core Processor (32 threads)  ### Issue description  Actual: The process crashes when creating UniformSet if any RDUniform's uniform_type is invalid.  Expected: Godot will check the uniform is valid and, if it is not valid, will return RID() and print an error without crashing.  ### Steps to reproduce  Create a uniform with the `uniform_type` set to `-1`. Call `UniformSetCacheRD.get_cache` or `RenderingDevice.uniform_set_create` with this uniform.  Observe the process crashes.  ### Minimal reproduction project (MRP)  [crash_mrp.zip](https://github.com/user-attachments/files/21070698/crash_mrp.zip)"
  },
  {
    "number": 108297,
    "title": "Fix remote deselection not working when selection limit is reached",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108297",
    "user": "YeldhamDev",
    "labels": [
      "bug",
      "topic:editor"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-04T23:40:44Z",
    "updated_at": "2025-07-04T23:40:45Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": ""
  },
  {
    "number": 108296,
    "title": "The method Node3D.get_gizmos() does not get the gizmo for Node3D class, but only subclass nodes.",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108296",
    "user": "wyattbiker",
    "labels": [
      "bug",
      "topic:editor",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-04T23:10:27Z",
    "updated_at": "2025-07-05T07:47:10Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  v4.4.1.stable.official [49a5bc7b6]  ### System information  Kubuntu 24.04  ### Issue description  Created an EditorPlugin to access the gizmo data of nodes as they are selected. The node is selected, but for the `Node3D` class the `get_gizmo() `method returns an empty array[] (no gizmos). However if the nodes are of class `MeshInstance3D`, `Camera3D`, `StaticBody3D` etc, the gizmos are returned.  The addon code of the plugin is shwon below:  ```gdscript @tool extends EditorPlugin  func _enter_tree(): \t# Connect to the selection_changed signal. \tEditorInterface.get_selection().connect(\"selection_changed\", Callable(self, \"_on_selection_changed\"))  func _exit_tree(): \t# Disconnect the signal when the plugin is removed. \tEditorInterface.get_selection().disconnect(\"selection_changed\", Callable(self, \"_on_selection_changed\"))  func _on_selection_changed(): \tvar selected_nodes:Array[Node] = EditorInterface.get_selection().get_selected_nodes() \t# Check if any nodes are selected. \tif selected_nodes.size() > 0: \t\t# Get the first selected node. \t\tprint(\"\\n\\nClass: \", selected_nodes[0].get_class()) \t\t#print(get_main_screen()) \t\tvar gizmos:Array[Node3DGizmo] \t\tfor node:Node3D in selected_nodes: \t\t\t#if node is Node3D: \t\t\tgizmos = node.get_gizmos() \t\t\tprints(\"Node: \",node.name,\"Gizmos: \",gizmos)  ```  plugin.cfg ``` [plugin]  name=\"gizmos\" description=\"Plugin access gizmos.\" author=\"wyattbiker\" version=\"1.0-BETA\" script=\"plugin.gd\" ```  Sample output when clicking on nodes of various classes: ``` Class: Node3D Node:  Gizmos Gizmos:  []  Class: MeshInstance3D Node:  MeshInstance3D Gizmos:  [<EditorNode3DGizmo#-9223351649919991839>, <EditorNode3DGizmo#-9223351649903214893>]  Class: StaticBody3D Node:  StaticBody3D Gizmos:  [<EditorNode3DGizmo#-9223351649886437727>]  Class: Camera3D Node:  Camera3D Gizmos:  [<EditorNode3DGizmo#-9223352278545501823>, <EditorNode3DGizmo#-9223352276817446094>]  ```   ### Steps to reproduce  - Drop the gizmo **plugin.gd**  and **plugin.cfg** into an gizmos **addons/ folder** of any godot project. - Create a scene and add some `Node3D` nodes as well as other `Node3D` class  derivatives such as `MeshInstance3D` or `Camera3D` or `StaticBox3D`. - Enable gizmo plugin. - Click on nodes and noticed that the output from Node3D>>`get_gizmos()` method does not show gizmos for `Node3D` node, but only for the subclasses.  ### Minimal reproduction project (MRP)  [Archive.zip](https://github.com/user-attachments/files/21069080/Archive.zip)  To test:  Copy folder addons/gizmos to project Copy getgizmos scene to main project folder Open scene and click on nodes."
  },
  {
    "number": 108295,
    "title": "Fix shader editor auto-opens on startup",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108295",
    "user": "beicause",
    "labels": [
      "bug",
      "topic:editor",
      "topic:shaders"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-04T22:48:59Z",
    "updated_at": "2025-07-06T10:55:16Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Fixes #108282    Simply does not call `push_item_no_inspector` at startup. This should not cause #103159 because if a `ShaderInclude` is edited at startup, the `Shader` is definitely not be edited."
  },
  {
    "number": 108294,
    "title": "A custom resource loading another resource via an @export var default fails in exported builds.",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108294",
    "user": "wickworks",
    "labels": [
      "bug",
      "topic:core",
      "topic:export"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-04T21:42:21Z",
    "updated_at": "2025-07-05T07:45:40Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  4.4.1  ### System information  Godot v4.4.1.stable.mono - macOS Sequoia (15.3.1) - Multi-window, 2 monitors - OpenGL 3 (Compatibility) - AMD Radeon Pro 5500M OpenGL Engine - Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz (16 threads)  ### Issue description  When a resource loads another resource as a default for an `@export var`, it loads successfully when run from the editor but fails in the exported build.  Run from the editor, my `character_main.tres` statblock's health is correctly defaulted to 10: `@export var stats:Statblock = load(\"res://resources/statblock_default.tres\")`  <img width=\"758\" height=\"143\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/f9c2adda-a000-4bf9-bd87-10d04712fc5e\" />  But on the exported build, the health is null:  <img width=\"737\" height=\"198\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/b6ab3b17-1c7a-4b36-84da-807ad36b7bfe\" />  I don't have a strong opinion what the correct behavior should be, but it should not be different between the editor & exported builds. If loading a resource as an exported var's default is invalid behavior, the editor should throw a warning and it should not work in debug builds. If it's a valid thing to do, it should work on exported builds.  It also works as expected if you haven't daisy-chained resources together; a scene loading `statblock_default.tres` via an `@export var` default works fine.   I made MRP on Mac, but see the same/similar behavior on my PC and Linux boxes. Troubleshooting why I was seeing different behavior across all my exported builds took a full day since it fails more-or-less silently (in my full project, I was getting default statblock values instead of nulls), so I'm opening this bug to save other developers from the same pitfall. I also have a vague memory of running into this a year or two ago, so do not believe it's a new issue.  ### Steps to reproduce  1. Define one type of custom resource, eg `statblock.gd`: ``` extends Resource class_name Statblock @export var health:int = 0 ```  2. Make an instance of that resource, eg `statblock_default.tres`. Set its health value to something.  3. Define a second type of custom resource, with a var that defaults to loading the above default statblock. This is what behaves differently in editor vs exported build:  ``` extends Resource class_name Character @export var stats:Statblock = load(\"res://resources/statblock_default.tres\") ```  4. Making any Character resources and not filling in their `stats` value loads `statblock_default.tres` as expected when run from the editor, but fails in exported builds. (as seen in the above screenshots)  ### Minimal reproduction project (MRP)  [default-resource-load-fails-on-export.zip](https://github.com/user-attachments/files/21068366/default-resource-load-fails-on-export.zip)"
  },
  {
    "number": 108293,
    "title": "Particles do not appear when spawning on the edge of a GPUParticlesAttractor with zero attenuation",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108293",
    "user": "fragskye",
    "labels": [
      "bug",
      "topic:particles"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-04T20:58:15Z",
    "updated_at": "2025-07-05T07:44:17Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in: 4.5.beta2, 4.4.1.stable, 4.3.stable, 4.2.2.stable, 4.1.4.stable, 4.0.4.stable.  ### System information  Godot v4.4.1.stable - Windows 10 (build 19045) - Multi-window, 2 monitors - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 3070 (NVIDIA; 32.0.15.7296) - 11th Gen Intel(R) Core(TM) i7-11700K @ 3.60GHz (16 threads)  ### Issue description  Particles fail to spawn on the exact edge of geometric GPU particles attractors with attenuation set to exactly zero (`GPUParticlesAttractorBox3D`, `GPUParticlesAttractorSphere3D`, have not tested but shouldn't affect `GPUParticlesAttractorVectorField3D`)  The attenuation being barely higher, or the edge barely not intersecting will avoid this issue.  The bug occurs because of [this section](https://github.com/godotengine/godot/blob/53be3b78d1634406f1fb29e3802c608a5f5104a1/servers/rendering/renderer_rd/shaders/particles.glsl#L489) of the particle shader, where the math works out to `pow(0.0, 0.0)` which is [undefined in GLSL](https://registry.khronos.org/OpenGL-Refpages/gl4/html/pow.xhtml). To avoid any extra instructions in the shader for this edge case, maybe the attenuation parameter should be clamped with an extremely small epsilon before being sent off to the GPU?  https://github.com/user-attachments/assets/d1ad1a50-0d5c-497b-be2a-efcde783cfca  Admittedly not a very high priority bug with how easily it's worked around, but it had me confused for a good minute while setting up some VFX since I missed when it stopped emitting and couldn't figure out what was causing it.  ### Steps to reproduce  1. Add a `GPUParticles3D` and give it a default `ParticleProcessMaterial` and `QuadMesh` draw pass 2. Add a `GPUParticlesAttractorBox3D` to the scene and position it so that one of its faces intersects the position of the particle system 3. Right click the attractor's attenuation property and set it to zero through the dropdown  ### Minimal reproduction project (MRP)  [mrp-particle-attractor-zero-attenuation.zip](https://github.com/user-attachments/files/21066445/mrp-particle-attractor-zero-attenuation.zip)"
  },
  {
    "number": 108292,
    "title": "Too high load when using OmniLight3D lighting",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108292",
    "user": "miruji",
    "labels": [
      "archived",
      "discussion",
      "topic:rendering",
      "topic:3d",
      "performance"
    ],
    "assignee": "",
    "comments_count": 8,
    "comments": [],
    "created_at": "2025-07-04T20:52:49Z",
    "updated_at": "2025-07-07T17:50:44Z",
    "closed_at": "2025-07-07T00:01:09Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Tested on 4.4-stable, 4.4.1-stable, 4.5-dev1, 4.5-dev2, 4.5-dev3, 4.5-dev4, 4.5-dev5, 4.5-beta1, 4.5-beta2  ### System information  Linux, Vulkan 1.4.311 - Forward+ - Using Device #0: AMD - AMD Radeon RX 7900 XT (RADV NAVI31)  ### Issue description  I am working on a 3D dungeon game so I need lighting, shadows, and so on. So I noticed that at resolutions above 1152x648 my Junction Temp rises above 70, and at 1920x1080 it goes up to 90 degrees. A few facts:  1. My video card is not cheap, it even has special support for games and ray tracing, but it heats up to 90 degrees at normal HD resolution, which is comparable to AAA games and huge scenes, not just five light sources. Meanwhile, I have 3 fans built into the video card, 5 additional fans, and 2 on the CPU.  2. I thought it was a version issue and tested several versions; the load picture is the same everywhere. I would call this a regression because the GPU temperature increases over time, and there were moments with peaks up to 100 degrees, while even my biggest AI models never heated that much when loading all 20GB and video card cores, but here it's just a few megabytes and five light sources.  3. Therefore, I thought it might be settings, but the picture is the same at maximum and minimum settings. Since the picture does not lag, I suspect this is regression and uneven GPU utilization.  4. I thought it was particles or their shader, but that was not the case. Also, I tested lighting on different baking modes and the result is the same. It makes no difference for my video card whether it calculates rays or it’s something static, the load is the same at high rendering resolution, if you can call it high.  5. I found the only fix for this problem is using vsync; then everything works correctly and the load is distributed properly.  So in fact, it should be that at both low and high resolutions the GPU heating is about the same, no more than 70-75 degrees because my video card doesn’t feel the load, and this was tested and understood. That is, you can’t just say it’s because of the render resolution or whatever, but the facts above prove the opposite. If I’m wrong about something, please correct me.  Additionally, I will say that I have all the drivers installed for my video card, no bugs or glitches. Everything works correctly at all settings. The problem is exactly in uneven load distribution.  ### Steps to reproduce  https://youtu.be/xLGU2OOzUwI  ### Minimal reproduction project (MRP)  If you are going to test this, be sure to check both high and low graphics settings on your video card, and whether vsync mode helps or not.  [test.zip](https://github.com/user-attachments/files/21068222/test.zip)"
  },
  {
    "number": 108291,
    "title": "Create an undo/redo action when pinning a SoftBody3D point in the editor",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108291",
    "user": "simpkins",
    "labels": [
      "enhancement",
      "topic:editor",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-04T20:41:25Z",
    "updated_at": "2025-07-05T07:36:33Z",
    "closed_at": null,
    "milestone": "4.6",
    "is_pull_request": true,
    "body": "Previously if you pinned a point by clicking on one of the soft body vertex handles the scene was not marked as modified, and the action could not be undone by hitting Ctrl-Z.    I ran into this in my own development, but I suspect that the scene not getting marked as modified is probably the root cause of issue #106325, so I suspect this change fixes that issue.  "
  },
  {
    "number": 108290,
    "title": "Revert \"Create more optimized CSGShape3D baked static mesh\"",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108290",
    "user": "smix8",
    "labels": [
      "bug",
      "regression",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-04T18:48:23Z",
    "updated_at": "2025-07-08T23:36:37Z",
    "closed_at": "2025-07-07T15:14:05Z",
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "This reverts commit 28875459d9a61885be2d3fc7c8513aa14a179ebd.    Closes https://github.com/godotengine/godot/issues/108275  Closes https://github.com/godotengine/godot/issues/108289    <!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  "
  },
  {
    "number": 108289,
    "title": "Meshes baked from CSG nodes always have smooth normals (regression)",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108289",
    "user": "fragskye",
    "labels": [
      "bug",
      "archived",
      "topic:editor",
      "regression",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-04T18:21:33Z",
    "updated_at": "2025-07-07T15:22:46Z",
    "closed_at": "2025-07-04T20:04:25Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in: 4.5.dev [2887545], 4.5.beta1, 4.5.beta2. - Not reproducible in: 4.5.dev [318a817], 4.5.dev5, 4.4.1.stable.  ### System information  Godot v4.5.beta1 - Windows 10 (build 19045) - Multi-window, 2 monitors - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 3070 (NVIDIA; 32.0.15.7296) - 11th Gen Intel(R) Core(TM) i7-11700K @ 3.60GHz (16 threads) - 63.74 GiB memory  ### Issue description  The normals on any meshes generated by CSG > Bake Mesh Instance are smooth shaded. This happens on any CSG node, including `CSGCombiner3D`.  This appears to have been caused by commit `2887545`, which changed the implementation of `CSGShape3D::bake_static_mesh` to create an optimized version of its mesh using `SurfaceTool`. However, it re-calculates normals while taking into account smoothing groups, which seem to be all set to the same value (?). When testing a fix, you'd probably want to check using `CSGCylinder3D`, since that's the only CSG node that has smooth and flat surfaces by default.  Expected result (4.5.dev5 and earlier):  <img width=\"640\" height=\"350\" alt=\"A box that is entirely flat-shaded\" src=\"https://github.com/user-attachments/assets/1b0ff1bf-213f-42c1-a103-bfa0d6a364df\" />  <img width=\"640\" height=\"350\" alt=\"A cylinder with flat-shaded faces at its top and bottom\" src=\"https://github.com/user-attachments/assets/053980ea-9b1d-4819-b7ab-6f3e9d215827\" />  Actual result (4.5.beta1 and later):  <img width=\"640\" height=\"350\" alt=\"A box that is entirely smooth-shaded\" src=\"https://github.com/user-attachments/assets/dae970e4-6da6-49bc-9633-74f520072774\" />  <img width=\"640\" height=\"350\" alt=\"A cylinder that is entirely smooth-shaded\" src=\"https://github.com/user-attachments/assets/aff5ce98-d34d-46bf-8125-88e7512d7e00\" />  ### Steps to reproduce  1. Add a `CSGBox3D` to a scene, or any other CSG node which normally has sharp edges, such as the top and bottom of a `CSGCylinder3D`. 2. Through the CSG menu at the top of the 3D editor viewport, select Bake Mesh Instance. 3. Hide the original CSG node. The entire baked mesh will have smooth shaded normals, causing severe lighting issues on faces intended to be flat.  ### Minimal reproduction project (MRP)  [mrp-csg-baked-normals.zip](https://github.com/user-attachments/files/21064904/mrp-csg-baked-normals.zip)"
  },
  {
    "number": 108288,
    "title": "DAP: `request_seq` in responses is a float (regression)",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108288",
    "user": "fstxz",
    "labels": [
      "enhancement",
      "topic:gdscript",
      "topic:editor",
      "regression"
    ],
    "assignee": "",
    "comments_count": 9,
    "comments": [],
    "created_at": "2025-07-04T17:47:42Z",
    "updated_at": "2025-07-06T07:11:36Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": false,
    "body": "### Tested versions  Reproducible in 4.4, 4.5 beta 2 NOT reproducible in 4.3  ### System information  Godot v4.4.stable - Debian GNU/Linux 12 (bookworm) 12 on Wayland - X11 display driver, Multi-window, 1 monitor - Vulkan (Forward+) - dedicated AMD Radeon R7 360 Series (RADV BONAIRE) - Intel(R) Core(TM) i5-3450 CPU @ 3.10GHz (4 threads)  ### Issue description  I wanted to add DAP support to Zed code editor but encountered an issue. When Zed connects to Godot over TCP, it sends `initialize` command, Godot responds with a success, but Zed fail to parse it and prints `error: deserializing server message`, then disconnects. Upon inspection, it appears that the `request_seq` field in response is a float, but the DAP spec says it should be an integer.  Here are the RPC messages that Zed provides:  ``` // Send {   \"type\": \"request\",   \"seq\": 1,   \"command\": \"initialize\",   \"arguments\": {     \"clientID\": \"zed\",     \"clientName\": \"Zed\",     \"adapterID\": \"godot\",     \"locale\": \"en-US\",     \"linesStartAt1\": true,     \"columnsStartAt1\": true,     \"pathFormat\": \"path\",     \"supportsVariableType\": true,     \"supportsVariablePaging\": false,     \"supportsRunInTerminalRequest\": true,     \"supportsMemoryReferences\": true,     \"supportsProgressReporting\": false,     \"supportsInvalidatedEvent\": false,     \"supportsMemoryEvent\": false,     \"supportsArgsCanBeInterpretedByShell\": false,     \"supportsStartDebuggingRequest\": true,     \"supportsANSIStyling\": true   } } {   \"type\": \"request\",   \"seq\": 2,   \"command\": \"threads\",   \"arguments\": {} } // Receive {   \"body\": {     \"supportSuspendDebuggee\": true,     \"supportTerminateDebuggee\": true,     \"supportedChecksumAlgorithms\": [       \"MD5\",       \"SHA256\"     ],     \"supportsBreakpointLocationsRequest\": true,     \"supportsConfigurationDoneRequest\": true,     \"supportsEvaluateForHovers\": true,     \"supportsRestartRequest\": true,     \"supportsSetVariable\": true,     \"supportsTerminateRequest\": true,     \"supportsValueFormattingOptions\": true   },   \"command\": \"initialize\",   \"request_seq\": 1.0,   \"seq\": 1,   \"success\": true,   \"type\": \"response\" } // Send {   \"type\": \"request\",   \"seq\": 3,   \"command\": \"disconnect\",   \"arguments\": {     \"restart\": false,     \"terminateDebuggee\": true,     \"suspendDebuggee\": false   } } ```  `\"request_seq\": 1.0` is the issue. In Godot 4.3, this field has a value of `1`, but in Godot 4.4 and later it's `1.0`.  There are only two places where `request_seq` is set (that I could find). Here:  https://github.com/godotengine/godot/blob/3954b2459d2dd7ae75c6a39531869a28ad8a3d5e/editor/debugger/debug_adapter/debug_adapter_parser.cpp#L73  And here:  https://github.com/godotengine/godot/blob/3954b2459d2dd7ae75c6a39531869a28ad8a3d5e/editor/debugger/debug_adapter/debug_adapter_parser.cpp#L83  And the only place where `p_params[\"seq\"]` is set is here:  https://github.com/godotengine/godot/blob/3954b2459d2dd7ae75c6a39531869a28ad8a3d5e/editor/debugger/debug_adapter/debug_adapter_protocol.cpp#L117  And `seq` variable is an int, so I have no idea what the issue is.  UPD: here are zed's logs when using Godot 4.3:  <details>   <summary>Spoiler</summary>  ``` // Send {   \"type\": \"request\",   \"seq\": 1,   \"command\": \"initialize\",   \"arguments\": {     \"clientID\": \"zed\",     \"clientName\": \"Zed\",     \"adapterID\": \"godot\",     \"locale\": \"en-US\",     \"linesStartAt1\": true,     \"columnsStartAt1\": true,     \"pathFormat\": \"path\",     \"supportsVariableType\": true,     \"supportsVariablePaging\": false,     \"supportsRunInTerminalRequest\": true,     \"supportsMemoryReferences\": true,     \"supportsProgressReporting\": false,     \"supportsInvalidatedEvent\": false,     \"supportsMemoryEvent\": false,     \"supportsArgsCanBeInterpretedByShell\": false,     \"supportsStartDebuggingRequest\": true,     \"supportsANSIStyling\": true   } } {   \"type\": \"request\",   \"seq\": 2,   \"command\": \"threads\",   \"arguments\": {} } // Receive {   \"body\": {     \"supportSuspendDebuggee\": true,     \"supportTerminateDebuggee\": true,     \"supportedChecksumAlgorithms\": [       \"MD5\",       \"SHA256\"     ],     \"supportsBreakpointLocationsRequest\": true,     \"supportsConfigurationDoneRequest\": true,     \"supportsEvaluateForHovers\": true,     \"supportsRestartRequest\": true,     \"supportsSetVariable\": true,     \"supportsTerminateRequest\": true,     \"supportsValueFormattingOptions\": true   },   \"command\": \"initialize\",   \"request_seq\": 1,   \"seq\": 1,   \"success\": true,   \"type\": \"response\" } {   \"event\": \"initialized\",   \"seq\": 2,   \"type\": \"event\" } ```  </details>  ### Steps to reproduce  I don't have concrete steps to reproduce this issue as it will require installing Rust, building the [zed-gdscript](https://github.com/GDQuest/zed-gdscript) extension locally, installing it, etc. But if people who are familiar with Godot's DAP implementation know what might be the issue here, then maybe these steps won't be necessary. But if not, then I will update this section, but it will be lengthy.  ### Minimal reproduction project (MRP)  This is reproducible in new projects."
  },
  {
    "number": 108287,
    "title": "Fix immersive mode and virtual keyboard height issue on Android",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108287",
    "user": "syntaxerror247",
    "labels": [
      "bug",
      "platform:android",
      "topic:porting"
    ],
    "assignee": "",
    "comments_count": 9,
    "comments": [],
    "created_at": "2025-07-04T17:05:07Z",
    "updated_at": "2025-07-08T13:25:55Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Fixes https://github.com/godotengine/godot/issues/86663    This PR fixes the incorrect virtual keyboard height issue and adds support on API 29 and older.  Fixes all the known immersive and edge-to-edge mode issues."
  },
  {
    "number": 108286,
    "title": "ViewportTexture shader parameter breaks after project reload",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108286",
    "user": "lupuchard",
    "labels": [
      "bug",
      "confirmed",
      "topic:shaders"
    ],
    "assignee": "",
    "comments_count": 6,
    "comments": [],
    "created_at": "2025-07-04T16:13:56Z",
    "updated_at": "2025-07-06T02:00:33Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in v4.3.stable, v4.4.1.stable and v4.5.beta2  ### System information  Godot v4.5.beta2 - Linux Mint 22.1 (Xia) on X11 - X11 display driver, Multi-window, 2 monitors - Vulkan (Forward+) - dedicated AMD Radeon RX 6800 XT (RADV NAVI21) - AMD Ryzen 5 3600 6-Core Processor (12 threads) - 31.28 GiB memory  ### Issue description  Using a ViewportTexture as a shader parameter works until you reload the project, at which point it seems to be replaced with the broken purple pattern texture.  Working as intended: <img width=\"755\" height=\"378\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/6545cae3-d96f-4767-bc19-43c06281dcab\" /> <img width=\"343\" height=\"193\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/3b006bb2-12a6-47b2-95c0-30f83ed7c363\" />  After reload: <img width=\"744\" height=\"390\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/ba8840a6-b4a1-46c1-a4d7-bce68f24bd52\" />  ### Steps to reproduce  1. Create a SubViewport and put a Camera3D inside. 2. Create a quad MeshInstance3D and give it a new shader material with \"Local to Scene\" checked. 3. Add a shader script: ``` shader_type spatial; uniform sampler2D ScreenTexture; void vertex() { } void fragment() { \tALBEDO = texture(ScreenTexture, UV).rgb; } ``` 4. Set the Screen Texture shader parameter to a ViewportTexture, choose the SubViewport. 5. Reload the project.  ### Minimal reproduction project (MRP)  [viewporttexturetest.zip](https://github.com/user-attachments/files/21061379/viewporttexturetest.zip) To reproduce you'll first need to clear and replace the shader's texture parameter with a new ViewportTexture."
  },
  {
    "number": 108285,
    "title": "Clarify that Network Mode is not mandatory for plugins",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108285",
    "user": "timothyqiu",
    "labels": [
      "enhancement",
      "documentation"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-04T15:45:44Z",
    "updated_at": "2025-07-07T18:42:18Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "Make it clear that the Network Mode setting does not magically disable networking."
  },
  {
    "number": 108284,
    "title": "NavMap2D: check if obstacles have avoidance enabled",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108284",
    "user": "dmlary",
    "labels": [
      "bug",
      "topic:navigation",
      "topic:2d"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-04T15:33:08Z",
    "updated_at": "2025-07-07T15:14:14Z",
    "closed_at": "2025-07-07T15:14:05Z",
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "In NavMap2D::_update_rvo_obstacles_tree() check if the NavObstacle2D has avoidance enabled before adding it to the tree.    This is the 2D fix for #108259    <!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  "
  },
  {
    "number": 108283,
    "title": "Fragment shader compilation internally failed on Compatibility with `opengl3_angle`",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108283",
    "user": "gongpha",
    "labels": [
      "bug",
      "topic:shaders"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-04T15:28:27Z",
    "updated_at": "2025-07-04T16:15:54Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible since 4.2.2 (include 9b22b4153), Crash in 4.1.1 and earlier   ### System information  Windows 11 - Compatibility - Using Device: Google Inc. (NVIDIA) - ANGLE (NVIDIA, NVIDIA GeForce GTX 1650 (0x00001F9D) Direct3D11 vs_5_0 ps_5_0, D3D11-32.0.15.6603)  ### Issue description  When trying to compile the shader below while using Compatibility mode with driver = `opengl3_angle` ```gdshader shader_type spatial;  uniform sampler2D tex[2];  void fragment() { \tint idx = 0; \tALBEDO = texture(tex[idx], UV).xyz; } ```  Godot will dump the entire internal shader into the log with error messages : ``` ( ... gigantic 4000+ line shader code ... ) ERROR: SceneShaderGLES3: Fragment shader compilation failed: ERROR: 0:1409: '[' : array index for samplers must be constant integral expressions     at: _display_error_with_code (drivers\\gles3\\shader_gles3.cpp:259) ERROR: Method/function failed.    at: ShaderGLES3::_compile_specialization (drivers\\gles3\\shader_gles3.cpp:401) ```  Here's the error lines : ``` 1400:   if (bool(model_flags & uint(FLAGS_NON_UNIFORM_SCALE))) { 1401:           model_normal_matrix = transpose(inverse(mat3(model_matrix))); 1402:   } else { 1403:           model_normal_matrix = mat3(model_matrix); 1404:   } 1405: 1406:   { 1407:   { 1408:           int m_idx=0; 1409:           albedo=texture(m_tex[m_idx], uv_interp).xyz; 1410:   } 1411:   } ```  While I understand that indexing sampler arrays is only allowed using an integral constant expression in GLSL 3.3, the error messages should display at parse time in the shader editor.  Additionally, the surfaces from this shader will not be rendered at all.  ### Steps to reproduce  Use Compatibility mode with driver `opengl3_angle` and compile the shader code above.  ### Minimal reproduction project (MRP)  [angle_shader.zip](https://github.com/user-attachments/files/21060576/angle_shader.zip)"
  },
  {
    "number": 108282,
    "title": "Shader Editor panel opens by default when launching a project",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108282",
    "user": "aitorciki",
    "labels": [
      "bug",
      "topic:editor",
      "confirmed",
      "regression"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-04T15:28:25Z",
    "updated_at": "2025-07-04T21:27:56Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible: 4.5.beta2 - Not reproducible: 4.5.beta1 and before  ### System information  Godot v4.5.beta2 - macOS Sequoia (15.5.0) - Multi-window, 1 monitor - Metal (Forward+) - integrated Apple M2 Pro (Apple8) - Apple M2 Pro (10 threads) - 16.00 GiB memory  ### Issue description  Since 4.5.beta2, opening a project will result in the Shader Editor panel opening by default, even if it was closed when last closing the editor.  The panel auto-opens if `editors/shader_editor/behavior/files/restore_shaders_on_load` is set to `true`, and if at least one shader file was open during the last session.  In previous versions (4.5.beta1 and before), this setting would result in the opened shaders to still be available in the panel file list, but the panel wouldn't automatically open when launching a project.  ### Steps to reproduce  - Edit a shader in the Shader Editor panel. - Close the Shader Editor panel. - Close Godot. - Launch the project that was just closed. - The Shader Editor panel will open even if it was closed in the previous session.  ### Minimal reproduction project (MRP)  This is an empty project only including a shader file. Import the project and edit the gdshader file by double-clicking on it. Close the Shader Editor panel then Godot, no need to save the project. On next launch the Shader Editor panel will reopen.  [shader-editor-repro.zip](https://github.com/user-attachments/files/21060838/shader-editor-repro.zip)"
  },
  {
    "number": 108281,
    "title": "NavMap3D: check if obstacles have avoidance enabled",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108281",
    "user": "dmlary",
    "labels": [
      "bug",
      "topic:navigation",
      "topic:3d",
      "cherrypick:4.3",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 4,
    "comments": [],
    "created_at": "2025-07-04T15:19:18Z",
    "updated_at": "2025-07-07T15:14:12Z",
    "closed_at": "2025-07-07T15:14:05Z",
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "In `NavMap3D::_update_rvo_obstacles_tree_2d()` check if the `NavObstacle3D` has avoidance enabled before adding it to the tree.    fixes #108259    <!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  "
  },
  {
    "number": 108280,
    "title": "Fix TextServer::shaped_text_get_grapheme_bounds() returning the bounds of the wrong grapheme",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108280",
    "user": "bs-mwoerner",
    "labels": [
      "bug",
      "archived",
      "topic:gui"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-04T15:00:10Z",
    "updated_at": "2025-07-04T16:43:29Z",
    "closed_at": "2025-07-04T16:33:19Z",
    "milestone": "",
    "is_pull_request": true,
    "body": "Fixes #108269.    A text of \"abc\" produces three glyphs with start/end pairs of (0, 1), (1, 2), and (2, 3), so apparently `end` is exclusive. This means that this condition for when the correct position is reached leads to an off-by-one error:    https://github.com/godotengine/godot/blob/9b22b41531c82132732fda0f9818c5709c2587bc/servers/text_server.cpp#L1635    If `p_pos == 1` (we want the bounds of character index 1) and `glyph[0].start == 0` and `glyph[0].end == 1`, then this will already be true for `i == 0` and return the position of the first glyph instead of the second.    This is a rather fundamental change for something that's been like this for four years, so maybe there's quite a bit of code out there that compensates for this behavior and would produce incorrect results if we fix it? Then again, just having it return incorrect values forever doesn't feel quite right either.    *Edit:* Oh, wow, this change fails *all* the test cases. 😳 Maybe it was actually inteded that way and the better route would be to document that this function and functions that use it use 1-based indexing?    ```c++  \t\t\tSEND_GUI_MOUSE_BUTTON_EVENT(text_edit->get_rect_at_line_column(1, 0).get_center(), MouseButton::LEFT, MouseButtonMask::LEFT, Key::NONE);  \t\t\t// Add (2,0) to bring it past the center point of the grapheme and account for integer division flooring.  \t\t\tSEND_GUI_MOUSE_MOTION_EVENT(text_edit->get_rect_at_line_column(1, 5).get_center() + Point2i(2, 0), MouseButtonMask::LEFT, Key::NONE);  \t\t\tCHECK(text_edit->has_selection());  \t\t\tCHECK(text_edit->get_selected_text() == \"for s\");  ```    This test case clicks at the center of character 0, drags a bit past the center of character 5, and expects to then have 5 characters selected. Is that what we want? I'm confused.    ```  012345  for se  ```      <!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  "
  },
  {
    "number": 108279,
    "title": "Unpredictable scene tiles initialization behavior when using 'update_internals' method",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108279",
    "user": "MadeScientist",
    "labels": [
      "discussion",
      "topic:2d"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-04T14:47:58Z",
    "updated_at": "2025-07-04T21:11:21Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in: 4.4.1stable, 4.5beta1, 4.5beta2  ### System information  Godot v4.5.beta1 - Windows 10 (build 19045) - Multi-window, 1 monitor - Vulkan (Mobile) - dedicated NVIDIA GeForce RTX 4070 (NVIDIA; 32.0.15.7628) - 12th Gen Intel(R) Core(TM) i5-12490F (12 threads) - 31.81 GiB memory  ### Issue description  When i using scene tiles to test something, I have encountered many problems that most related to initialization sequence of scene tiles. In this test,  i want to mark the order in which scene tiles are added as TileMapLayer's child nodes.  I use the following code to test: ``` # tile_map_layer.gd func _ready() -> void: \tfor y in 3: \t\tfor x in 3: \t\t\tset_cell(Vector2i(x, y), 0, Vector2i(0, 0), 1) # the scene tile template is just a label \t \tupdate_internals() # to ensure child nodes have added \t \tvar i = 1 \tfor child_cell in get_children(): \t\tchild_cell.text = str(i) \t\ti += 1 ```  1. Scenario 1: TileMapLayer itself has no initial tiles The result is:  <img width=\"122\" height=\"130\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/9357e109-2bb4-47ab-b76c-daa097ea6451\" />  2. Scenario 2: TileMapLayer has some initial scene tiles, at this point, some issues arose For example, initial scene tiles like:  <img width=\"231\" height=\"225\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/1a8ca029-2011-44e3-bb1a-c9637218969d\" />  The result is:  <img width=\"124\" height=\"131\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/161a5900-f4a3-4d69-86c7-896c5092e9cb\" />  At this point, it is relatively easy to understand because the initial block is first added as a child node, so it's order is 1. However, if i add `clear()` before set_cell, it's strange that there is still no change.  The code at this moment looks like this:  <img width=\"771\" height=\"489\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/b5e08a1a-7638-464b-bd04-4e0eff75244e\" />  So, i am starting to doubt if `clear()` didn't work, then i added another `update_internals()` method after using `clear()` and then I discovered a more strange initialization sequence that makes me very confused.  Strange initialization sequence:  <img width=\"220\" height=\"220\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/9e2c9480-939e-4e55-b029-62342499e007\" />  I'm not sure if I accurately described my problem, but I feel like what happened behind `update_internals()` and the  initialization sequence of scene tiles were not explained clearly in the documentation, even though #108166 has been merged.  Maybe the following demonstration more easier to understand(not sure):  https://github.com/user-attachments/assets/0dff5548-5d2f-439f-8319-11aa5cbd5ca9  ### Steps to reproduce  1. Run the project with no initial scene tiles in TileMapLayer, the result is predictable 2. Add a scene tile at some position like Vector2i(1, 1), then run the project and the result is predictable 3. Uncommenting the `clear()` method, it's strange that the result is still same as 2 4. Uncommenting the `update_internals()` following closely after `clear()`, check the result  ### Minimal reproduction project (MRP)  [scene-tiles.zip](https://github.com/user-attachments/files/21060141/scene-tiles.zip)"
  },
  {
    "number": 108278,
    "title": "Filtering the SceneTree doesn't show nodes in SceneTree order",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108278",
    "user": "Zupami",
    "labels": [
      "bug",
      "topic:editor"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-04T14:40:58Z",
    "updated_at": "2025-07-04T20:11:04Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Reproducible in 4.4.1  Filtering used to show the entire path of a node in 3.5.2, now it only shows the matching nodes themselves.  ### System information  Godot v4.4.1.stable.mono - Windows 10 (build 19045) - Multi-window, 2 monitors - Vulkan (Forward+) - dedicated NVIDIA GeForce GTX 1060 6GB (NVIDIA; 32.0.15.6590) - Intel(R) Core(TM) i5-10600K CPU @ 4.10GHz (12 threads)  ### Issue description  When filtering the SceneTree to show only nodes with a certain name, those nodes aren't shown in the order they have in the SceneTree, but some other order. I have not been able to ascertain the order in which they are shown.  In the following image, the parent of the selected node is placed in the SceneTree before the parents of the other two nodes, but appears after them in the filtered view.  ![Image](https://github.com/user-attachments/assets/cda6aa5a-4e4c-4fc2-a5e4-4f3e727549e0)  ### Steps to reproduce  Paste some nodes with similar names in parent nodes and shuffle these parent nodes around. Then filter on the name of the child nodes. They will not show up in the same order as they appear in the SceneTree.  ### Minimal reproduction project (MRP)  [filterissuemrp.zip](https://github.com/user-attachments/files/21060128/filterissuemrp.zip)"
  },
  {
    "number": 108277,
    "title": "NavigationAgent3D: fix for avoidance stored_y_velocity",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108277",
    "user": "dmlary",
    "labels": [
      "bug",
      "topic:navigation",
      "topic:3d",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-04T14:17:38Z",
    "updated_at": "2025-07-04T15:16:27Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "`stored_y_velocity` was being reset when the navigation agent finished navigating.  Also, it wasn't being stored when navigation was not ongoing.  As a result, gravity could not be applied to navigation agents with avoidance enabled.    In this commit, I made two changes.  Only reset `stored_y_velocity` in `NavigationAgent3D::_transition_to_navigation_finished()` if `use_3d_avoidance` is set.  And save off the y velocity in `NavigationAgent3D::set_velocity()`.    fixes #108252    <!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  "
  },
  {
    "number": 108276,
    "title": "[Web] Restrict rendering method selection",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108276",
    "user": "AThousandShips",
    "labels": [
      "bug",
      "topic:rendering",
      "cherrypick:4.3",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-04T13:30:14Z",
    "updated_at": "2025-07-04T17:48:56Z",
    "closed_at": "2025-07-04T17:41:40Z",
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Currently only the compatibility method is supported, this ensures only it can be selected.    This won't prevent manually changing this, but it prevents accidentally picking the wrong one, the solution (like the comment already there mentions) is a bit hacky but until we improve some of the options on Web this should suffice    * Fixes: https://github.com/godotengine/godot/issues/108226    <!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  "
  },
  {
    "number": 108275,
    "title": "CSGCombiner3D baked mesh does not take on any materials",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108275",
    "user": "vyntrix",
    "labels": [
      "bug",
      "topic:editor",
      "confirmed",
      "regression",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-04T13:04:32Z",
    "updated_at": "2025-07-07T15:14:11Z",
    "closed_at": "2025-07-07T15:14:08Z",
    "milestone": "4.5",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in: 4.5.beta1, 4.5.beta2 - Not reproducible in: 4.4.stable  ### System information  Godot v4.4.1.stable (fb1cdca95) - Windows 11 (build 26100) - Multi-window, 2 monitors - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 2060 (NVIDIA; 32.0.15.7270) - 13th Gen Intel(R) Core(TM) i5-13400F (16 threads)  ### Issue description  So I tried the new Godot 4.5 Beta and noticed that apparently the beaconing of the CSGCombiner3D is bugged. Before in version 4.4 everything worked great. When I baked a CSGCombiner3D all materials were taken from the children nodes. Now the material is simply empty.  https://github.com/user-attachments/assets/ac347af6-719f-4768-ae2f-9dd1d9309058  ### Steps to reproduce  In a scene create a CSGCombiner3D and create a few CSG objects with different materials in this node. In the toolbar at the top while you have selected the CSGCombiner3D click \"CSG\" and then \"Bake Mesh Instance\" You should now have a MeshInstance3D without material.  ### Minimal reproduction project (MRP)  [mrp-csgcombiner.zip](https://github.com/user-attachments/files/21058531/mrp-csgcombiner.zip)"
  },
  {
    "number": 108274,
    "title": "Handle of propertie's sliders in Animation Tree editor does not follow the cursor depending on scale",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108274",
    "user": "andich-xyz",
    "labels": [
      "bug",
      "topic:editor",
      "topic:animation"
    ],
    "assignee": "",
    "comments_count": 4,
    "comments": [],
    "created_at": "2025-07-04T12:16:13Z",
    "updated_at": "2025-07-04T13:04:24Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": false,
    "body": "### Tested versions  Tested in Godot 4.4.1, Godot 4.5.beta2  ### System information  Godot v4.5.beta2 - Windows 11 (build 26100) - Multi-window, 1 monitor - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 4090 (NVIDIA; 32.0.15.7602) - AMD Ryzen 9 7950X3D 16-Core Processor (32 threads) - 63.16 GiB memory  ### Issue description  Previously there was a bug with detached handles of the sliders in Animation Tree editor where the handle was offsetting from the actual position in response of changing the view zoom. This bug was fixed, but handles are still not respecting the view zoom when being dragged.  The expected behavior is when grabbing the handle with the mouse cursor at a zoom different from 1:1 the handle should follow the cursor as it does at the zoom of 1:1.   Right now the handle is moving slower than the cursor when zoomed in and moves faster than the cursor when zoomed out.  https://github.com/user-attachments/assets/6ec3ca7b-26bd-4265-8986-fa7d4982e69c  ### Steps to reproduce  1. Create scene and add AnimationPlayer node, AnimationTree Node 2. Set Tree Root property of AnimationTree node to be AnimationNodeBlendTree 3. Set Anim Player property of AnimationTree node to be AnimationPlayer node 4. Select AnimationTree node and open AnimationTree editor view from the bottom panel 5. In the AnimationTree editor add Blend2 or any other node with property range  6. Grab the handle of the slider and try changing the value on different zoom levels  ### Minimal reproduction project (MRP)  N/A"
  },
  {
    "number": 108273,
    "title": "Ambient sky cubemap array bleeds colors",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108273",
    "user": "Ivorforce",
    "labels": [
      "bug",
      "topic:rendering",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 7,
    "comments": [],
    "created_at": "2025-07-04T11:32:29Z",
    "updated_at": "2025-07-06T11:04:32Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Reproducible in Godot 4.5-beta2  ### System information  Godot v4.5.beta2 - macOS Sequoia (15.3.0) - Multi-window, 1 monitor - Metal (Forward+) - integrated Apple M1 Max (Apple7) - Apple M1 Max (10 threads) - 32.00 GiB memory  ### Issue description  The sky colors / irradiance are incorrect with the cubemap array implementation. It is visually subtle, so it's possible nobody noticed this yet. But there is _significant_ color bleed. In practice, it makes the irradiance map very washed out, and creates incorrect lighting effects.  Setting the scene, I have a sky with all-blue top and all-green bottom hemispheres:  <img width=\"470\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/761572ba-d126-4c28-bc10-b85544f8c0bc\" />  With this setup, the very top of the sphere should be affected only by blue irradiance (the bottom only by green):  <img width=\"352\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/9265a9fe-240e-4871-bc13-0293a016b7a5\" />  However, looking at the top of the sphere, this is not the case. The actual color is more like 0.5 green (0.8 blue), so there's _significant bleed_. I would have expected the color to be 0 green:  <img width=\"674\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/e8e4712a-abbb-4416-b407-8bf9a802c23e\" />  Disabling `rendering/reflections/sky_reflections/texture_array_reflections` (nearly) fixes the problem. In this configuration, we change to 0.047 green (0.87 blue):  <img width=\"474\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/de47bf06-ca36-4d18-a6a1-6b172503c85d\" />  Unfortunately, the result is also very splotchy. I gather this problem is planned to be addressed by https://github.com/godotengine/godot/pull/108127.  Another way to mitigate the issue is to increase the number of ggx samples (`rendering/reflections/sky_reflections/ggx_samples`). Increasing it to 256 (max) improves the ratio of green to 0.21 green (0.87 blue). This is a lot better than 0.5 green, but a lot worse than the desired 0 green:  <img width=\"649\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/74be992f-3b19-4289-8864-c37e033e4254\" />  For reference, @lander-vr rendered the scene using Blender Cycles [below](https://github.com/godotengine/godot/issues/108273#issuecomment-3036752665), which produces the expected look. This can be used as ground truth. Mathematically, the expected colors with this sky are `blue = (cos(alpha) + 1) / 2`, `green = 1 - blue` (I think). It can be recreated with this shader:  ```glsl \tvec4 normal_world = INV_VIEW_MATRIX * vec4(NORMAL, 1); \tfloat dot_product = clamp(dot(normalize(normal_world.xyz), vec3(0, 1, 0)), -1.0, 1.0); \tfloat angle = acos(dot_product); \tfloat from_top = (cos(angle) + 1.0) * 0.5; \tIRRADIANCE = vec4(0, 1.0 - from_top, from_top, 1); ```  <img width=\"563\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/127ce2da-6b38-4a28-98ad-ee77bbd30c03\" />  ### Steps to reproduce  - New project - Add `Node3D` and `CSGSphere` child - Add `WorldEnvironment` from preview, disable 'preview sunlight' - Configure sky top and horizon to `rgb(0, 0, 255)` and ground bottom and horizon to `rgb(0, 255, 0)`. - Et voila. Play with configurations to see what affects the problem.  ### Minimal reproduction project (MRP)  [sky-bleed.zip](https://github.com/user-attachments/files/21056447/sky-bleed.zip)  (remember to disable 'preview sunlight' on load)"
  },
  {
    "number": 108272,
    "title": "Wrong runtime path formatting on Windows for Meta XR Simulator",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108272",
    "user": "alcy",
    "labels": [
      "bug",
      "needs testing",
      "topic:xr"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-04T11:25:54Z",
    "updated_at": "2025-07-04T11:29:10Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in: 4.4.1 (stable)    ### System information  Windows 11 - Godot 4.4.1   ### Issue description  Setting up the Meta XR Simulator in Godot 4.4.1 doesn't work because by default the Runtime Path for Meta XR Simulator has forward slashes instead of backslashes - this doesn't work on Windows. Correcting this manually to replace the forward slashes with backslashes makes it work.   ### Steps to reproduce  1. Project -> Tools -> Configure Meta XR Simulator  2. Select the path, done. 3. Meta XR Simulator doesn't appear in the dropdown.  Steps to fix: 1. Editor -> Editor Settings -> OpenXR -> Runtime Paths 2. Modify the Meta XR Simulator path by replacing forward slashes with backslashes. 3. Meta XR Simulator appears in the dropdown and works as expected.  ### Minimal reproduction project (MRP)  A blank project should be fine. "
  },
  {
    "number": 108271,
    "title": "Class docs: Fix ReflectionProbe note regarding Compatibility renderer support",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108271",
    "user": "protam12",
    "labels": [
      "enhancement",
      "documentation",
      "cherrypick:4.3",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-04T11:02:55Z",
    "updated_at": "2025-07-05T23:05:01Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "<!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  Right now, the class description states:    > **Note:** Reflection probes are only supported in the Forward+ and Mobile rendering methods, not Compatibility.    This has been fixed in Godot 4.3 ( #88056 ) and the documentation page has been [updated](https://github.com/godotengine/godot-docs/pull/10830), but the class page remains unfixed. This PR aims to fix this by changing the third paragraph in the class page:    > **Note:** Reflection probes are only supported in the Forward+ and Mobile rendering methods, not Compatibility. When using the Mobile rendering method, only 8 reflection probes can be displayed on each mesh resource. Attempting to display more than 8 reflection probes on a single mesh resource will result in reflection probes flickering in and out as the camera moves.    to this:    > **Note:** When using the Mobile rendering method, only 8 reflection probes can be displayed on each mesh resource, while the Compatibility rendering method only supports up to 2 reflection probes on each mesh. Attempting to display more than 8 reflection probes on a single mesh resource using the Mobile renderer will result in reflection probes flickering in and out as the camera moves, while the Compatibility renderer will not render any additional probes if more than 2 reflection probes are being used.    "
  },
  {
    "number": 108270,
    "title": "Crashes and engine slowdown when using shaders with documentation comments",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108270",
    "user": "cashew-olddew",
    "labels": [
      "bug",
      "topic:editor",
      "confirmed",
      "topic:shaders",
      "performance"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [],
    "created_at": "2025-07-04T08:49:14Z",
    "updated_at": "2025-07-04T20:23:14Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproductible on 4.4.1.stable  ### System information  Windows 11 - Godot 4.4.1.stable - Vulkan (Forward+)  ### Issue description  Using documentation comments (`/** */`) for shader parameters makes the engine noticeably slower, with high amount of comments even leading to crashes. This is especially visible while inside the Animation tab of an AnimationPlayer.  ### Steps to reproduce  1. Open the MRP The MRP contains 3 shaders: - `test_fast`: no documentation - `test_slow`: some documentation - `test_crash`: a lot of documentation  ![Image](https://github.com/user-attachments/assets/0aed522b-d560-42b6-aa7a-54a4ca5d3a28)  2. Create/Open the AnimationPlayer, and make sure it contains at least one animation (so that the editor keyframes are visible)  ![Image](https://github.com/user-attachments/assets/ebc14c6e-7644-4ec0-af53-a2d0edae0c53)  3. Attach `test_fast` to a CanvasItem. Notice how swapping between the CanvasItem and the AnimationPlayer happens seamlessly. 4. Attach `test_slow` to a CanvasItem. This time, swapping between the CanvasItem and the AnimationPlayer creates a noticeable delay. 5. Attach `test_crash` to a CanvasItem. Swapping between the CanvasItem and the AnimationPlayer crashes Godot (or is extremely slow).   ### Minimal reproduction project (MRP)  [shader-docs-mrp.zip](https://github.com/user-attachments/files/21053858/shader-docs-mrp.zip)"
  },
  {
    "number": 108269,
    "title": "`TextEdit.get_pos_at_line_column` returns wrong value",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108269",
    "user": "jinyangcruise",
    "labels": [
      "bug",
      "archived",
      "topic:gui"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-04T08:46:09Z",
    "updated_at": "2025-07-04T16:16:50Z",
    "closed_at": "2025-07-04T16:16:37Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in v4.5.beta2.official [e1b4101e3]  ### System information  Godot v4.5.beta2 - Windows 11 (build 26100) - Multi-window, 1 monitor - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 3060 Ti (NVIDIA; 32.0.15.7680) - 13th Gen Intel(R) Core(TM) i5-13600KF (20 threads) - 47.84 GiB memory  ### Issue description  There are 2 bugs in `get_pos_at_line_column`. 1. column `1` returns the same value as column `0` 2. column `N` returns the value which belongs to `N-1` Maybe this is 1 bug.  In this picture, there should be a white vertical line at the position of character `a`, a yellow line at the position of character `b`, a green line at the position of character `c`. But obviously the position is wrong. The printed log also verified this.  ![Image](https://github.com/user-attachments/assets/0b5f30fc-51c9-46d9-ad38-14935def50a4)  ### Steps to reproduce  1. Open MRP and see the code and run it.  ### Minimal reproduction project (MRP)  [test_text_edit_2025-07-04_16-37-22.zip](https://github.com/user-attachments/files/21053828/test_text_edit_2025-07-04_16-37-22.zip)"
  },
  {
    "number": 108268,
    "title": "Expose OS.disable_crash_handler() for extensions",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108268",
    "user": "limbonaut",
    "labels": [
      "feature proposal",
      "topic:gdextension"
    ],
    "assignee": "",
    "comments_count": 4,
    "comments": [],
    "created_at": "2025-07-04T07:42:15Z",
    "updated_at": "2025-07-07T10:20:52Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "Allow disabling crash handler from GDExtension API.    We’ve stumbled upon a bit of a problem in [Sentry SDK](https://github.com/getsentry/sentry-godot). It seems that Linux builds aren’t shutting down properly when they crash. The process gets stuck running indefinitely after the crash. This PR would allow us to unregister Godot's crash handler and use ours instead.    We'd really appreciate if this could be added to version 4.5. It can be a real pain in some scenarios, like dedicated servers not automatically restarted because the process gets stuck. It's a relatively simple change.  "
  },
  {
    "number": 108267,
    "title": "SpringBoneSimulator3D Usability and API Pain Points for Mass Physics Bone Setup",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108267",
    "user": "ModuleCode",
    "labels": [
      "archived"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-04T07:06:19Z",
    "updated_at": "2025-07-04T10:06:00Z",
    "closed_at": "2025-07-04T10:05:56Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  I’m encountering significant usability and API issues when trying to use the SpringBoneSimulator3D node to simulate “soft bones” (like skirt physics) on a character in Godot 3D. Specifically, setting up a large number of chains is problematic.  The current Inspector workflow for configuring SpringBoneSimulator3D properties is highly inefficient, especially when dealing with numerous chains (dozens, potentially even more). Properties overlap heavily visually within the node.  ### System information  Windows11 v4.4.1.stable.official [49a5bc7b6] GTX1650  ### Issue description  I’m encountering significant usability and API issues when trying to use the SpringBoneSimulator3D node to simulate “soft bones” (like skirt physics) on a character in Godot 3D. Specifically, setting up a large number of chains is problematic.  The current Inspector workflow for configuring SpringBoneSimulator3D properties is highly inefficient, especially when dealing with numerous chains (dozens, potentially even more). Properties overlap heavily visually within the node.  ![Image](https://github.com/user-attachments/assets/2239eb10-d313-4653-aa02-368e1bc828a3) The core problem is that ​​selecting and editing each individual SpringBoneSimulator3D node is cumbersome , particularly once you have many of them selected in the editor. ​​Desired Improvement:​​ A workflow analogous to Skeleton3D would be far better, where you select physics chains/bones within a single parent node/UI and edit their properties in bulk below. Similar to this  ![Image](https://github.com/user-attachments/assets/2bc8a651-bc1f-4d34-a768-f0e5a57b0f00)  ### Steps to reproduce  N/A  ### Minimal reproduction project (MRP)  N/A"
  },
  {
    "number": 108266,
    "title": "Custom resources with overridden constructors (with params) become null at runtime when exported",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108266",
    "user": "migmoog",
    "labels": [
      "enhancement",
      "discussion",
      "topic:gdscript",
      "topic:editor"
    ],
    "assignee": "",
    "comments_count": 4,
    "comments": [],
    "created_at": "2025-07-04T04:38:21Z",
    "updated_at": "2025-07-04T12:58:42Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Found in 4.4.1 stable  - Reproducible in 4.4 stable, 4.5 beta2   ### System information  Windows 11 - Godot 4.4.1 stable  ### Issue description  Exporting a custom resource in the editor turns it to null at runtime when its constructor is overridden. This applies to overridden constructors with parameters, but not parameterless ones. ```gdscript  # turns to null at runtime, regardless of type or annotations func _init(p_i: int) -> void: \tpass  # this however causes no null func _init() -> void: \tpass ```  ### Steps to reproduce  1. Create a script that extends `Resource` with a custom class name ```gdscript class_name CustomResource extends Resource  func _init(p: int) -> void:   pass ``` 2. In another node's script in a scene, export a var with the custom resource type. 3. create a custom resource for the exported var in the editor 4. in the ready function of the node add an assertion to check if it's null ```gdscript extends Node2D  @export var cr: CustomResource  func _ready() -> void:   assert(cr != null) ```    ### Minimal reproduction project (MRP)  [mrp_resource_overridden_constructor.zip](https://github.com/user-attachments/files/21050393/mrp_resource_overridden_constructor.zip)"
  },
  {
    "number": 108265,
    "title": "NavigationAgent3D: finish closer to the final waypoint when target_desired_distance < path_desired_distance",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108265",
    "user": "dmlary",
    "labels": [
      "bug",
      "topic:navigation",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-04T04:30:39Z",
    "updated_at": "2025-07-04T16:29:22Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "When NavigationAgent3D.target_desired_distance is less than NavigatinAgent3D.path_desired_distance, use the smaller value in NavigationAgent3D::_is_within_waypoint_distance() when matching the last waypoint.  This allows the agent to get closer to the final position while still allowing flexibility when matching waypoints.    Prior to this change, the navigation would finish outside the target_desired_distance when it was less than path_desired_distance.    fixes #108261    <!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  "
  },
  {
    "number": 108264,
    "title": "Fix `PROPERTY_HINT_GROUP_ENABLE` display on hover",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108264",
    "user": "lodetrick",
    "labels": [
      "bug",
      "topic:editor",
      "regression"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-04T04:23:41Z",
    "updated_at": "2025-07-07T15:14:57Z",
    "closed_at": "2025-07-07T15:14:05Z",
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Fixes #108257    This PR fixes a regression by making it so unchecked sections do not show the hovered highlight. This PR syncs the `gui_input()`'s understanding of the hover with the `NOTIFICATION_DRAW`, as there were issues with the hover hint becoming out of sync."
  },
  {
    "number": 108263,
    "title": "Baked NavigationMesh fails with \"Navigation region synchronization error\"; NavigationAgent3D unable to navigate",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108263",
    "user": "dmlary",
    "labels": [
      "discussion",
      "documentation",
      "topic:navigation",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 4,
    "comments": [],
    "created_at": "2025-07-04T04:12:47Z",
    "updated_at": "2025-07-04T22:01:03Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Fails on v4.5.beta.custom_build [9b22b4153], v4.5.beta2.official [e1b4101e3] - Works on v4.4.1.stable.official [49a5bc7b6]  ### System information  Godot v4.5.beta2 - macOS Sonoma (14.7.6) - Multi-window, 2 monitors - Metal (Forward+) - integrated Apple M3 Max (Apple9) - Apple M3 Max (16 threads) - 64.00 GiB memory  ### Issue description  A NavigationMesh that worked on 4.4.1 stopped working on the 4.5 betas, and on master build.  Also fails when I rebake the navmesh in 4.5 beta.  The Navigation agent is able to only navigate to the edge of its navigation region, and no farther.  The only error I get is: > E 0:00:00:335   _build_step_find_edge_connection_pairs: Navigation region synchronization error. More than 2 edges tried to occupy the same map rasterization space. This is a logical error in the navigation mesh caused by overlap or too densely placed edges.   <C++ Error>   Condition \"pair.size >= 2\" is true.   <C++ Source>  modules/navigation_3d/3d/nav_region_builder_3d.cpp:212 @ _build_step_find_edge_connection_pairs()  Given that this is NavigationMesh is baked by the NavigationRegion3D with default parameters, I expect it to generate a compatible NavigationMesh.  In 4.5.beta2:  <img width=\"811\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/eaf776be-52ab-41c2-b760-5606743f2082\" />  In 4.4.1:  <img width=\"688\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/1bba752e-4108-4b2f-b390-459512fd6a41\" />  In 4.4.1, the following error is generated, but the NavMesh works: >   ERROR: modules/navigation/3d/nav_map_builder_3d.cpp:151 - Navigation map synchronization error. Attempted to merge a navigation mesh polygon edge with another already-merged edge. This is usually caused by crossing edges, overlapping polygons, or a mismatch of the NavigationMesh / NavigationPolygon baked 'cell_size' and navigation map 'cell_size'. If you're certain none of above is the case, change 'navigation/3d/merge_rasterizer_cell_scale' to 0.001.  The `cell_sizes` for both things are the Godot default in the MRP.  ### Steps to reproduce  Open the MRP: *  (optional) rebake the NavMesh  * run the default scene * click the \"Start Navigation\" button  The player capsule should be able to move to the target marker, but the path received by the NavigationAgent does not extend past the initial NavMesh region.  ### Minimal reproduction project (MRP)  Same MRP from #108261; I was trying to test a fix on master.  [navigation-agent-finishes-early-issue.zip](https://github.com/user-attachments/files/21050190/navigation-agent-finishes-early-issue.zip)"
  },
  {
    "number": 108262,
    "title": "Fix crash in C# bindings generator with bad enum documentation XML",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108262",
    "user": "aaronfranke",
    "labels": [
      "bug",
      "topic:dotnet",
      "crash",
      "cherrypick:4.3",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-04T03:56:00Z",
    "updated_at": "2025-07-07T18:26:15Z",
    "closed_at": "2025-07-07T15:14:05Z",
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "I had a bad `[enum ...]` in my documentation XML. This was crashing the C# bindings generator, because the code was running `p_target_itype->is_intentionally_ignored` without checking if `p_target_itype` is null or not.    Note that these functions have code paths for dealing with a null `p_target_itype`, so it seems to not be a case where we can simply have guard clauses. In most of the functions calling `is_intentionally_ignored` the code already checked for a null `p_target_itype` and used a different code path, but this was missing only for the error case of enums.    I've marked this as cherrypick for 4.3 and 4.4. The bug seems to also exist in 4.2 and earlier but the code is a bit different so the cherrypick can't be done automatically, and I don't know if it's worth the effort for such an old branch."
  },
  {
    "number": 108261,
    "title": "NavigationAgent3D finishes prematurely on dense NavigationMeshes when target_desired_distance < path_desired_distance",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108261",
    "user": "dmlary",
    "labels": [
      "bug",
      "topic:navigation",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-04T03:03:43Z",
    "updated_at": "2025-07-04T09:54:26Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible on v4.4.1.stable.official [49a5bc7b6]  ### System information  Godot v4.4.1.stable - macOS Sonoma (14.7.6) - Multi-window, 2 monitors - Metal (Forward+) - integrated Apple M3 Max (Apple9) - Apple M3 Max (16 threads)  ### Issue description  When using a NavigationAgent3D to navigate a relatively dense NavigationMesh, with `NavigationAgent3D.target_desired_distance` significantly lower than `NavigationAgent3D.path_desired_distance`, the NavigationAgent3D can prematurely finish navigating far outside of the `target_desired_distance`.  The issue is in `NavigationAgent3D::_is_within_waypoint_distance()`, it only compares the waypoint against `path_desired_distance`, even when evaluating for the last waypoint. https://github.com/godotengine/godot/blob/9b22b41531c82132732fda0f9818c5709c2587bc/scene/3d/navigation/navigation_agent_3d.cpp#L915-L919  The following change handles the case, and results in the navigation finishing significantly closer to the final waypoint. ```diff @@ -854,7 +854,8 @@ void NavigationAgent3D::_move_to_next_waypoint() {  bool NavigationAgent3D::_is_within_waypoint_distance(const Vector3 &p_origin) const {  \tconst Vector<Vector3> &navigation_path = navigation_result->get_path();  \tVector3 waypoint = navigation_path[navigation_path_index] - Vector3(0, path_height_offset, 0); -\treturn p_origin.distance_to(waypoint) < path_desired_distance; +\treturn p_origin.distance_to(waypoint) < +\t\t\t(_is_last_waypoint() ? target_desired_distance : path_desired_distance);  }    bool NavigationAgent3D::_is_within_target_distance(const Vector3 &p_origin) const { ```  ### Steps to reproduce  See the MRP, but you use a dense navmesh, then using an agent with a low target_desired_distance (I'm using 0.15 in the MRP), attempt to navigate to a point that ends near multiple sections in the navmesh.  If you're using the MRP, just click the button.  You'll see we stop well outside the `target_desired_distance`  EDIT: Improved sceenshots with player capsule position in first comment below.  I forgot to include the capsule position in the label in the MRP.  <img width=\"688\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/ac5b7eef-b9de-48ea-9391-76b8d3905a9a\" />  With the patch above, applied to 4.4.1, we stop much closer:  <img width=\"688\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0da274d5-3bc3-4001-b08c-5b4534eaf121\" />    ### Minimal reproduction project (MRP)  [navigation-agent-finishes-early-issue.zip](https://github.com/user-attachments/files/21049700/navigation-agent-finishes-early-issue.zip)"
  },
  {
    "number": 108260,
    "title": "Fix modifier order in keycode string generation",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108260",
    "user": "Silver1063",
    "labels": [
      "enhancement",
      "topic:input"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [],
    "created_at": "2025-07-04T00:24:54Z",
    "updated_at": "2025-07-07T06:12:23Z",
    "closed_at": null,
    "milestone": "4.6",
    "is_pull_request": true,
    "body": "Fix the order in which modifier keys are appended in as_text() and keycode_get_string() to ensure consistent and logical ordering (Ctrl, Alt, Shift, Meta). Refactored keycode_get_string() to use a vector for building the key string, improving readability and maintainability.    For example, creating a PopupMenu with an accelerator with ctrl, shift, n would result in the text displayed as \"Shift + Ctrl + N\" while adding the short cut with event N and modifiers ctrl and shift would result in text displayed as \"Ctrl + Shift + N\".    Both are now consistent.    <!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  "
  },
  {
    "number": 108259,
    "title": "NavigationObstacle3D.avoidance_enabled = false does not allow NavigationAgent3D to pass",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108259",
    "user": "dmlary",
    "labels": [
      "bug",
      "confirmed",
      "topic:navigation",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-03T23:27:59Z",
    "updated_at": "2025-07-07T15:16:08Z",
    "closed_at": "2025-07-07T15:14:03Z",
    "milestone": "4.5",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducable in v4.4.1.stable.official [49a5bc7b6], v4.3.stable.official [77dcf97d8]  ### System information  Godot v4.4.1.stable - macOS Sonoma (14.7.6) - Multi-window, 2 monitors - Metal (Forward+) - integrated Apple M3 Max (Apple9) - Apple M3 Max (16 threads)  ### Issue description  When using a NavigationAgent3D with avoidance enabled, and a NavigationObstacle3D, if you set `NavigationObstacle3D.avoidance_enabled = false`, the agent still is blocked by the obstacle.  The agent can go through the obstacle if you clear the obstacle's `avoidance_layer`.  <img width=\"1426\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/5c5f4006-3150-4921-8ca2-962554764066\" />  ### Steps to reproduce  Use the MRP below.  You can press the `Start Navigation` button to have the capsule try to navigate through the wall.  There are two other toggles: \"Enable Wall Avoidance\" to set `obstacle.avoidance_enabled`, and \"Enable Wall Avoidance Layers\" to set the layers to 0 or 1.  When the Avoidance Layer is set, the `avoidance_enabled` has no impact on whether the capsule can navigate through the wall.  <img width=\"688\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/c4d52d55-39ed-4605-9acf-b4c74c0c9a80\" />    ### Minimal reproduction project (MRP)  [navigation-obstacle-avoidance-issue.zip](https://github.com/user-attachments/files/21047938/navigation-obstacle-avoidance-issue.zip)"
  },
  {
    "number": 108258,
    "title": "SoftBody3D recomputes rest edge lengths when disabled and re-enabled",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108258",
    "user": "simpkins",
    "labels": [
      "bug",
      "topic:physics",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-03T23:23:38Z",
    "updated_at": "2025-07-04T12:32:20Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in 4.5.2-beta2 (and earlier versions)  ### System information  Windows 11  ### Issue description  By default, SoftBody3D removes itself from the physics world when it is disabled.  (When `disable_mode` is left as its default value of `DISABLE_MODE_REMOVE`)  When the node is later re-enabled, it adds itself back to the physics world, but when it does so it recomputes the body's rest position using the vertex positions from when it was disabled.  This generally seems unexpected and undesirable.  For instance, if you have a soft body that starts as a cube, but disable it at some point when it is squashed, it will assume that squashed shape as its rest state when it is re-enabled.  It will no longer want to return to its original cube shape, but will want to return to the squashed shape.  Additionally, if you set a non-zero `shrinking_factor` the body will want to shrink itself further and further each time it is disabled and re-enabled.  This happens because SoftBody3D uses `PhysicsBody3D::soft_body_set_mesh()` to add itself back to the physics world when it is re-enabled, and this re-computes the physics constraints using that mesh state as the resting position.  Fixing this would probably require adding some new `PhysicsServer3D` APIs so the mesh could be re-enabled without recomputing its original constraints.  This is possibly low-priority to fix, but I figured I would file this just to track the current behavior.  Note that SoftBody3D also resets all vertex velocities when it is disabled and re-enabled.  This behavior differs from RigidBody3D, which appears to remember its current velocity when it is re-enabled.  ### Steps to reproduce  Run the attached MRP, and hit the \"Disable\" button to disable the soft body near when it impacts the ground and is in a squashed state (or in a stretched state when rebounding).  You can also try setting the `shrinking_factor` to 0.01 and watch the cube shrink each time you disable and re-enable it.  ### Minimal reproduction project (MRP)  [soft-body-disable.zip](https://github.com/user-attachments/files/21047952/soft-body-disable.zip)"
  },
  {
    "number": 108257,
    "title": "Editor inspector section displays hover feedback even if non-actionable due to not containing any visible properties (unchecked checkbox)",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108257",
    "user": "Calinou",
    "labels": [
      "discussion",
      "topic:editor",
      "usability"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [],
    "created_at": "2025-07-03T23:12:25Z",
    "updated_at": "2025-07-07T15:19:21Z",
    "closed_at": "2025-07-07T15:14:10Z",
    "milestone": "4.5",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in: 4.5.beta1 - Not reproducible in: 4.4.1.stable (checkbox-on-section feature is not present there)  ### System information  Godot v4.5.beta (efb40c152) - Fedora Linux 42 (KDE Plasma Desktop Edition) on X11 - X11 display driver, Multi-window, 1 monitor - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 5090 (nvidia; 575.64) - AMD Ryzen 9 9950X3D 16-Core Processor (32 threads) - 62.33 GiB memory  ### Issue description  When hovering a section in the inspector, the section background and text will brighten, which is good. However, this also happens when hovering a section that has an unchecked checkbox on it. These sections can't be unfolded by design, as they do not contain any visible properties until you tick the checkbox.  https://github.com/user-attachments/assets/b7621e56-71ab-4dff-95e6-de9495f4c0d9  We should do one of these two things:  1. Remove hover feedback on the section if it has an unchecked checkbox, but keep it for checked checkboxes as you can still (un)fold the section. 2. Make clicking the section tick the checkbox if it's currently unchecked.  I'm neutral on which one is the best solution here. Solution 2 is more seamless to the user, but is prone to accidentally activating some features, which can have a performance impact in some cases (e.g. shadows in Light3D).  cc @cier and @lodetrick, as they implemented the feature in https://github.com/godotengine/godot/pull/81630 and https://github.com/godotengine/godot/pull/105272.  ### Steps to reproduce  - Add an OmniLight3D node. - Hover the mouse over the **Shadow** section in the inspector, then try to click it. See that nothing happens unless you tick the **On** checkbox next to it, but the section has visible hover feedback regardless.  ### Minimal reproduction project (MRP)  N/A"
  },
  {
    "number": 108256,
    "title": "Navigation required a \"get_final_position()\" for work",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108256",
    "user": "Alexander-Kashapovich",
    "labels": [
      "needs work",
      "needs testing",
      "topic:navigation"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-03T22:22:58Z",
    "updated_at": "2025-07-05T09:45:53Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  v4.4.stable.official [4c311cbee]  ### System information  Godot v4.4.stable - Linux Mint 22 (Wilma) on X11 - X11 display driver, Multi-window, 1 monitor - OpenGL 3 (Compatibility) - Mesa Intel(R) Graphics (ADL GT2) - 12th Gen Intel(R) Core(TM) i5-12600H (16 threads)  ### Issue description  Unused call a get_final_position() fix some bug. I lost point when all is work, now required this call. I don know what is is  ### Steps to reproduce  Node2d and nav agent2d. comment/uncomment this call.  ### Minimal reproduction project (MRP)  extends NavigationAgent2D class_name  MoveComp  var speed:float = 400  func move_to(t:Vector2) -> void: \ttarget_position = t \tget_final_position() \tset_physics_process(1) \t  func moving_end() -> void: \tset_physics_process(0)  var a:Node2D func _ready() -> void: \ta = get_parent() \ttarget_reached.connect(moving_end)  func _physics_process(delta: float) -> void: \tvar dist:Vector2 = get_next_path_position() - a.global_position \ta.position += speed * dist.normalized() * delta "
  },
  {
    "number": 108255,
    "title": "Fix: TabBar/TabContainer can't start with all tabs deselected",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108255",
    "user": "thygrrr",
    "labels": [
      "bug",
      "topic:gui",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [],
    "created_at": "2025-07-03T21:17:56Z",
    "updated_at": "2025-07-07T15:14:54Z",
    "closed_at": "2025-07-07T15:14:05Z",
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "`TabBars` and `TabContainers` were unable to start with no tabs selected, and couldn't properly retain their current tab value of \"-1\", also across editor restarts.     ### Fix for Issue:  https://github.com/godotengine/godot/issues/108223    ### Cause  As the tabs were added to a TabBar (or children to a TabContainer) as the scene was set up, a bug in TabBar would always select tab index 0, even if deselection was enabled.    ### Repro (also in linked issue):  ![image](https://github.com/user-attachments/assets/a9f3dffa-d837-4ed7-af3a-9ce38c908058)    ### Before fix:  ![image](https://github.com/user-attachments/assets/994f05e3-ebde-4c5e-8ced-784f85713913)    ### Fixed via:   A missing check for `deselect_enabled` was added in `TabBar.cpp` on the code path when a first tab is added to an empty bar.     ### After fix:   ![image](https://github.com/user-attachments/assets/6477f751-0cdd-41d9-a063-89312cfc2998)    ### Tests:  - Modified 2 Test cases in [TabBar].  - Added 1 Test case in [TabBar].    Verified on Windows only via manual testing and    `./bin/godot.windows.editor.x86_64.console.exe --test --test-case=\"*[TabBar]*\"`    * *Bugsquad edit, fixes: https://github.com/godotengine/godot/issues/108223*"
  },
  {
    "number": 108254,
    "title": "Add more `PROPERTY_HINT_GROUP_ENABLE` uses",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108254",
    "user": "KoBeWi",
    "labels": [
      "enhancement",
      "topic:editor"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [],
    "created_at": "2025-07-03T20:31:22Z",
    "updated_at": "2025-07-07T20:03:45Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "Applies the new PROPERTY_HINT_GROUP_ENABLE to more properties."
  },
  {
    "number": 108253,
    "title": "Window width/height override degrades performance when base viewport w/h is low resolution",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108253",
    "user": "Axis4s",
    "labels": [
      "discussion",
      "topic:rendering",
      "needs testing",
      "topic:2d",
      "performance"
    ],
    "assignee": "",
    "comments_count": 4,
    "comments": [],
    "created_at": "2025-07-03T20:15:08Z",
    "updated_at": "2025-07-07T21:00:19Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Godot 4.4  ### System information  Godot v4.4.1.stable - Windows 10 (build 19045) - Multi-window, 1 monitor - OpenGL 3 (Compatibility) - AMD Radeon(TM) Graphics (Advanced Micro Devices, Inc.; 31.0.21923.1000) - AMD Ryzen 5 5500U with Radeon Graphics (12 threads)  ### Issue description  ![Image](https://github.com/user-attachments/assets/03dd8d68-89ac-40e7-8bf8-4a51d03016f0) ![Image](https://github.com/user-attachments/assets/9c1973c0-4c24-43ff-a44e-7af21881bf14)  Using the window width/height override options in the project settings to scale up the small viewport results in huge loss of framerate.  Original Viewport Res: 320x240 Override: 1280x960   ### Steps to reproduce  Create a Scene with your viewport set to a low resolution, 320x240 and your window override to 1280x960 and include a canvas-layer with a label on it with a simple \"get_frames_per_second\" script  ### Minimal reproduction project (MRP)  [exp-01.zip](https://github.com/user-attachments/files/21045938/exp-01.zip)"
  },
  {
    "number": 108252,
    "title": "NavigationAgent3D avoidance disregards Keep Y Velocity when navigation has finished; breaks gravity",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108252",
    "user": "dmlary",
    "labels": [
      "bug",
      "topic:navigation",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-03T20:01:21Z",
    "updated_at": "2025-07-04T14:08:13Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - reproducible in v4.4.1.stable.official [49a5bc7b6]  ### System information  Godot v4.4.1.stable - macOS Sonoma (14.7.6) - Multi-window, 2 monitors - Metal (Forward+) - integrated Apple M3 Max (Apple9) - Apple M3 Max (16 threads)  ### Issue description  When using a NavigationAgent3D with Avoidance enabled, and Keep Y Velocity set, the `safe_velocity` included in the `velocity_computed(safe_velocity: Vector3)` signal sets Y to 0.0 when the navigation agent determines navigation is finished.  This causes a problem applying gravity, as the NavigationAgent3D can reset the -Y velocity to 0.0 if the target_position is not directly on the ground plane.  Simple examples of this are a CharacterBody3D being knocked off a cliff, a CharacterBody3D spawning any distance above the ground.  I think the issue is in `NavigationAgent3D::_transition_to_navigation_finished()`.  It is resetting `stored_y_velocity` to 0, but I think that should only happen if agent has Use 3D Avoidance enabled.  If 3D avoidance is disabled, the developer is using some other method to manage the Y of the agent.  https://github.com/godotengine/godot/blob/9b22b41531c82132732fda0f9818c5709c2587bc/scene/3d/navigation/navigation_agent_3d.cpp#L984-L996    ### Steps to reproduce  See the MRP below.  Click on the various buttons in it to see what happens when the agent is reset to (0, 5, 0), and its `target_position` is set to the displayed.  When the `target_position` is above the ground plane, but has the same x & y values, the CharacterBody3D will hover.  <img width=\"1812\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/22eedc81-c433-4fda-9a90-ceb7ffd4861a\" />  ### Minimal reproduction project (MRP)  [navigation-agent-avoidance-gravity-issue.zip](https://github.com/user-attachments/files/21045685/navigation-agent-avoidance-gravity-issue.zip)"
  },
  {
    "number": 108251,
    "title": "Godot 4.5-beta2 : Android plugins that were functioning correctly in Godot 4.4.1 are no longer working after upgrading to Godot 4.5 beta 2.",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108251",
    "user": "utkarshtrivedimdz",
    "labels": [
      "archived"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-03T19:56:43Z",
    "updated_at": "2025-07-03T21:21:51Z",
    "closed_at": "2025-07-03T19:58:42Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Not reproducible in 4.4.1 Stable   ### System information  Godot v4.5.beta2 - Windows 11 (build 26100) - Multi-window, 1 monitor - OpenGL 3 (Compatibility) - AMD Radeon RX 6600 (Advanced Micro Devices, Inc.; 32.0.12033.1030) - 12th Gen Intel(R) Core(TM) i5-12400F (12 threads) - 15.86 GiB memory  ### Issue description  AndroidIAPP plugin that was working in Godot 4.4.1 is no longer loading in Godot 4.5 beta 2. The plugin's singleton is not being created, which indicates the plugin is not being properly initialized.  ### Steps to reproduce  Download and install the AndroidIAPP plugin to the res://addons/ directory Enable the plugin in Project > Project Settings > Plugins Check for the singleton via code Engine.has_singleton(\"AndroidIAPP\") The singleton does not exist, indicating the plugin failed to load  ### Minimal reproduction project (MRP)  WIP"
  },
  {
    "number": 108250,
    "title": "Ensure `Projection`'s getters have uniform behavior with y_flip and reverse_z",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108250",
    "user": "Flarkk",
    "labels": [
      "enhancement",
      "topic:core"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-03T19:52:51Z",
    "updated_at": "2025-07-05T11:23:51Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "This PR partially solves #106312 and #107383 by ensuring that `Projection`'s getters return the same values even when `y_flip` and/or `reverse_z` are applied.  However I couldn't find a way to support `remap_z` without disruption, which makes this PR of little help with Vulkan-style matrices Z ∈ [0; 1] (for instance with Forward+).    The fundamental issue is that #100209 only supports OpenGL-style matrices (negative Z-facing, Z ∈ [-1; 1], and Y upwards), which seemed reasonable considering all user-facing code follows this standard. This is not necessarily true in the buffers though, nor inside the callbacks of the Compositor.    I leave this PR in draft state so that whoever can take a look and share ideas.    At this stage I'm thinking of another approach :   1. document that `Projection`'s getters only support OpenGL-style matrices  2. provide a way to transform back any matrix to its OpenGL form (i.e. the inverse of `set_depth_correction`)  3. help users to figure out the form of the matrix when they access it (e.g. in the Compositor's callbacks) as it differs across renderers. They can then apply the right inverse transform before using the getters.    Of course this is under the assumption that we do not want to revert #100209, which is also an option although it is mathematically accurate (only more restrictive in terms of assumptions, which allows aggressive simplification).  "
  },
  {
    "number": 108249,
    "title": "Fix selecting wrong vertices in the Polygon2D editor when adding a polygon",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108249",
    "user": "Nikitf777",
    "labels": [
      "bug",
      "topic:editor",
      "topic:2d"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-03T19:20:45Z",
    "updated_at": "2025-07-07T15:14:51Z",
    "closed_at": "2025-07-07T15:14:05Z",
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Applied the same fix as in #107932, but for another action: `ACTION_ADD_POLYGON`. Sorry, I didn't know that this algorithm was used twice in the code. But this one seems to be the last. The interesting thing is that this code seems to be writter by none other than @reduz. I wounder why did he implement it like this."
  },
  {
    "number": 108248,
    "title": "More than 32 Decals present in the scene cause the sorting offset to be ignored.",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108248",
    "user": "takdew",
    "labels": [
      "bug",
      "topic:rendering",
      "confirmed",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-03T19:09:31Z",
    "updated_at": "2025-07-03T20:27:18Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Reproducible in: Godot 4.5 beta1, Godot 4.5 beta2, Godot 4.4.1 stable, Godot 4.0 stable.    ### System information  Godot v4.5.beta1.mono - Windows 10 (build 19045) - Multi-window, 1 monitor - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 5090 (NVIDIA; 32.0.15.7652) - Intel(R) Core(TM) i7-14700K (28 threads) - 31.72 GiB memory  ### Issue description  When there are more than 32 Decals present in the scene, the sorting offset seems to be ignored. If there are only 32 or less, then the sorting works as expected.  Here is a video showing the issue (note the 1024 sorting offset on the Decal2):  https://github.com/user-attachments/assets/6904a800-9ee8-4e2d-a93c-50d12c63f971  ### Steps to reproduce  1. Add 33 Decals to a scene, 2. Make two decals overlap, 3. Set sorting offset to some large number on one of the overlapping decals, 4. Move the camera around the scene and observe sorting issues.  ### Minimal reproduction project (MRP)  [decal-sorting-issue-mrp.zip](https://github.com/user-attachments/files/21044844/decal-sorting-issue-mrp.zip)"
  },
  {
    "number": 108247,
    "title": "Add .zed/ to .gitignore",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108247",
    "user": "Nikitf777",
    "labels": [
      "enhancement",
      "topic:buildsystem"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [],
    "created_at": "2025-07-03T18:56:41Z",
    "updated_at": "2025-07-04T17:41:46Z",
    "closed_at": "2025-07-04T17:41:40Z",
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "As Zed editor developers finally [introduced the debugging functionality](https://zed.dev/blog/debugger), more people may become interested in using it for working on the Godot codebase."
  },
  {
    "number": 108246,
    "title": "Errors when using is_instance_id_valid() and ways to debug objects/memory map",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108246",
    "user": "Adrenesis",
    "labels": [
      "enhancement",
      "feature proposal",
      "topic:core"
    ],
    "assignee": "",
    "comments_count": 4,
    "comments": [],
    "created_at": "2025-07-03T18:12:18Z",
    "updated_at": "2025-07-04T11:48:46Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Godot 4.4.1-stable  ### System information  Windows 10 - Godot Engine v4.4.1.stable.official.49a5bc7b6 - Forward+/Mobile/Compatibility - NVIDIA GeForce GTX 1080 Ti  ### Issue description  If you try \"is_instance_id_valid()\" on random ids, Godot will then spam this crash condition for absolutely no reasons:   [godot/core/object/object.h](https://github.com/godotengine/godot/blob/49a5bc7b616bd04689a2c89e89bda41f50241464/core/object/object.h#L1048)  What I used to do back in the Godot 3 days is something similar to what today would look like this:  ``` for i in range(1000000): \tif is_instance_id_valid(i): \t\tvar obj : Object = instance_from_id(i) \t\tif is_instance_valid(obj): \t\t\tprint(\"%d: %d\" % [i, obj.get_class()]) ``` Then save it in a log, then compare multiple instance of those with a diff software to know if the memory used after an action is justified or not...  The output looks like this:  ![Image](https://github.com/user-attachments/assets/f681ec61-d100-49fb-a33d-3bfefa517157)  and the diff looks like this:  ![Image](https://github.com/user-attachments/assets/4b5e2c74-7eff-440e-8b1c-2bbf562ffe3c)  Sadly enough, Godot IDs are way too big now to use that kind of scam and the IDs are randomized too. I didn't find any issue on the subject which means I'm one of the last developers to actually check a memory map for actual memory leaks - **not the one you think are there, but the one you can observe**.  I'm working on a Tower Defense with strong Data-Oriented-Designed optimizations, and still at each wave, my game is generating hundreds of Godot Objects, which I can see in the Debugger.... but where is the tool to know what are those objects? Are those simple `InputEventKey` or some unmanaged `Texture`, I don't know and I have no way to know.  Why Godot has still no way to check the memory map of a game? Where is the function `get_used_instance_ids()` in the `@GlobalScope`? Why a validity check can be invalid enough to trigger an error? What is supposed to be the way of finding memory leaks with Godot?  ### Steps to reproduce  execute: ``` for i in range(1000000): \tif is_instance_id_valid(i): \t\tvar obj : Object = instance_from_id(i) \t\tif is_instance_valid(obj): \t\t\tprint(\"%d: %d\" % [i, obj.get_class()]) ```  ### Minimal reproduction project (MRP)  [object_map_debugger.zip](https://github.com/user-attachments/files/21043424/object_map_debugger.zip)  Put this addon in any project, enable the addon, start the project, push CTRL + SHIFT + M, check for errors"
  },
  {
    "number": 108245,
    "title": "Add MAKE_NODE_TYPE_HINT helper macro",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108245",
    "user": "dawdle-deer",
    "labels": [
      "enhancement",
      "topic:core"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [],
    "created_at": "2025-07-03T17:59:22Z",
    "updated_at": "2025-07-03T21:53:11Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "While writing https://github.com/godotengine/godot/pull/108099, I found myself wanting an equivalent macro to `MAKE_RESOURCE_TYPE_HINT` for typed arrays of nodes. This implements said macro."
  },
  {
    "number": 108244,
    "title": "Bad text visibility in Filter Stack Variables view",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108244",
    "user": "miv391",
    "labels": [
      "enhancement",
      "topic:editor",
      "usability"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-03T16:50:15Z",
    "updated_at": "2025-07-03T17:21:51Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible with v4.5.beta1.mono.official [46c495ca2]   ### System information  Godot v4.5.beta1.mono - Windows 10 (build 19045) - Multi-window, 1 monitor - Vulkan (Forward+) - dedicated NVIDIA GeForce GTX 1060 6GB (NVIDIA; 32.0.15.6094) - Intel(R) Core(TM) i5-3570K CPU @ 3.40GHz (4 threads) - 15.95 GiB memory  ### Issue description  I was debugging my game and tried to find the variable named `ds` I was interested in from the Filter Stack Variables view. Finding the variable took a while until I realized it was already selected and thus very hard to see as the contrast between text color and background color is very small.  ![Image](https://github.com/user-attachments/assets/e9024a0d-2509-4f18-b8a5-10c4d0118369)  I am using Godot's default color theme.  It looks like that the variable name color is grey instead of white to make the headers (Locals, Members) to pop out more as they are white. For better usability I would suggest using white color for the variable names and finding some other way to make the headers pop out, if it is even needed.  ### Steps to reproduce  1. Use Godot's default color scheme 2. Put a break point to somewhere 3. When execution breaks, go to the Filter Stack Variables view and select any variable 4. --> variable blends in to the background color  ### Minimal reproduction project (MRP)  N/A"
  },
  {
    "number": 108243,
    "title": "Android: Fix Android plugins regression",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108243",
    "user": "m4gr3d",
    "labels": [
      "bug",
      "platform:android",
      "topic:plugin",
      "regression"
    ],
    "assignee": "",
    "comments_count": 7,
    "comments": [],
    "created_at": "2025-07-03T16:45:08Z",
    "updated_at": "2025-07-05T16:51:00Z",
    "closed_at": "2025-07-04T15:24:49Z",
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Address a regression introduced in https://github.com/godotengine/godot/pull/102866.     The proper behavior for Android plugins is to use `getContext` instead of `getActivity`, but since not all plugins follow this pattern, this fix provides backward compat to avoid breaking the plugins that don't.    Fixes https://github.com/godotengine/godot/issues/108193    <!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  "
  },
  {
    "number": 108242,
    "title": "Can't inherit abstract class using inheritance tree selector when creating new script",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108242",
    "user": "larspet",
    "labels": [
      "bug",
      "topic:editor"
    ],
    "assignee": "",
    "comments_count": 3,
    "comments": [],
    "created_at": "2025-07-03T16:08:38Z",
    "updated_at": "2025-07-08T13:10:40Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in: master [efb40c1524e54f2cf52f213e248bd0a7b790975a] - Reproducible in: 4.4.dev1 - Half-reproducible in: 4.3.dev1 (inherit button is not greyed out, but does nothing)  ### System information  Godot v4.5.beta (efb40c152) - Windows 11 (build 26100)  ### Issue description  It's not possible to select the class you want to inherit/extend when using the inheritance tree selector in the Create Script dialog, if the class is abstract. When manually inputting the class name in the text field it does work however.  The inherit button's tooltip also wrongly states: \"The selected class can't be **instantiated**\", which is irrelevant in the context of inheriting it.  As a side issue, even though the abstract classes are visible (but greyed out), they get filtered away when specifically searching for them. I guess that somewhat makes sense with how it currently works though.  ![Image](https://github.com/user-attachments/assets/ff931461-8b36-423c-b1dd-a9776f8d17e8)  #71834 is similar, but there the problem is with built-in non-instantiable classes, that seem to be straight up impossible to inherit in C#? But in this case, the only reason you would make your own abstract class is to inherit it.  ### Steps to reproduce  1. (Optional) Create a custom abstract class. 2. Start creation of a new script (e.g. by right-clicking a folder in FileSystem). 3. Click the Tree icon next to \"Inherits:\" 4. Attempt to inherit an abstract class (either your own, or a built-in one).  ### Minimal reproduction project (MRP)  n/a"
  },
  {
    "number": 108241,
    "title": "Sub-window cannot go fullscreen, if `Window.FLAG_NO_FOCUS` is set to `true` in inspector",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108241",
    "user": "MJacred",
    "labels": [
      "bug",
      "needs testing",
      "topic:gui"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-03T15:57:13Z",
    "updated_at": "2025-07-04T11:21:49Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in: 4.4.1  ### System information  Godot v4.4.1.stable - Ubuntu 20.04.6 LTS (Focal Fossa) on X11 - X11 display driver, Multi-window, 1 monitor - Vulkan (Forward+) - dedicated NVIDIA GeForce GTX 970 (nvidia; 535.183.01) - Intel(R) Core(TM) i7-10700KF CPU @ 3.80GHz (16 threads)  ### Issue description  A non-embedded sub window cannot go fullscreen, if you toggle `Unfocusable` in inspector to `true` and then instantiate it at some point  ### Steps to reproduce  1. create a scene with a window as root node with mode set to fullscreen and flag `Unfocusable` to `true` 2. create a main scene with a button, that on click instantiates the scene above  _expected result_: sub-window should show in fullscreen   _actual result_: sub-window stays at default size  **workaround**: leave `Unfocusable` set to `false`, and call `sub_window.set_flag(Window.FLAG_NO_FOCUS, true)` _after_ calling `sub_window.show()`   ### Minimal reproduction project (MRP)  [fullscreen.zip](https://github.com/user-attachments/files/21056147/fullscreen.zip)  to test the workaround, go into `main.gd` and comment the signal connection to `_on_pressed` and uncomment the line below that one  ```gdscript func _ready() -> void: \tself.pressed.connect(_on_pressed) \t#self.pressed.connect(_workaround) ``` "
  },
  {
    "number": 108240,
    "title": "After a mouse exits a Control node and the containing window at the same time, `mouse_entered` signal is sometimes wrongly emitted immediately after `mouse_exited`",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108240",
    "user": "rxlecky",
    "labels": [
      "bug",
      "needs testing",
      "topic:input",
      "regression",
      "topic:gui"
    ],
    "assignee": "",
    "comments_count": 7,
    "comments": [],
    "created_at": "2025-07-03T15:46:11Z",
    "updated_at": "2025-07-04T15:05:03Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in: v4.4.1.stable, v4.3.stable, v4.3.dev6.official [89850d553] - Not reproducible in: v4.0.stable, v4.2.2.stable, v4.3.dev3.official [36e943b6b], v4.3.dev4.official [df78c0636], v4.3.dev5.official [89f70e98d]  ### System information  Godot v4.4.1.stable - Windows 11 (build 26100) - Multi-window, 2 monitors - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 4070 Laptop GPU (NVIDIA; 32.0.15.6636) - 13th Gen Intel(R) Core(TM) i9-13900HX (32 threads)  ### Issue description  After a mouse exits a Control node, `mouse_entered` signal is sometimes wrongly emitted immediately after `mouse_exited`. This leaves the client code mistakenly thinking that the node still has mouse hovering it.  Here's the script used in the MRP, attached to a screen-wide button:  ```gdscript extends Button  func _input(event: InputEvent) -> void: \tif event is InputEventMouseMotion: \t\tvar mouse_pos: Vector2i = DisplayServer.mouse_get_position() \t\tvar window_rect: Rect2i = Rect2i(get_tree().root.position, get_tree().root.size) \t\tprint(Engine.get_physics_frames(), \": mouse_pos %s,  window_rect %s(has_mouse:%s)\" \t\t\t% [mouse_pos, window_rect, window_rect.has_point(mouse_pos)])   func _on_mouse_entered() -> void: \ttext = \"entered\" \tprint(Engine.get_physics_frames(), ': entered')   func _on_mouse_exited() -> void: \ttext = \"exited\" \tprint(Engine.get_physics_frames(), ': exited')  ```  ... here's an example of the output log from a reproduction case:  ``` 227: entered 227: mouse_pos (2072, 1279),  window_rect [P: (1344, 726), S: (1152, 648)](has_mouse:true) 228: mouse_pos (2080, 1109),  window_rect [P: (1344, 726), S: (1152, 648)](has_mouse:true) 229: mouse_pos (2086, 831),  window_rect [P: (1344, 726), S: (1152, 648)](has_mouse:true) 230: mouse_pos (2086, 723),  window_rect [P: (1344, 726), S: (1152, 648)](has_mouse:false) 230: exited 230: entered 230: mouse_pos (2086, 631),  window_rect [P: (1344, 726), S: (1152, 648)](has_mouse:false) ```  ... and here is a video capture:  https://github.com/user-attachments/assets/0305babd-d120-411c-8dda-31653b71c02f  ### Steps to reproduce  1. Open the MRP and run the main scene 2. Move the cursor across the game window, entering and exiting it 3. Observe that the window will occasionally get stuck on 'entered' state even after the cursor exits the window 4. Read the debug log to see that `mouse_exited` was actually emitted but `mouse_entered` was emitted immediately afterwards  ### Minimal reproduction project (MRP)  [mouse-exited-bug-mrp.zip](https://github.com/user-attachments/files/21040841/mouse-exited-bug-mrp.zip)"
  },
  {
    "number": 108239,
    "title": "Fix crash in Jolt Physics when switching scenes in editor",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108239",
    "user": "mihe",
    "labels": [
      "bug",
      "topic:physics",
      "crash",
      "regression",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-03T15:03:06Z",
    "updated_at": "2025-07-07T08:30:28Z",
    "closed_at": "2025-07-04T15:24:49Z",
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "This fixes the crash (and performance degradation) shown in [this MRP](https://github.com/godotengine/godot/issues/107951#issuecomment-3012835784), and arguably fixes the most pressing part about #107951, but does not fix the issue as a whole.    This makes it so that Jolt's broad phase gets cleaned up (i.e. quadtree nodes made available) whenever a scene is emptied out completely, like it is when switching scenes in the editor, meaning we get a full \"reset\" on such scene switches, which should prevent us from running out of broad phase nodes and crashing.    This also cherrypicks jrouwe/JoltPhysics#1682 in order to fix a bug in `JPH::PhysicsSystem::OptimizeBroadPhase` that would otherwise prevent this from working.    CC @jrouwe "
  },
  {
    "number": 108238,
    "title": "GPUParticlesAttractors ignore cull mask layers",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108238",
    "user": "OlegVegan",
    "labels": [
      "archived"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-03T14:55:21Z",
    "updated_at": "2025-07-03T17:45:52Z",
    "closed_at": "2025-07-03T17:45:46Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in 4.4.1 Stable - NOT Reproducible in 4.5 beta2  ### System information  Godot v4.4.1.stable - Windows 10 (build 19045) - Multi-window, 2 monitors - Vulkan (Forward+) - dedicated NVIDIA GeForce GTX 1660 SUPER (NVIDIA; 32.0.15.6614) - AMD Ryzen 9 3900X 12-Core Processor (24 threads)  ### Issue description  https://github.com/user-attachments/assets/38ab8140-13dd-4689-8bb5-dd866b529ec3  GPUParticlesAttractorSphere3D and GPUParticlesAttractorBox3D attract everything, ignoring cull masks. I tested it on 4.5 beta2, but this bug disappears  I guess it's fixed? But it's not documented in the interactive changelog, as far as I know, I couldn't find any open or closed issues about this bug, so I'm doing it just in case  ### Steps to reproduce  1. Create a GPUParticles3D with some visible particles 2. Create a GPUParticlesAttractorSphere3D 3. Disable all cull masks for GPUParticlesAttractorSphere3D  ### Minimal reproduction project (MRP)  [bugreport_MRP.zip](https://github.com/user-attachments/files/21040007/bugreport_MRP.zip)"
  },
  {
    "number": 108237,
    "title": "4.5 beta 2: Android editor texture_create slice size mismatch",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108237",
    "user": "davifoox",
    "labels": [
      "bug",
      "platform:android",
      "topic:rendering",
      "confirmed",
      "regression"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-03T14:33:16Z",
    "updated_at": "2025-07-08T21:32:59Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in: Godot 4.5 beta 1 and Godot 4.5 beta 2. - Not reproducible in: 4.5 dev 5 and earlier 4.5 snapshots.  ### System information  Android 14 - Godot 4.5 beta 2 - Mobile Renderer - Redmi Note Pro 12  ### Issue description  When I press the play button (even on an empty project), the debugger gives me this two red errors:  ``` E 0:00:00:228   texture_create: Data for slice index 0 (mapped to layer 0) differs in size (supplied: 16) than what is required by the format (32).   <C++ Error>   Condition \"(uint32_t)data[i].size() != required_size\" is true. Returning: RID()   <C++ Source>  servers/rendering/rendering_device.cpp:963 @ texture_create() ```  and  ``` E 0:00:00:901   command_queue_execute_and_present: QueuePresentKHR failed with error: VK_ERROR_SURFACE_LOST_KHR   <C++ Error>   Condition \"err != VK_SUCCESS && err != VK_SUBOPTIMAL_KHR\" is true. Returning: FAILED   <C++ Source>  drivers/vulkan/rendering_device_driver_vulkan.cpp:2818 @ command_queue_execute_and_present() ```  Image of the Android editor showing the errors: ![Image](https://github.com/user-attachments/assets/af18ed4b-5f76-486c-9b0c-e5f2eb3d10db)  ### Steps to reproduce  - Open an empty project on the Android editor; - Make sure you're using the Mobile renderer; - Create a Node2D scene as the Main project scene; - Press play;  ### Minimal reproduction project (MRP)  It happens with an empty project."
  },
  {
    "number": 108236,
    "title": "EditorFileSystem: Simplify resource loading logic on startup",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108236",
    "user": "timothyqiu",
    "labels": [
      "enhancement",
      "topic:editor",
      "topic:codestyle"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-03T14:01:22Z",
    "updated_at": "2025-07-05T06:02:27Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "This PR refactors the `_load_resource_on_startup()` method to improve code readability and maintainability.    When inspecting some other issues, I came across this method. The combination of that `while` loop + two `bool`s makes the code flow very difficult to understand.    After reviewing the code, I realized that it could be written in a much more straightforward and simple way."
  },
  {
    "number": 108235,
    "title": "Improve performance for shapeless objects when using Jolt Physics",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108235",
    "user": "mihe",
    "labels": [
      "enhancement",
      "topic:physics",
      "topic:3d",
      "performance"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-03T12:40:11Z",
    "updated_at": "2025-07-03T17:51:50Z",
    "closed_at": "2025-07-03T17:27:12Z",
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "This addresses a very minor performance issue when using Jolt Physics and dealing with objects that all have their shapes set to be `disabled`. In such a case, they would get a special \"empty\" shape type that technically ignores all collisions already, but which will still add overhead during the narrow-phase collision checks.    This is mentioned in [the documentation](https://jrouwe.github.io/JoltPhysics/class_empty_shape.html) for Jolt's `JPH::EmptyShape`:    > Note that, if possible, you should also put your body in an ObjectLayer that doesn't collide with anything. This ensures that collisions will be filtered out at broad phase level instead of at narrow phase level, this is more efficient.    This PR achieves this by simply treating shapeless objects as if they have both `collision_layer` and `collision_mask` set to 0, in which case any collision checks against such an object will be filtered out in `JoltLayers::ShouldCollide(JPH::ObjectLayer, JPH::ObjectLayer)`.    If you want to see the performance gain for yourself, [this very contrived MRP](https://github.com/user-attachments/files/21036993/jolt-shapeless-perf.zip) creates 500 always-awake `RigidBody3D` on top of eachother, that all have their shapes disabled. I see physics processing time go from roughly 3 ms to 0.8 ms.    This should be a very low risk change, so I'll queue it up for 4.5, but it's arguably low reward as well, so I'm happy to punt it to 4.6."
  },
  {
    "number": 108234,
    "title": "TextMesh Horizontal Alignment Right varying distance between characters",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108234",
    "user": "hampu5",
    "labels": [
      "bug",
      "topic:rendering",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-03T11:57:41Z",
    "updated_at": "2025-07-04T12:02:14Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Bug found in v4.4.1.stable.official [49a5bc7b6]  ### System information  Godot v4.4.1.stable - Windows 10 (build 19045) - Multi-window, 1 monitor - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 3060 Ti (NVIDIA; 32.0.15.7283) - Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz (8 threads)  ### Issue description  Create a MeshInstance3D, TextMesh, add font, use Horizontal Alignment Right, now when adding characters to the text, the distance between characters vary.  A consequence of this is that if you have a static background (think character slots) that the typed characters should align with, it wont.  ### Steps to reproduce  1. Add Meshinstance3d 2. TextMesh with font 3. Horizontal Alignment Right 4. Type characters and see that distance between characters vary  In the attached bugproject, just add text in the TextMesh.  ### Minimal reproduction project (MRP)  [bugproject.zip](https://github.com/user-attachments/files/21036583/bugproject.zip)"
  },
  {
    "number": 108233,
    "title": "Importing project from Godot 4.4-stable -> Godot 4.5-beta2 breaks VisualShader",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108233",
    "user": "mustardbucket1234",
    "labels": [
      "bug",
      "topic:editor",
      "needs testing",
      "regression"
    ],
    "assignee": "",
    "comments_count": 5,
    "comments": [],
    "created_at": "2025-07-03T11:21:09Z",
    "updated_at": "2025-07-07T22:27:56Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": false,
    "body": "### Tested versions  - EDIT: Also tested version Godot_v4.5-beta2_win64.exe - Current Version: Godot_v4.5-dev5_mono_win64.exe - Prev Version: Godot_v4.4-stable_mono_win64.exe  ### System information  Godot v4.5.dev5.mono - Windows 11 (build 26100) - Multi-window, 2 monitors - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 3070 (NVIDIA; 32.0.15.6636) - AMD Ryzen 9 5950X 16-Core Processor (32 threads)  ### Issue description  When importing my Project from 4.4 -> 4.5, the Alpha Scissor value is incorrectly being interpreted as the Backlight value.  I believe an off-by-one error was introduced by adding the new Bent Normal feature to VisualShaders  Image of Visual Shader Created in in 4.4 (Alpha Scissor Set to 0.5): ![Image](https://github.com/user-attachments/assets/fd876e4c-5cf4-4e85-8148-0a731bbd275e)  Image of same Visual Shader when opened in in 4.5 (Alpha Scissor value is now connected to Backlight): ![Image](https://github.com/user-attachments/assets/b5edf790-a8b7-4447-8f09-5cfb35e20584)  ### Steps to reproduce  1. Create a Visual Shader in Godot 4.4 2. Set a float parameter to Alpha Scissor. Save. 3. Open project in Godot 4.5. Open the same Visual Shader 4. The Float value is now on Backlight  ### Minimal reproduction project (MRP)  I have uploaded the shader file only: [BloodStainShader.zip](https://github.com/user-attachments/files/21035677/BloodStainShader.zip)"
  },
  {
    "number": 108232,
    "title": "4.5.beta2 Windows .NET download link has incorrect version",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108232",
    "user": "mustardbucket1234",
    "labels": [
      "archived"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-03T10:55:36Z",
    "updated_at": "2025-07-03T10:59:19Z",
    "closed_at": "2025-07-03T10:59:16Z",
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Godot_v4.5-beta2_mono_win64.zip - Godot_v4.5-beta2_mono_win64.exe  ### System information  Windows 11 - Godot_v4.5-beta2  ### Issue description  The Godot 4.5 Beta 2 Windows x64 .NET zip downloaded from godotengine.org displays version v4.5.beta1.mono.official when opened.  Version can be seen at bottom right of Project Manager window upon clicking Godot_v4.5-beta2_mono_win64.exe: ![Image](https://github.com/user-attachments/assets/8b121edf-3661-4a59-b3c1-c7e48865fb75)  Bugs that were supposed to be fixed in Beta 2 were showing up in the downloaded exe file. I believe the Godot_v4.5-beta2_mono_win64.exe is named incorrectly and was compiled using beta 1 code.  ### Steps to reproduce  1. Download Godot 4.5-beta2 .NET Win x64 from official Godot website. Direct Link: https://github.com/godotengine/godot-builds/releases/download/4.5-beta2/Godot_v4.5-beta2_mono_win64.zip  2. Unzip files: ![Image](https://github.com/user-attachments/assets/39bec604-ff85-42b6-b605-0210c74875a8)  3. Upon clicking on the beta2 exe file, the version reports itself to be v4.5.beta1.mono.official on bottom right of Project Manager screen: ![Image](https://github.com/user-attachments/assets/5b65e582-bb70-46ab-8e95-4fac23a3901b)  ### Minimal reproduction project (MRP)  N/A"
  },
  {
    "number": 108231,
    "title": "4.5.beta1: Thumbnail generation makes the inspector jump annoyingly, making it hard to click things",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108231",
    "user": "SteinMakesGames",
    "labels": [
      "bug",
      "topic:editor",
      "needs testing"
    ],
    "assignee": "",
    "comments_count": 2,
    "comments": [],
    "created_at": "2025-07-03T10:00:06Z",
    "updated_at": "2025-07-03T12:27:01Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Occurs in version 4.5.beta1  ### System information  Godot v4.5.beta1 - Windows 11 (build 22631) - Multi-window, 2 monitors - OpenGL 3 (Compatibility) - NVIDIA GeForce RTX 3060 Laptop GPU (NVIDIA; 31.0.15.4630) - AMD Ryzen 5 5600H with Radeon Graphics (12 threads) - 13.85 GiB memory  ### Issue description  See attached video, which makes the issue evident.  When I open this scene with very many @export'ed PackedScenes, the thumbnail generation takes a long time. During this time, the inspector skips and jumps downwards because thumbnails are larger than the @exports without thumbnail. This makes it very difficult and annoying trying to click anything while thumbnails are generating.   https://github.com/user-attachments/assets/4fe581bc-88e4-406b-ba6f-7c930899fbe7    ### Steps to reproduce  - Have a scene with many @export'ed PackedScenes in 4.5.beta1 - Load scene to generate the many thumbnails - Try to click anything in the inspector but fail due to thumbnail loading making everything jump around  ### Minimal reproduction project (MRP)  no"
  },
  {
    "number": 108230,
    "title": "Fix image download example code",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/pull/108230",
    "user": "Miziziziz",
    "labels": [
      "bug",
      "documentation",
      "cherrypick:4.3",
      "cherrypick:4.4"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-03T04:34:45Z",
    "updated_at": "2025-07-07T15:14:10Z",
    "closed_at": "2025-07-07T15:14:05Z",
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "using \"https://placehold.co/512\" as the url will cause image.load_png_from_buffer(body) to throw ERR_FILE_CORRUPT, need to specify that it's a png file in the url.    <!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  "
  },
  {
    "number": 108229,
    "title": "Fix `SoftBody` - update rendering server once per frame.",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108229",
    "user": "lawnjelly",
    "labels": [
      "bug",
      "topic:rendering",
      "regression",
      "topic:3d"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-03T04:14:14Z",
    "updated_at": "2025-07-03T07:40:56Z",
    "closed_at": null,
    "milestone": "4.5",
    "is_pull_request": true,
    "body": "Also add selectable pinned point process mode.    ## Discussion  This is some heavily work in progress (i.e. contains `DEV_ASSERT(0)` :grinning: ) stuff for fixing the `SoftBody` problems introduced in #106863 .    Hopefully one of the `SoftBody` interested guys will take this all over as I'm keen to avoid any responsibilities in this area.    ## The difference between _USER_ callbacks and engine callbacks.    I.e. `PHYSICS_PROCESS` and `INTERNAL_PHYSICS_PROCESS`, `PROCESS` versus `PRE_FRAME_DRAW`.    Users are restricted to calling things at certain times, _engine developers_ on the other hand can use internal callbacks that can be assured to be _after_ or _before_ all user interactions. This is because a user might for example, move a bone, pin or whatever during a physics tick, or process, and we want to have rendering / physics react to that. (Users can use `process priority`, but the engine itself tends to separate user and internal into different phases).    This is commonly called \"order of operations\" and can cause a number of bugs, because moving one operation somewhere else can change the relative order, and create regressions elsewhere. This is notorious for causing problems, when a contributor is not aware of knock on effects.    Due to the chicken / egg effect, _sometimes there is no option but to add a frame of delay_.    Key things to note:  * There are some situations where it is better to update on the frame, some on the tick.  * Pinned points that are linked things that move on the tick make more sense to update on the tick (so the physics simulation is correct as possible). Pinned points that are linked to things that move on the frame (i.e. skeleton attachments) are more sensible to move on the frame, _AFTER_ the engine and user has had the opportunity to move the skeleton.  * The rendering server doesn't need to be updated on any occasion except prior to rendering. It doesn't care what state the soft body is in during the physics tick.  * In some situations, two frames will occur with no physics tick in between. In this case, without physics interpolation there is no need to update the rendering server because the data is not dirty. With physics interpolation, you still need an update because the interpolation fraction will be different.    ## Notes  * Doesn't solve the existing threaded physics deadlock problem.    <!--  Please target the `master` branch in priority.    Relevant fixes are cherry-picked for stable branches as needed by maintainers.    To speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:  https://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html  -->  "
  },
  {
    "number": 108228,
    "title": "ItemList Ctrl Click on Multi Selected Items Does Not Emit \"item_clicked\" Signal - Only Occurs When Deselecting an Item From the List of Selected Items",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108228",
    "user": "JimJamBimBam",
    "labels": [
      "bug",
      "topic:gui"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-03T04:09:49Z",
    "updated_at": "2025-07-04T10:00:54Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  - Reproducible in: v4.5-beta2, v4.4.1-stable, v4.4.0, v4.3-stable, v4.2.2-stable, v4.1.2-stable.  ### System information  Godot v4.4.1.stable - Windows 11 (build 26100) - Multi-window, 3 monitors - OpenGL 3 (Compatibility) - NVIDIA GeForce RTX 3070 Laptop GPU (NVIDIA; 32.0.15.7602) - Intel(R) Core(TM) i7-10870H CPU @ 2.20GHz (16 threads)  ### Issue description  When using an ItemList with `select_mode` set to `multi`, and having selected a few items from the list of choices using `Shift + Left Click`, I find that deselecting a single item from that list (order does not matter) using `Ctrl + Left Click` does not cause the `item_clicked` signal to be emitted. Even though `Ctrl + Left Click` on an unselected item does cause the `item_clicked` signal to be emitted, I would have imagined that doing the same thing to deselect the item would cause the same signal to be emitted, but it does not.  ![Image](https://github.com/user-attachments/assets/de25167d-6608-485a-be24-4665d4b8be19)  Gif demonstrates what happens when trying to deselect items in a list of selected items and the prints to the console to visually confirm signal emission.  ### Steps to reproduce  - Download, extract and run Minimal Reproduction Project. - Run the *item_list_test_scene.tscn* scene in the editor. - `Left Click` on any item in the list. - `Shift + Left Click` on any other item in the list so that multiple items are now selected. - Now press `Ctrl + Left Click` on an item in the list and notice how there is no output in the editor console. - Pressing `Ctrl + Left Click` again on the same item, will show a new print statement in the editor console.  ### Minimal reproduction project (MRP)  [itemlist_item_clicked_bug_mrp.zip](https://github.com/user-attachments/files/21029520/itemlist_item_clicked_bug_mrp.zip)"
  },
  {
    "number": 108227,
    "title": "Propagate Tween.kill() to subtweens",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108227",
    "user": "Meorge",
    "labels": [
      "bug",
      "topic:core",
      "topic:animation"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-03T03:57:24Z",
    "updated_at": "2025-07-05T04:47:59Z",
    "closed_at": null,
    "milestone": "4.6",
    "is_pull_request": true,
    "body": "This PR fixes a problem with tween/subtween logic I noticed while investigating another issue. Previously, when a tween was killed with `kill()`, if it had subtweens in it that hadn't yet been run, those subtweens would never be executed, but would also never be explicitly killed or made invalid. As a result, if user code was monitoring the status of a subtween (say, waiting for it to be killed or finished), they would end up waiting forever.    With this PR, a `kill()` call on a Tween is passed down to all of its subtweens as well, ensuring that they are all marked as dead/invalid.  >[!NOTE] > Previously this PR also cleared subtweens when `clear()` was called on the parent. As I thought it through more I realized this didn't make sense, so I removed that but kept the `kill()` behavior."
  },
  {
    "number": 108226,
    "title": "Selecting the Forward Plus Renderer as the web renderer results in a black screen with no errors",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108226",
    "user": "Chaosed0",
    "labels": [
      "bug",
      "platform:web",
      "topic:rendering"
    ],
    "assignee": "",
    "comments_count": 1,
    "comments": [],
    "created_at": "2025-07-03T01:17:23Z",
    "updated_at": "2025-07-04T17:42:10Z",
    "closed_at": "2025-07-04T17:41:42Z",
    "milestone": "4.5",
    "is_pull_request": false,
    "body": "### Tested versions  Reproducible in 4.4.1 stable.  ### System information  Godot v4.4.1.stable - Windows 11 (build 26100) - Multi-window, 1 monitor - Vulkan (Forward+) - integrated Qualcomm(R) Adreno(TM) X1-85 GPU (Qualcomm Incorporated; 31.0.96.0) - Snapdragon(R) X 12-core X1E80100 @ 3.40 GHz (12 threads)  ### Issue description  If you select the \"forward plus\" renderer in project settings for the web renderer, the export works, but simply displays a black screen with no errors in the console.  ![Image](https://github.com/user-attachments/assets/3cd4928f-42c0-42fa-b5ff-1ccfada2999d)  It's expected that the renderer doesn't work, but I would expect that one or more of the following would occur:   - I shouldn't be able to select the option  - Selecting the option would display an error  - There would be an error displayed in the export window (red text at the bottom)  - There would be an error, similar to the cross-origin isolation/SharedArrayBuffer warning, visually during loading  - There would be an error in the console when running the game  I should note, for me, I didn't manually select the option - it somehow was automatically set during an upgrade of a project from 4.2 to 4.4. However, I was unable to reproduce exactly how this happened. Regardless, since this is the case, I feel that making the option unselectable is not enough - one of the errors should also be displayed.  ### Steps to reproduce  Set the setting in the image above and run the game using the \"remote deploy\" option at the top-right.  ### Minimal reproduction project (MRP)  [testgame.zip](https://github.com/user-attachments/files/21027290/testgame.zip)"
  },
  {
    "number": 108225,
    "title": "Assigning a NoiseTexture3D to a Texture3D property prints an error",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/issues/108225",
    "user": "Zylann",
    "labels": [
      "bug",
      "topic:core"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-03T00:18:24Z",
    "updated_at": "2025-07-03T14:34:53Z",
    "closed_at": null,
    "milestone": "",
    "is_pull_request": false,
    "body": "### Tested versions  Godot 4.4.1 Godot 4.5 beta2  ### System information  Windows 11 64 bits NVIDIA GeForce RTX 3060 Ti  ### Issue description  When I assign a different `NoiseTexture3D` to an exported property I made in GDScript from the editor, this error prints: ``` ERROR: modules/noise/noise_texture_3d.cpp:350 - Condition \"!texture.is_valid()\" is true. Returning: Vector<Ref<Image>>() ```  ### Steps to reproduce  - Create a script with an exported property of type `Texture3D` - Create two `NoiseTexture3D` resources and save them as `.tres` - Assign a texture to the property - Change the property to the other texture: observe error  Or using the MRP: - Open the main scene - Set the `tex` property to `noise_texture_3d_2.tres`  ### Minimal reproduction project (MRP)  [Texture3DProperty.zip](https://github.com/user-attachments/files/21026724/Texture3DProperty.zip)"
  },
  {
    "number": 108224,
    "title": "libogg: Update to 1.3.6",
    "state": "open",
    "html_url": "https://github.com/godotengine/godot/pull/108224",
    "user": "Chubercik",
    "labels": [
      "enhancement",
      "topic:thirdparty"
    ],
    "assignee": "",
    "comments_count": 0,
    "comments": [],
    "created_at": "2025-07-02T22:19:54Z",
    "updated_at": "2025-07-03T07:37:20Z",
    "closed_at": null,
    "milestone": "4.x",
    "is_pull_request": true,
    "body": "https://gitlab.xiph.org/xiph/ogg/-/releases/v1.3.6    Version 1.3.6 (2025 June 16):    - Update minimum cmake version to 3.6    This fixes incompatibility with cmake >= 4.0  - Fix UBsan issues  - Improve allocation failure handling  - Fix various compiler warnings  - Fix various autotool warnings  - Improve continuous integration testing scripts  "
  },
  {
    "number": 108223,
    "title": "TabContainer selects first tab (0) when current_tab == -1 and does not persist value of -1",
    "state": "closed",
    "html_url": "https://github.com/godotengine/godot/issues/108223",
    "user": "thygrrr",
    "labels": [
      "bug",
      "confirmed",
      "topic:gui"
    ],
    "assignee": "",
    "comments_count": 6,
    "comments": [],
    "created_at": "2025-07-02T22:02:38Z",
    "updated_at": "2025-07-07T15:19:15Z",
    "closed_at": "2025-07-07T15:14:10Z",
    "milestone": "4.5",
    "is_pull_request": false,
    "body": "### Tested versions  - reproducible in 4.5-beta1   ### System information  Win11, Godot 4.5 beta  ### Issue description  A tab container configured to allow deselection of all tabs, and in conflict with the help text, starts with the first tab selected, rather than no tab selected, if current_tab is set to -1.  The in-editor representation works as expected once, but not across editor restarts.  I suspect this is a problem in serializing the value, reloading the editor will result in the value being set to 0 instead of -1.  ![Image](https://github.com/user-attachments/assets/2e5b591d-cf79-469b-8acd-583b67888212)  ### Steps to reproduce  1. Open MRP. 2. observe: first tab is selected (should be not selected) 3. observe: current_tab is 0 (and shows \"rever to default\" arrow) 4. set current tab to -1 5. observe: all tabs deselected 6. run MRP. 7. observe: first tab is selected 8. repeat step 4 9. save and close scene or quit editor 10. reopen scene or project 11. observe 2 & 3 again  Expected output: (editor state analogous) ![Image](https://github.com/user-attachments/assets/aca6b86a-de86-4521-9359-ac1330040757)  Actual output: ![Image](https://github.com/user-attachments/assets/df5828ff-97ad-4680-b677-e52377d3abc5)  ### Minimal reproduction project (MRP)  [MRP-tabcontainer.zip](https://github.com/user-attachments/files/21025847/MRP-tabcontainer.zip)"
  }
]