number,title,state,html_url,user,labels,assignee,comments,created_at,updated_at,closed_at,milestone,is_pull_request,body
2819,Make MoldingSegment be a mode of Dragging versus its own PointerMove state,open,https://github.com/GraphiteEditor/Graphite/issues/2819,otdavies,,4adex,0,2025-07-02T09:33:11Z,2025-07-02T09:37:13Z,,,No,"Take a look at path_tool.rs: ~line 1700 onward.   Overall: Dragging one handle versus two handles should be effectively the same code. Molding is just dragging two handles as opposed to one.  Due to migrating slide to GG, this should remove the other PointerMove that is really also part of the dragging state, but won't be after GG."
2818,Path Tool behavior and overlay polish,open,https://github.com/GraphiteEditor/Graphite/pull/2818,otdavies,,,0,2025-07-02T08:45:41Z,2025-07-02T10:38:36Z,,,Sí,On going work to improve Path tool overlays and behavior.    Depends on #2794  Further work toward #2716  
2817,Add nodes for modifying vector paths,open,https://github.com/GraphiteEditor/Graphite/issues/2817,celyk,,,1,2025-07-02T07:47:24Z,2025-07-02T09:10:32Z,,,No,"Similar to how Instance Index and Instance Position input nodes work, but for paths. See for example Blender's Position Node: https://docs.blender.org/manual/en/latest/modeling/geometry_nodes/geometry/read/position.html  This will allow the displacement of points in a path. One should also be able to modify the color and weight along the path.  Proposed nodes: - Path Index - Path Position - Path Color - Path Weight  Each of them should have a corresponding setter node, and/or be allowed as input to the Transform and Stroke nodes. https://docs.blender.org/manual/en/latest/modeling/geometry_nodes/geometry/write/set_position.html  Down the road bezier handles should be accessible too. The more access to path data the better. "
2816,Make selected Text category nodes show a multi-line text area instead of one-line text field,open,https://github.com/GraphiteEditor/Graphite/pull/2816,Ezbaze,,,0,2025-07-02T03:04:59Z,2025-07-02T03:37:53Z,,,Sí,Modified Nodes  - String Value  - String Concatenate  - Replace String    Resolves https://discord.com/channels/731730685944922173/881073965047636018/1389675678865297488    Also closes #2806  
2815,Graph Editor Comments,open,https://github.com/GraphiteEditor/Graphite/issues/2815,lizard-demon,Design,,2,2025-07-01T22:50:44Z,2025-07-01T23:07:43Z,,,No,![Image](https://github.com/user-attachments/assets/923a9b14-2538-420f-9efa-8cd243e9ce92)
2814,Add X and Y offset overlay while dragging the select tool,open,https://github.com/GraphiteEditor/Graphite/pull/2814,Kavin006,,,2,2025-07-01T19:03:55Z,2025-07-02T06:03:29Z,,,Sí,
2812,Copy and Paste for paths,open,https://github.com/GraphiteEditor/Graphite/pull/2812,4adex,,,0,2025-07-01T10:28:49Z,2025-07-01T22:11:44Z,,,Sí,Closes #2744 
2810,Suggestion: Tab to swap between Select and Path tool similar to Blender,open,https://github.com/GraphiteEditor/Graphite/issues/2810,otdavies,Design,Keavon,0,2025-07-01T07:50:30Z,2025-07-01T07:51:41Z,,,No,"As it stands, we have _A -> V -> A_ as a very common key input when working on vector shapes. I recommend using tab to swap between the ""object mode"" (Select Tool) to the ""edit mode"" (Path tool). This would better match blender and the key is currently unused."
2808,Add masking,open,https://github.com/GraphiteEditor/Graphite/pull/2808,mTvare6,,,0,2025-07-01T02:34:15Z,2025-07-01T03:17:12Z,,,Sí,
2807,Chrome-specific JS debugging: dragging the increment mode number field sometimes jumps at the start,open,https://github.com/GraphiteEditor/Graphite/issues/2807,Keavon,"Help Wanted,Good First Issue,Web,Paper Cut",,0,2025-06-30T22:23:16Z,2025-06-30T22:33:51Z,,,No,"This has happened for a long time, but I should really file an issue, so here it is. It seems to probably happen only in Chrome, unless perhaps it is just harder to reproduce in Firefox (I wasn't able to reproduce it in FF in my testing right now, but haven't ruled it out). See `NumberInput.svelte`.  When you click and drag a number input field of the increment (not range) style, meaning the kind you can drag infinitely left or right, it will sometimes teleport the value to a wildly different value from the one it started with. This can be reproduced by drawing a rectangle and dragging left and right on its stroke weight parameter in the Properties panel repeatedly in quick, small left and right drags until occasionally it will make a big jump.  I hypothesize this is caused by weirdness in the event ordering and mouse position reporting with the [pointer lock](https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API) API, and it might be related to the widget being broken in Safari: #2038. I recommend logging the values that are being reported by the API and current state every frame to narrow down when the events occur and produce the discrepancy.  At the the 4-second mark in this video, we see it jump from `131.3` to `17.3` immediately when the click-and-drag begins:  https://github.com/user-attachments/assets/61b1b1e6-4560-4555-aac5-f7b54cbfacb9"
2805,Fix `test` without `--workspace` failing,open,https://github.com/GraphiteEditor/Graphite/pull/2805,Firestar99,,,0,2025-06-30T17:44:49Z,2025-07-01T20:51:33Z,,,Sí,
2804,Fix spline cleared on tool change,open,https://github.com/GraphiteEditor/Graphite/pull/2804,LixiviaDev,,,0,2025-06-30T13:40:11Z,2025-06-30T13:40:11Z,,,Sí,"Spline Tool: Spline won't stay unless closed or (Esc or Enter) is pressed.    My changes:  - Removed ""::AbortTransaction"" message, which completely cleared the new spline on ""::abort"".  - Added ""delete_preview()"" function to delete the preview point that tracks the mouse.  - Added ""::EndTransaction"" message to signal that we want to save the new spline as is."
2803,New Shape : Spirals,open,https://github.com/GraphiteEditor/Graphite/pull/2803,0SlowPoke0,,,0,2025-06-30T11:58:56Z,2025-07-01T17:33:46Z,,,Sí,
2799,Add ability to start lasso select within object without dragging layers,open,https://github.com/GraphiteEditor/Graphite/pull/2799,hemu,,,2,2025-06-29T22:57:57Z,2025-07-01T07:39:29Z,,,Sí,"When beginning a lasso select from within an object, currently the behavior is to drag its layers. This PR updates this behavior such that a lasso select beginning within an object will remain a lasso selection over the existing layers.    Refactor select_tool and path_tool transition drag logic to determine an ""intent"" up front. This made it easier to incorporate the type of logic needed in this PR where the lasso select intent has priority over others, but its logic is shared with box select which has the lowest priority so it was hard to capture this in the existing if/else chain.      Part of #2647    NOTE: This is an alternate implementation compared to this simpler change: https://github.com/GraphiteEditor/Graphite/pull/2798    # Before    https://github.com/user-attachments/assets/86142094-4e4d-4457-9f6c-241df25c3ad0    # After  https://github.com/user-attachments/assets/64d97867-e38b-4699-8271-e51b4ba6af6f    "
2798,Add ability to start lasso select within object without dragging layers,open,https://github.com/GraphiteEditor/Graphite/pull/2798,hemu,,,0,2025-06-29T22:55:51Z,2025-06-29T23:30:52Z,,,Sí,"When beginning a lasso select from within an object, currently the behavior is to drag its layers. This PR updates this behavior such that a lasso select beginning within an object will remain a lasso selection over the existing layers.    NOTE: This is a simpler implementation compared to this alternative approach that includes a small refactor: https://github.com/GraphiteEditor/Graphite/pull/2799    Part of [#2647](https://github.com/GraphiteEditor/Graphite/issues/2647)    # Before    https://github.com/user-attachments/assets/86142094-4e4d-4457-9f6c-241df25c3ad0    # After  https://github.com/user-attachments/assets/64d97867-e38b-4699-8271-e51b4ba6af6f      "
2796,fix: Suppress verbose npm ci output in package-installer.js,open,https://github.com/GraphiteEditor/Graphite/pull/2796,Mirza-Samad-Ahmed-Baig,,,4,2025-06-29T11:59:29Z,2025-07-02T12:38:58Z,,,Sí,"Instead of opening new issue, I thought of solving the issue on my own. Thank you.    This PR resolves a minor yet impactful issue in frontend/package-installer.js that caused excessive and distracting console output during development.    The package-installer.js script is responsible for automatically running npm ci whenever package.json or package-lock.json is modified. Previously, it invoked execSync with stdio: ""inherit"", which resulted in the full output of npm ci—including successful installation logs—being printed directly to the console. This cluttered the terminal, especially when combined with output from vite and cargo watch, making it harder to follow relevant logs."
2795,Improve node graph performance,open,https://github.com/GraphiteEditor/Graphite/pull/2795,adamgerhant,,,2,2025-06-29T09:54:09Z,2025-07-02T03:25:52Z,,,Sí,"Move wire rendering into backend  Implement culling for offscreen nodes  Improves properties/document upgrade stability    Decreases frame time from 120ms -> 20ms when zoomed in on red dress node graph  Increases frame time from 120 -> 200ms when fully zoomed out    Old:  ![chrome_D18AToYUWg](https://github.com/user-attachments/assets/fde1d878-2be2-40e6-8c85-2cb4705f345f)  New:  ![chrome_AMXWLyTqfv](https://github.com/user-attachments/assets/a7defe74-8af5-4281-9a22-baa7da92b48b)    Known issues:   Direct wire paths not supported.   Subpath rectangle_intersections_exist function is buggy, so dragging onto wire is still inconsistent  "
2794,Improve Path tool layer selection behavior using double-click instead of single-click,open,https://github.com/GraphiteEditor/Graphite/pull/2794,4adex,,,2,2025-06-29T06:55:35Z,2025-07-02T10:52:24Z,,,Sí,Closes #2716     
2790,Jitter Points node has unexpected behaviour,open,https://github.com/GraphiteEditor/Graphite/issues/2790,celyk,,,3,2025-06-29T02:51:10Z,2025-06-30T14:01:42Z,,,No,"My node setup: Transform -> Jitter Points  [transform-jitter-mrp.graphite.zip](https://github.com/user-attachments/files/20965739/transform-jitter-mrp.graphite.zip)  Everything works except when I set scale.x = 0. Then the jitter only happens along a line despite the transform taking place before the jitter  Setting the scale to a very small value gives the expected output  <img width=""803"" alt=""Image"" src=""https://github.com/user-attachments/assets/425e299c-d5ed-49f0-8cbc-4376163959d6"" /> "
2789,Add shape-rendering SVG attribute support,open,https://github.com/GraphiteEditor/Graphite/pull/2789,phailhaus,,,0,2025-06-28T17:33:37Z,2025-06-28T17:33:37Z,,,Sí,"<!-- Please reference any relevant issue number below, optionally with a ""Closes""/""Resolves""/""Fixes"" prefix -->    Partially Resolves #2775    Adds shape_rendering attribute to the PathStyle struct, adds support for writing it out when rendering the SVG, and adds a node that allows the user to set it on vectors.    Exact behavior varies by rendering engine. Tested:  * Vello: Not supported. Does nothing.  * Chrome: Functions for normal display and export. Does *not* function when using the Rasterize node.  * Firefox: Functions for normal display, export, and when using the Rasterize node.    This isn't a clean AA on/off toggle, however. There are four options, and it's up to the renderer what it wants to do with each. Outside of the Rasterize node difference, so far I'm seeing identical behavior between Chrome and FF, but it isn't logically consistent. Here is an example:  ![image](https://github.com/user-attachments/assets/a616a08e-9fee-4782-aefa-e53c0fbe4b7e)    The top example can be set to Auto (the default if not overridden) or Geometric Precision and get the same output as before this was implemented.  The bottom can be set to Crisp Edges or Optimize Speed to get the result shown. Notably, on the bottom, AA is off for stroke and fill edges on the flower, along with the interface between the fill and stroke on the red shape. The outer edge of the stroke is still antialiased. If I change the stroke from Inside to Center or Outside, the anti-aliasing goes away.    Useful function for a technical user, but consistency in support is lacking."
2788,Is it possible to view network traffic by application process?,open,https://github.com/GraphiteEditor/Graphite/issues/2788,justfunc,,,1,2025-06-28T14:43:11Z,2025-06-28T23:37:06Z,,,No,
2786,"Remove 'To u32', 'To u64', and 'To f64' number conversion nodes and clean up node type usages",open,https://github.com/GraphiteEditor/Graphite/pull/2786,Keavon,,,0,2025-06-28T13:26:17Z,2025-07-02T01:38:18Z,,,Sí,
2785,Boolean operation | Subtract Front | Fails on text node sometimes,open,https://github.com/GraphiteEditor/Graphite/issues/2785,sm17p,,,0,2025-06-28T13:05:58Z,2025-06-28T16:00:24Z,,,No,"Font - Cabin  It's very arbitrary, I found it breaking for smallcase `d` and `e` depending on the `font-weight` and  `font-style` used.  1. ![Image](https://github.com/user-attachments/assets/11b13354-3b9b-40fc-9cba-3b1f7abc947b) 2. ![Image](https://github.com/user-attachments/assets/039fd90e-5d26-4f3f-9cf3-97d1e4ac8bb6)"
2780,Include graph runtime benchmarks in ci regression run,open,https://github.com/GraphiteEditor/Graphite/pull/2780,TrueDoctor,,,0,2025-06-28T07:07:59Z,2025-06-28T13:25:58Z,,,Sí,"<!-- Please reference any relevant issue number below, optionally with a ""Closes""/""Resolves""/""Fixes"" prefix -->  - [ ] Update demo artwork to newest version "
2779,"Paints (solid color, gradient, pattern, and other existing graphical data)",open,https://github.com/GraphiteEditor/Graphite/issues/2779,Keavon,"Architecture,Graphics",,0,2025-06-28T06:18:27Z,2025-06-28T06:37:16Z,,,No,"A **paint** is something that's graphical, which can be given to a Fill or Stroke node to be applied to the appearance of a vector path or stroke area.  For Graphite, we should use a model where a paint can be any graphical data: 1. As a layer, it shows up with finite or infinite bounds in the render like normal. It may be clipped to a layer beneath it via a clipping mask. 2. As a fill paint, it shows up only within the fill area of a vector path. 3. As a stroke paint, it shows up only within the stroke area of a vector path.  Right now, we support any graphical **element** in case 1 (part of the render), but only the `FillChoice` enum which can be `None`/a solid `Color`/the `Gradient` struct for case 2 (vector fills), and only a `Color` for case 3 (vector strokes). This change calls for making the **Fill** and **Stroke** nodes accept any graphical data (i.e., anything that can be type-coerced into a graphical element) as opposed to their current parameters.  Then for colors and gradients, both of these types need to be added to the graphical element enum, allowing layers of color or gradient data to display infinitely in all directions. This solves the requested feature for choosing a background color of an infinite canvas, by simply making it be the bottom layer.  For patterns, we will have a sort of pattern tiling node which uses the footprint to render the infinite data. This can be implemented after the colors and gradients from the previous paragraph with insights gleaned from that process.  An alternative to adding these to the graphic element enum is that we could have a type coercion node that generates a vector rectangle with the footprint bounds, and fills it with the color, gradient, or pattern stroke. So feeding a color into a layer, a fill paint, or a stroke paint, would just type coerce it into a filled rectangle vector element of the appropriate size to cover the rendered area. This helps avoid needing to keep extending the graphic element enum and adding more rendering implementations to it.  We do need to update the renderer code to produce SVG output syntax for fill and stroke paints. For ordinary graphical data, this could work by using a `<pattern>` (without the infinite tiling unless the user has created an infinite pattern with the data) or clip/mask. For color, this needs to become a standard fill color, and for gradient, likewise.  Paint transforms need to also be preserved, so a scaled/skewed paint can be drawn with that stretch applied, just like we do for a skewed gradient right now using `Gradient::transform`.  More detailed discussion: https://discord.com/channels/731730685944922173/1175577028209168474/1388368187803959391  Links: - https://www.w3.org/TR/SVG2/pservers.html - https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Element/pattern - https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute/fill - https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute/stroke - https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorials/SVG_from_scratch/Fills_and_strokes"
2778,Refactor 'Area' node to use Kurbo.,open,https://github.com/GraphiteEditor/Graphite/pull/2778,indierusty,,,0,2025-06-28T05:07:50Z,2025-06-28T13:25:58Z,,,Sí,"<!-- Please reference any relevant issue number below, optionally with a ""Closes""/""Resolves""/""Fixes"" prefix -->    Partially Closes #2635   "
2777,Add Color Constructor Nodes,open,https://github.com/GraphiteEditor/Graphite/pull/2777,phailhaus,,,0,2025-06-28T04:30:04Z,2025-06-29T02:14:59Z,,,Sí,"<!-- Please reference any relevant issue number below, optionally with a ""Closes""/""Resolves""/""Fixes"" prefix -->    Resolves #2774    # Adds the following:  ## color crate function:  from_cmyka() function to convert CMYKA to RGBA    ## Nodes:  All nodes clamp input to 0 -> 1 before passing to matching function in color crate    construct_color_rgba() accepts f32 inputs in RGBA format and outputs a color  construct_color_hsla() accepts f32 inputs in HSLA format and outputs a color  [ConstructColorDemo.zip](https://github.com/user-attachments/files/20958769/ConstructColorDemo.zip)    construct_color_grayscale() accepts a single f32 luminance input and outputs a color  construct_color_cmyka() accepts f32 inputs in CMYKA format and outputs a color    I am struggling to understand more complex node construction. These could likely get merged, but I couldn't figure out how to create options that swap out inputs.      # Demo: [ConstructColorDemo.zip](https://github.com/user-attachments/files/20958769/ConstructColorDemo.zip)  The squares in the background test the four nodes in order from the center out. The dots in the foreground demonstrate a more practical use, deriving color from the instance index in a way that can't be done with a simple gradient.    ![ConstructColorDemo](https://github.com/user-attachments/assets/08bf3c16-456a-4df2-afab-860b8201abd3)  "
2776,Pen/Freehand/Splines tool should set its origin to the first drawn point location when the new layer is created,open,https://github.com/GraphiteEditor/Graphite/issues/2776,Keavon,"Good First Issue,Paper Cut",,3,2025-06-28T02:17:42Z,2025-06-30T14:38:14Z,,,No,"Right now, the origin gets set to the parent (usually canvas) origin which is often far away from where the user is drawing. At least we know that, when drawing a shape and its layer gets created, the user likely has an interest in a particular area in space roughly nearby the first point being drawn. So that's the better choice. This means adding a Transform node to provide the offset to the first point location."
2775,Add Option to Disable Antialiasing,open,https://github.com/GraphiteEditor/Graphite/issues/2775,phailhaus,"Good First Issue,Graphics",,2,2025-06-28T00:30:05Z,2025-06-28T11:03:25Z,,,No,"An option to disable anti-aliasing would expand usefulness for specialized situations.  Example of usecase that is broken by AA: I've been working on a project that involves stroking paths with a series of circles that change color based on distance from the start of the path. I can then use a specialized shader in a raster pipeline to threshold the image, giving a hand-drawn line that can be 'drawn' in real time with extremely light loads on both CPU and GPU. To do this, I need every pixel of a circle to be either 100% the desired color or entirely transparent. Anything inbetween results in artifacts.  My current workflow involves copying paths out of an SVG into a python script to generate these stroked textures, but Graphite provides a very enticing alternative."
2774,Create Color from Component Values,open,https://github.com/GraphiteEditor/Graphite/issues/2774,phailhaus,Good First Issue,,1,2025-06-28T00:19:58Z,2025-06-28T01:33:40Z,,,No,"A node that takes four numbers (int or float, doesn't matter) as R, G, B, and A and outputs a color is needed for situations where color is driven mathematically by other elements.  The best workaround I have found when alpha isn't needed is to create three gradients, one for Black->Red, Black->Green, and Black->Blue. I can then sample those gradients and use them to produce three duplicates of the geometry, each representing one color channel. Finally, I can blend them using the Lighten blendmode to get the composite image."
2768,Add the re-fit on delete feature to the Path tool,open,https://github.com/GraphiteEditor/Graphite/pull/2768,4adex,,,3,2025-06-27T14:13:21Z,2025-07-02T03:08:20Z,,,Sí,Closes #2651  
2767,"Extract `gelement-nodes` for nodes accepting vector, raster or element",open,https://github.com/GraphiteEditor/Graphite/pull/2767,Firestar99,,,0,2025-06-27T13:55:11Z,2025-07-01T15:07:57Z,,,Sí,# Requires https://github.com/GraphiteEditor/Graphite/pull/2764
2757,Add Arc Shape and Arc Gizmos,open,https://github.com/GraphiteEditor/Graphite/pull/2757,0SlowPoke0,,,1,2025-06-26T13:09:00Z,2025-06-28T13:25:58Z,,,Sí,- Implemented 'Arc' shape which can be drawn by the shape tool  - Added Arc gizmos to change the arc endpoints  - fixed  bug #2743 
2755,(frontend): Incremental migration to svelte 5,open,https://github.com/GraphiteEditor/Graphite/pull/2755,sm17p,,,3,2025-06-25T20:48:42Z,2025-06-29T21:16:36Z,,,Sí,"### Migration Plan step by step  - [x] Turn on `dynamicCompileOptions` for `vite-plugin-svelte`, and add files in the runes whitelist (`runesGlobs`)  - [x]  Run the migration script for whitelisted files  - [x] Fix `svelte/legacy` depracation warnings (Avoiding `createBubbler` over here)   - [x]  Once all the components are `runes` compatible, start chiping away the remaining`svelte/legacy` compat bindings  - [ ] Add commits to `.git-blame-ignore-revs` for a cleaner git blame     <hr />    Following the [svelte 5 migration guide](https://svelte.dev/docs/svelte/v5-migration-guide)    <hr />    #### Known Issues  - [x] `patchWidgetLayout` doesn't update deeply nested properties reactively - https://github.com/GraphiteEditor/Graphite/pull/2755/commits/0d360bf8e4633df27cce6d4eadda7c40f0046ac8  - [x] `Graph.svelte` (Node Graph) is invisible on load, displays after clicking on screen - https://github.com/GraphiteEditor/Graphite/pull/2755/commits/6f18e4693c01d9a7b206020eceada1fb756101f1  - [x] `NodeCatalog.svelte` reactive bindings messed up for sub-menus and node creation - https://github.com/GraphiteEditor/Graphite/pull/2755/commits/f278827e3469f6b343daacc3d0a4aa2475a0ab2e    "
2753,"Path tool dragging, then pressing Shift to constrain horiz./vert., should begin from a snapping point",open,https://github.com/GraphiteEditor/Graphite/issues/2753,Keavon,Good First Issue,,0,2025-06-25T01:42:59Z,2025-06-25T01:42:59Z,,,No,"At the beginning of this video, I add <kbd>Shift</kbd> to the drag and it correctly performs the horizontal/vertical snapping from its original drag location. But in the second half of the video, I demonstrate a use case where this feature is desired: when the point is dragged such that it snaps over another point, then <kbd>Shift</kbd> is pressed at that time, we would like that snapped point to become the source of the horizontal/vertical constraint. Releasing <kbd>Shift</kbd> and pressing it again while not snapped should retain its current behavior of constraining relative to the point where the drag began. As shown in the video, this feature would make it very easy to keep the top point aligned to the same X coordinate as the bottom point.  https://github.com/user-attachments/assets/e59f5531-8b8a-4a18-a5ab-520fef992aa8"
2751,Added node macro e2e-test,open,https://github.com/GraphiteEditor/Graphite/pull/2751,MendyBerger,,,1,2025-06-24T19:08:39Z,2025-06-28T13:25:58Z,,,Sí,Just adds a test
2747,Allow tooling to treat near-zero-length handles as zero-length with an epsilon,open,https://github.com/GraphiteEditor/Graphite/pull/2747,HWienhold,,,2,2025-06-23T15:55:15Z,2025-06-28T13:25:58Z,,,Sí,"fixes https://discord.com/channels/731730685944922173/881073965047636018/1353015950894698606      Fixes a bug when connecting two paths ending with single handle (each) and applying `colinear handles`. on the newly connected nodes. Problem arises because applying `colinear handles` on the first node will create the opposite handle. The other node then has two handles, one of which is the anchor itself, hence:    ```  let mut handle_directions = handle_positions.map(|handle| handle.map(|handle| handle - anchor));  ```    will contain a null-Vec.    To be fair: this slightly changes the behavior when applying `colinear handles` to other nodes that only has one handle: while before it wouldnt change that node - now it will calculate the handles based on the anchors as well."
2744,Copying and pasting geometry while in the Path tool,open,https://github.com/GraphiteEditor/Graphite/issues/2744,Keavon,,4adex,0,2025-06-23T06:57:55Z,2025-06-23T06:57:55Z,,,No,"Ctrl+C and Ctrl+V should work, while in the Path tool, directly on the geometry (points, segments, regions). If pasted while not using the Path tool, or when the Path tool is working with 0 or 2+ selected layers, it should create a new Path layer (with default fill and stroke) with that geometry.  Ctrl+D should also duplicate the selected geometry in place, as if the user had copy-and-pasted it. Currently, Ctrl+D duplicates the whole layer while in the Path tool, so this should override that while this tool is active."
2743,Star tool shows strange angle,open,https://github.com/GraphiteEditor/Graphite/issues/2743,0HyperCube,"Good First Issue,Paper Cut",0SlowPoke0,2,2025-06-22T09:29:19Z,2025-06-22T09:35:57Z,,,No,"When using the star mode of the polygon tool, you can edit the star by dragging the corner whilst still in the star tool. This causes some very strange functionality as seen below:  ![An 80 degree angle outlined in orange](https://github.com/user-attachments/assets/483132ae-9f02-4894-b1b4-aaa0fd40e3b7)  Apparently this is meant to be a right angle. However it is not."
2740,Tracking Issue: Code quality refactors,open,https://github.com/GraphiteEditor/Graphite/issues/2740,0HyperCube,Architecture,,0,2025-06-20T20:53:48Z,2025-06-21T03:15:28Z,,,No,"## Match statements Some files contain a single match statement that are very long (e.g. portfolio 1356 lines, document 1335 lines, select 1070, path 799). This is rather hard to manage or debug. - Split message handlers - Move complex logic outside of the match statement  ## Cloning the document History / transactions involve cloning the document many times. This very bad for performance and completely inflexible [#2617](https://github.com/GraphiteEditor/Graphite/issues/2617) . The [issue from 2021](https://github.com/GraphiteEditor/Graphite/issues/123) still hasn't had any progress due to the enormous refactoring that would be involved in making a system with proper actions. The current system also creates much confusion when history interacts with tools (especially the pen tool [#2262](https://github.com/GraphiteEditor/Graphite/issues/2262). - Write a system whereby actions and their reverse can be stored instead. This will require a major refactor. I don't really want to undertake this whilst so many of the systems are in flux  ## UI UI code is verbose and poorly structured. The current system is partially immediate mode, using all of our custom types. All of the UI is then diffed in a rather fragile way. The callback system is also rather confusing causing issues like [#2530](https://github.com/GraphiteEditor/Graphite/issues/2530). - Rewrite using a better UI library e.g. iced. Keavon wants to adopt some research project but I'm not sure this is a good idea. - Make the API for the UI layout more like egui to improve simplicity.   ## Transforms & Click targets Transforms are completely broken in many situations. Especially with the node graph allowing transform nodes in any position. There are a series of inconsistent hacks that work around this is certain common situations. However this isn't particularly ideal. The Instances<T> only makes this more confusing. I'm not really sure how to solve this.  Click targets are very confusingly managed. This includes the path tool without a path node. This also interacts with the transform system in ways that aren't particularly robust.  The StartBuffer thing is exceedingly confusing. Each time there is an issue involving it, several hours must be spent trying to figure out what to do about it.  The relationship where the editor updates are theoretically independent of the node graph executor is very confusing since most tools rely on the node grpah being run at least most of the time. This is especially confusing when implementing tests.  I feel like the current systems and the way they interact with the node graph is very hacky. I think it would be best to discuss the requirements for the system to figure out why we have ended up in such a mess.  ## Tools - Some tools have a confusing amount of state. For example PenToolData has 31 member variables which are only set is certain situations. This has lead to many bugs. - FSM states are inconsistent and confusing. For example the select tool fsm state for `Ready` contains the `NestedSelectionBehaviour` and the `Dragging` state contains the `has_dragged: bool` for some reason?  I feel like some of the tools need a rewrite @Keavon. However there is always a lot of random churn.  ## Inputs Rebinding inputs has been requested for a long time. However the input system has thousands of lines of macros involving many repeated things that would require a significant amount of refactoring to make a system that could be exposed to the user.  ## Translations Translations are basically impossible to implement now since there are many thousands of string literals scattered all over the code including gcore, editor, frontend svelte etc.  ## Multiple documents Having multiple documents visible at once seems to be a goal at some point. It is probably very useful for references / having a zoomed out overview etc. However we have hardcoded the active document many many times so it is basically impossible to refactor this.  ## SVG Poor integration with SVG. SVG imports are all flattened to a path rather than maintaining any structure at all. Exports end up as a mess of nested groups that is mostly unusable.  Vector editing performance is very bad with large documents (e.g. try dragging a layer in the red dress demo artwork)."
2730,Add origin to each layer,open,https://github.com/GraphiteEditor/Graphite/pull/2730,mTvare6,,,3,2025-06-18T04:01:56Z,2025-07-02T01:51:22Z,,,Sí,Closes #2225   
2725,Add highlight to layer outline on hover,open,https://github.com/GraphiteEditor/Graphite/pull/2725,Tumypmyp,,,1,2025-06-16T19:40:50Z,2025-06-28T13:25:58Z,,,Sí,"<!-- Please reference any relevant issue number below, optionally with a ""Closes""/""Resolves""/""Fixes"" prefix -->    Closes https://discord.com/channels/731730685944922173/881073965047636018/1383249080700108833  "
2717,Layer isolation mode,open,https://github.com/GraphiteEditor/Graphite/issues/2717,Keavon,"Design,Graphics",,0,2025-06-14T20:51:16Z,2025-06-14T20:51:16Z,,,No,This might be tricky to integrate with the renderer to deal with fading out the other layers outside the isolation. Needs design work. Relates to #2716.
2716,Improve Path tool layer and point selection behavior,open,https://github.com/GraphiteEditor/Graphite/issues/2716,Keavon,Paper Cut,4adex,0,2025-06-14T20:46:38Z,2025-07-02T08:54:58Z,,,No,"- [x] Click-dragging to box select from inside a shape (even if it's not filled) should not select all the shape's points and begin dragging them; it should allow the box selection just like outside the shape (#2712) - [ ] Our current way of clicking another layer to make it selected should not happen unless it's a double click (exception: if no layers are selected, single-click should work to select the first one). Without Shift, it transfers the selection to the not-yet-selected double click target object. If Shift is held, it adds or removes that layer to the selected objects. When added, its points will always start initially deselected. - [ ] Double-clicking an already selected layer, without Shift held, will select all its points. Other selected layers are unaffected (they keep their point selections and layer selection doesn't transfer away). - [ ] Alt + double-clicking an already selected layer will deselect all its points. - TODO: more changes?"
2715,Point sliding with G G,open,https://github.com/GraphiteEditor/Graphite/issues/2715,Keavon,Graphics,4adex,0,2025-06-14T20:35:25Z,2025-06-14T20:37:29Z,,,No,"In the Path tool, <kbd>G</kbd><kbd>G</kbd> slides the anchor along its adjacent segment(s) while adjusting its handle(s) to best approximate the initial curvature."
2708,Squircle / Corner Smoothing Support,open,https://github.com/GraphiteEditor/Graphite/issues/2708,enumouse,Graphics,,1,2025-06-11T19:12:06Z,2025-06-11T19:29:26Z,,,No,"I understand that this may be a very low priority, and it is a very subtle effect but in modern design it can often help massively.  Editors such as Figma have support for Corner Smoothing (sometimes the shape is referred to as a squircle) which blends the border radius to look more organic and smooth. To me this is one of those subtle features that I use a large amount, and it would be amazing to have this in an open-source project like this :) Thanks for the amazing work so far, I've just picked this editor up and it has potential  ![Image](https://github.com/user-attachments/assets/c699bad2-569b-461e-951e-1e9f32cc023f)  Image sourced from [a random site](https://cedarstudioswebdesign.com/blog/rounded-corners-vs-square/) from google as a visual example.  "
2707,Arabic writing support,open,https://github.com/GraphiteEditor/Graphite/issues/2707,ashrafbay,,,0,2025-06-11T11:16:07Z,2025-06-11T17:14:43Z,,,No,"Please add support for writing in Arabic, as it appears as rectangles when writing Arabic letters. Thank you."
2695,Tracking Issue: Improving editing support for vector meshes,open,https://github.com/GraphiteEditor/Graphite/issues/2695,4adex,,4adex,0,2025-06-06T07:01:09Z,2025-06-06T11:29:02Z,,,No,"This issue tracks existing bugs related to the Pen Tool and Path Tool when working with vector meshes, especially in scenarios where an anchor point is connected to more than two segments. Many existing features assume that anchors are only shared by at most two segments, which breaks certain behaviours when this assumption is violated.  - [ ] Pressing C while dragging a handle from an anchor point does not work well when more than two segments are connected to the corresponding anchor. (For both path tool and pen tool). - [ ] Alt + drag while a handle is selected makes the other handle “colinear and equidistant”, this behaviour needs to be configured keeping multiple handles in mind. - [ ] Tab press while dragging an handle swaps to other handle (this should only happen if two handles are in opposite of one another and with G1 continuity enabled) - [ ] Currently deleting an anchor adds a segment which connects the path but without the anchor point. This should not happen if the anchor is connected to more than two segments. - [ ] If a new segment is started from an intermediate anchor (an anchor which is connected to exactly two segments), the corresponding handle at start has G1 continuity enabled, which leads to unwanted handle movements in other segments."
2694,Wrong transform on shapes used in a boolean operation when coming from folders with different transforms,open,https://github.com/GraphiteEditor/Graphite/issues/2694,Keavon,,,0,2025-06-06T04:25:33Z,2025-06-06T04:25:33Z,,,No,https://github.com/user-attachments/assets/c7ad550f-0284-4a5c-9317-93f6b9cc7428
2690,GPU invert node,open,https://github.com/GraphiteEditor/Graphite/pull/2690,Firestar99,,,2,2025-06-05T14:07:21Z,2025-06-28T13:25:59Z,,,Sí,"![image](https://github.com/user-attachments/assets/ce996a78-6ca2-4b05-8cd9-4f5714d944d3)    Code below shows how much I had to change the gpu invert node. Most of the changes are due to not wanting to depend on `gcore`, as it currently doesn't compile for `no_std`. I think we could probably get away without changing it at all.  https://github.com/GraphiteEditor/Graphite/blob/bf2673428ae3260e4b55204bc930ab01ed8591d3/node-graph/gcore-shader/src/gpu_invert.rs#L4-L23    The rust-gpu shader calling it:  https://github.com/GraphiteEditor/Graphite/blob/bf2673428ae3260e4b55204bc930ab01ed8591d3/node-graph/gcore-shader/src/gpu_invert.rs#L33-L38  "
2688,Support correctly shifting a dragged layer into an empty layer that has a Transform node,open,https://github.com/GraphiteEditor/Graphite/issues/2688,Keavon,Paper Cut,,0,2025-06-05T01:20:47Z,2025-06-05T03:57:32Z,,,No,"Before #2689, which removed the dummy blank VectorData table row, we used to be able to drag an object layer into a layer with a Transform node, and it would previously counteract the Transform node's offset to prevent a shift. Now, in this particular case, it doesn't offset it.  https://github.com/user-attachments/assets/2d6d9f94-440a-44a2-988a-83ed23fa18b8"
2687,Using the path edit tool on one of the corners of a raster breaks the graph,open,https://github.com/GraphiteEditor/Graphite/issues/2687,redweasel,"Good First Issue,Paper Cut",,0,2025-06-04T23:18:39Z,2025-06-04T23:19:54Z,,,No,"To reproduce:  - Paste a raster image - Select the path tool - Click and drag on the image (can often happen accidentally) - Observe that the node graph has an error.  This is a bug, since the tooling should avoid breaking the graph as part of #2214"
2686,Line Tool doesn't reflect endpoint changes made by Path Tool,open,https://github.com/GraphiteEditor/Graphite/issues/2686,0SlowPoke0,,,0,2025-06-04T11:35:30Z,2025-06-04T11:35:30Z,,,No,"If we create a line using the Line Tool and then move one of its endpoints using the Path Tool, switching back to the Line Tool still shows the original line (before the endpoint was moved).  https://github.com/user-attachments/assets/5ddd2afb-e81c-491b-b6b4-0d6a6de66e52"
2685,Move the math expression parser from Pest to Chumsky and add more features,open,https://github.com/GraphiteEditor/Graphite/pull/2685,urisinger,,,1,2025-06-03T15:00:29Z,2025-06-29T12:46:35Z,,,Sí,"Part of #2026    Switches to the chumsky parser for performance, remove Unit support until #586 is resolved.    Improves parser performance by about 40%, while also reducing compile times and improving readability."
2681,Refactor the 'Bevel' and 'Area' nodes to use Kurbo instead of Bezier-rs,open,https://github.com/GraphiteEditor/Graphite/pull/2681,indierusty,,,0,2025-05-31T09:09:22Z,2025-06-28T13:25:58Z,,,Sí,Part of #2635  
2678,Fix #[range] to act as a soft min/max,open,https://github.com/GraphiteEditor/Graphite/pull/2678,mTvare6,,,2,2025-05-28T21:38:02Z,2025-07-01T02:32:29Z,,,Sí,Follow up to #2464  
2674,Spacing type radio button for repeat and circular repeat node,open,https://github.com/GraphiteEditor/Graphite/pull/2674,Ripper53,,,5,2025-05-26T16:42:13Z,2025-06-28T13:25:58Z,,,Sí,"<!-- Please reference any relevant issue number below, optionally with a ""Closes""/""Resolves""/""Fixes"" prefix -->    Closes #2551    1. Added `Spacing` radio parameter to `Repeat` node, containing `Span`, `Envelope`, `Pitch`, and `Gap` options for spacing. See issue for how they must be spaced.  2. Added `Angle Pitch` float parameter and `Spacing` radio parameter for `Circular Repeat` node. The `Span` option uses the calculations which already existed, the `Pitch` option rotates the next instance around the radius of the imaginary circle according to the `Angle Pitch` parameter and places the shape there.  3. Added a `unit` macro attribute. Given `string` parameter is displayed as a unit type for the parameter.  4. Added a `step` macro attribute. Given integer parameter is used as the step value for the parameter (ex. the arrow buttons on a number input increment/decrement by `step` amount).  5. Added a `display_decimal_places` macro attribute. Given positive integer parameter is used to know how many decimal places to display for the number input if they are not 0.    Usage for macros:  ```rust  #[unit("" px"")]  #[step(2.)]  #[display_decimal_places(1)]  num: f64  ```"
2670,Port to linesweeper,open,https://github.com/GraphiteEditor/Graphite/pull/2670,jneem,,,7,2025-05-25T10:59:14Z,2025-06-15T09:12:34Z,,,Sí,"<!-- Please reference any relevant issue number below, optionally with a ""Closes""/""Resolves""/""Fixes"" prefix -->    @Keavon   "
2669,Fix the Draw Canvas internal node and make it run automatically,open,https://github.com/GraphiteEditor/Graphite/issues/2669,Keavon,"Performance,Graphene",Firestar99,1,2025-05-25T06:06:40Z,2025-06-07T20:58:24Z,,,No,"Also investigate why, even when rendering Vello, we don't have fast raster drawing like we used to.  ---  The general idea behind the Draw Canvas node is this: right now, we render to an SVG string that gets stuffed into the DOM. SVG has a `<foreignObject><foreignObject>` tag that lets you stuff HTML into SVG. The Draw Canvas node, I believe, tells our SVG renderer (string generator) to instead create a `<foreignObject><canvas /><foreignObject>` so we have a canvas to draw to, instead of producing a `<image src=""..."" />` with a base64 PNG (which is super slow because of compressed PNG encoding, base64 encoding, transfer to DOM, insertion into DOM, and decoding and rendering by the browser). In some way I'm not familiar with, this node also runs the necessary JS to target and draw to that `<canvas />` element.  This node also had to be inserted manually, back when it worked. We need this to be done automatically so the user doesn't have to think about it. But only when rendering to the viewport, not when rendering to produce an SVG for export as a file. That, specifically, is controlled by the `RenderParams` struct's `for_export` field: <https://github.com/GraphiteEditor/Graphite/blob/master/node-graph/gcore/src/graphic_element/renderer.rs#L228>  I'm still of the opinion that perhaps the renderer should be in charge of generating and writing to the `<canvas />` instead of that being the responsibility of the Render Canvas node, though. But @TrueDoctor seemed to strongly prefer this route, despite it requiring a lot of infrastructure that we have so far lacked. I'd still encourage us to explore the option of simply making this a part of the renderer, though."
2664,Add fill tool support on strokes,open,https://github.com/GraphiteEditor/Graphite/pull/2664,seam0s-dev,,,8,2025-05-22T18:26:06Z,2025-07-01T17:34:09Z,,,Sí,This PR adds support for fill on strokes while using the fill tool as requested in #2615.
2659,Add basic thumbnail extraction to Rawkit,open,https://github.com/GraphiteEditor/Graphite/pull/2659,geom3trik,,,1,2025-05-20T17:38:42Z,2025-06-28T13:25:58Z,,,Sí,
2651,Deleting (dissolving) a point should scale its adjacent handles to minimize curvature change,open,https://github.com/GraphiteEditor/Graphite/issues/2651,Keavon,"Good First Issue,Paper Cut",4adex,4,2025-05-18T08:41:11Z,2025-06-25T07:54:49Z,,,No,"Currently, using <kbd>Delete</kbd> to dissolve a selected point causes it to change shape:  ![Image](https://github.com/user-attachments/assets/02aa914d-dda7-4480-aa48-070ce7e81717)  The default deletion mode for dissolving a point should aim to rescale the adjacent handles to best approximate the original curvature. See the algorithm described at https://math.stackexchange.com/a/879213/94039 which will hopefully work decently even in cases where an approximation of the original is required."
2647,Lasso/box selection switching and usage over existing layers,open,https://github.com/GraphiteEditor/Graphite/issues/2647,Keavon,"Good First Issue,Paper Cut",,2,2025-05-16T04:59:35Z,2025-06-30T00:57:21Z,,,No,"We want to update dragging and selection such that: - Ctrl+drag's lasso selection, upon releasing Ctrl, switches to a regular box selection, and back to lasso by holding Ctrl again. It draws a straight line between the cursor position last time the lasso was removed and when it's now restored, allowing the user to also use this as a technique for drawing straight line sections of the lasso, but also just to decide to use box selection instead of lasso at any time. - Ctrl+dragging an *object* currently drags its layer(s) but we want to make it instead always lasso select. This lets the user perform a lasso selection over an existing layer, or a box selection but releasing Ctrl as in the previous bullet point. - Lasso selection has a bug that should be fixed: aborting the lasso selection (RMB or Esc) then creating a new lasso selection ends up erroneously extending the previously drawn lasso path because abort fails to clear the lasso data (which also wastes memory!). (#2792)"
2646,Benchmark suite for 2D graphics,open,https://github.com/GraphiteEditor/Graphite/issues/2646,j-jasz,"Testing,Performance,Graphene,Graphics",,1,2025-05-15T18:23:34Z,2025-05-15T19:06:31Z,,,No,"Performance benchmarks are not only a useful tool as they are but they can be used for spotting regressions for setups that are not covered by CI pipeline. Considering Graphite ambitions - it is a matter of time until someone use it on a platform that wasn't properly tested during production.  Since Graphite is node based it should be possible to make a modular benchmark suite that can grow or change along Graphite. This approach can also allow for very flexible design of its outputs - the nodegraph, after measurements are done, could compile bar-charts, graphs, or other images of choice. It could also output data in non-image forms like csv files.  Benchmark suites also serve as a marketing tool. Graphite Benchmark could be integrated into existing open source solutions like Phoronix Test Suite, become one of the applications listed by PugetSystems, or be used by lots of tech-tubers doing hardware reviews on YT."
2641,File > Import should allow the user to place the image(s) in the viewport,open,https://github.com/GraphiteEditor/Graphite/pull/2641,Daniel53245,,,0,2025-05-12T00:43:24Z,2025-06-28T13:25:58Z,,,Sí,"<!-- Please reference any relevant issue number below, optionally with a ""Closes""/""Resolves""/""Fixes"" prefix -->    Closes #2621    I am trying to implement features mentioned in #2621     ## Progress  - Create new message PreviewImage and its handler in portfolio messages. Updated wasm bindings      ## TODO:   - [ ] Display Image under cursor when preview image  - [ ] Paste the Image when user selects where to paste it   "
2635,Tracking Issue: Refactor nodes to use Kurbo instead of Bezier-rs,open,https://github.com/GraphiteEditor/Graphite/issues/2635,indierusty,"Performance,Graphics",indierusty,0,2025-05-07T09:27:59Z,2025-07-02T06:12:36Z,,,No,"- [x] 'Offset Path' node (#2596) - [x] 'Solidify Stroke' node (#2608) - [x] 'Position on Path' and 'Tangent on Path' nodes (#2611) - [x] 'Sample Points' node (#2629) - [x] 'Scatter Points' node (#2634, #2657) - [x] 'Bounding Box' node (#2662) - [x] 'Morph' node (#2696) - [x] 'Spline' node (#2701) - [ ] 'Area' node (#2778) - [ ] 'Centroid' node - [ ] 'Bevel' node (#2681) - [ ] 'Round Corners' node - [ ] 'Remove Handles' node - [ ] 'Generate Handles' node - [ ] Refactor `ClickTarget` to use Kurbo - [ ] Refactor tools code to use Kurbo's structs and functions"
2627,Local testing in Windows,open,https://github.com/GraphiteEditor/Graphite/issues/2627,moosama76,Infrastructure,TrueDoctor,0,2025-05-01T22:11:39Z,2025-05-02T00:26:37Z,,,No,"Local testing in windows currently doesn't work because an error in node-graph/graph-craft/src/wasm_application_io.rs  212 |         use winit::platform::wayland::EventLoopBuilderExtWayland;     |                              ^^^^^^^ could not find `wayland` in `platform`     | note: found an item that was configured out    --> C:\Users\Mohamed Osama\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\winit-0.29.15\src\platform\mod.rs:30:9     | 30  | pub mod wayland;     |         ^^^^^^^ note: the item is gated here    --> C:\Users\Mohamed Osama\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\winit-0.29.15\src\platform\mod.rs:29:1     | 29  | #[cfg(wayland_platform)]     | ^^^^^^^^^^^^^^^^^^^^^^^^  error[E0599]: no method named `with_any_thread` found for struct `EventLoopBuilder` in the current scope    --> node-graph\graph-craft\src\wasm_application_io.rs:215:63     | 215 |         let event_loop = winit::event_loop::EventLoopBuilder::new().with_any_thread(true).build().unwrap();     |                                                                     ^^^^^^^^^^^^^^^ method not found in `EventLoopBuilder<()>`     |    ::: C:\Users\Mohamed Osama\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\winit-0.29.15\src\platform\windows.rs:33:8     | 33  |     fn with_any_thread(&mut self, any_thread: bool) -> &mut Self;     |        --------------- the method is available for `EventLoopBuilder<()>` here     |     = help: items from traits can only be used if the trait is in scope help: trait `EventLoopBuilderExtWindows` which provides `with_any_thread` is implemented but not in scope; perhaps you want to import it"
2622,Snap lines to tangents at any point of the line,open,https://github.com/GraphiteEditor/Graphite/pull/2622,moosama76,,,3,2025-04-29T02:32:06Z,2025-06-28T13:25:58Z,,,Sí,"- snap any point on line to tangents instead of snapping endpoint  - remove fully_constrained as per 0hypercube on Discord    <!-- Please reference any relevant issue number below, optionally with a ""Closes""/""Resolves""/""Fixes"" prefix -->    part of #2352"
2621,File > Import should allow the user to place the image(s) in the viewport,open,https://github.com/GraphiteEditor/Graphite/issues/2621,Keavon,Good First Issue,,2,2025-04-29T00:20:15Z,2025-05-06T06:09:47Z,,,No,"File > Import should support multiple imports at once. If there's no document open, it should do what it does now by creating a document with the correctly sized artboard, one per imported file. Except we should probably make the be part of File > Open instead of Import, so Open works with `.graphite` files as well as regular images.  But if a document is open, that's what Import is for. We want that to not place the import in the center of the viewport's current view, but instead attach it to the user's cursor and show a thumbnail preview of the image. Clicking places it center at the chosen location. Dragging draws a box with the image's aspect ratio which dictates where it will be placed. Once that's complete, it moves on to the next one if multiple images were imported."
2617,Nudges in the same direction should be combined in history,open,https://github.com/GraphiteEditor/Graphite/issues/2617,Keavon,"Architecture,Paper Cut",,1,2025-04-25T03:39:37Z,2025-04-30T19:50:46Z,,,No,"Any number of nudges (with the arrow key) in the same direction should be combined into the same history step. So if you nudge 53px to the right with Shift+right arrow 5 times and right arrow 3 times, we should be able to use undo one instead of 8 times to return to where we were. Then switching directions (or doing anything else that creates a history step) should become a new point in history."
2616,Add an isolation mode to the Path tool,open,https://github.com/GraphiteEditor/Graphite/issues/2616,Keavon,Paper Cut,,2,2025-04-25T03:25:25Z,2025-05-04T19:13:39Z,,,No,"There should be a checkbox added to the Path tool control bar. When active, it fades out all the non-selected layers. Editing is constrained to the selected layers only, and selection can't target any other layers unless the <kbd>Ctrl</kbd> modifier key is pressed. This ensures the user doesn't have to fight to select the intended paths without accidentally selecting other layers.  Fading out the non-selected layers might be challenging to figure out a way of implementing."
2615,Make the Fill tool work on strokes,open,https://github.com/GraphiteEditor/Graphite/issues/2615,Keavon,Graphics,,0,2025-04-24T09:20:24Z,2025-05-12T21:00:52Z,,,No,"When hovering over a layer stroke, it should display the dotted overlay like we do for fills:  ![Image](https://github.com/user-attachments/assets/efe41bd3-c7f4-4b84-823d-c169dd5906fb)  So in this image, we'd have the white dotted lines over the black layer stroke instead. See <https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle>.  Additionally, we'd like to prevent the dotted overlays from extending into half the stroke area, like we see above. This can be achieved by using some compositing tricks with the 2D canvas API to render the stroke in such a manner that it erases the drawable area where the fill dotted pattern goes. (This can't affect other overlays also drawn in that area, though, so no erasing the full canvas in that area.)"
2613,Incorrect oblique snapping to a path,open,https://github.com/GraphiteEditor/Graphite/issues/2613,mTvare6,"Good First Issue,Paper Cut",,5,2025-04-23T12:55:27Z,2025-05-02T18:01:36Z,,,No,https://github.com/user-attachments/assets/c2e52101-15f3-4a78-a828-131cb852c18b  Haven't been able to reproduce it later.
2607,Prevent Freehand and Line tools from creating empty layers when clicking but not dragging to draw,open,https://github.com/GraphiteEditor/Graphite/pull/2607,Abhinavpatel00,,,2,2025-04-22T06:03:00Z,2025-06-28T13:25:58Z,,,Sí,Skip node creation for zero-length lines in Line tool and drawings in Freehand tool  
2603,Vector mesh data structure design ideas,open,https://github.com/GraphiteEditor/Graphite/issues/2603,Keavon,"Architecture,Graphics",,0,2025-04-21T11:41:02Z,2025-04-24T12:57:47Z,,,No,"This is a WIP brain dump for a new stab at the generalized mesh vector data format. More thought is needed, but I wanted to put this down here before I forget.  # Tables  To illustrate the data dependencies amongst the proposed tables, each bullet point stores data referenced by its sub-bullet points.  - **Points**   - **Paths**     - **Bends**     - **Stroke Styles**     - **Fill Styles**  ## Points  Points describe positions in the local coordinate space. On their own, they represent a point cloud.  ## Paths  Paths describe the graph connectivity by listing [walks](https://en.wikipedia.org/wiki/Path_(graph_theory)) of points. Each path is a list (or sub-table?) of point ranges, each representing a polyline. At least two points must be part of a path. A closed path is one that returns to its start point, representing a face (in the context of a 3D mesh like an OBJ file describes). Collectively, all the paths represent a vector mesh of straight edges. Paths have one-to-one correspondence with an imported SVG's subpaths in terms of topology (at least, for closed or non-filled shapes). With branching topology, multiple open paths make up portions of the overall shape.  ## Bends  Bends describe the curvature associated with every edge in a referenced path. They can be various types, such as splines (no handles specified), linear (essentially a no-op), quadratic (one handle), cubic (two handles), or other more exotic curve types. Handle points are references into the points table. If two paths independently specify the same edge or edges, their associated bends may curve them differently from one another.  ## Stroke Styles  - #2310  Stroke styles describe all the paths corresponding to a particular stroke's paint. Each one contains a list (or sub-table?) of every path given the same style. If the style needs to change along a path, that needs to be broken up into separate adjoined paths. This is also the level at which tapered/variable stroke widths (#2207) are described, as well as [dashes](https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute/stroke-dasharray), [caps](https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute/stroke-linecap), [joins](https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute/stroke-linejoin), and [markers](https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute/marker-start).  ## Fill Styles  - #2309  Fill styles describe all the boundaries corresponding to a particular fill's paint (or no paint for unfilled space). Each one contains a list (or sub-table?) of every boundary. Boundaries can be entire paths, or specific ranges of segments within a path, or the first/last half of a single segment.  TBD: how does [fill rule](https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute/fill-rule) fit in, if that's applicable at the level of the whole shape? Maybe traditional SVG-style styling information and fill rule applies to a single VectorData while the full VectorDataTable uses the mesh fill strategy. So that might also mean some of the above descriptions need to be adjusted to work where mesh vector operates at the VectorDataTable level while possibly VectorData only deals with non-branching paths?"
2601,Guide lines,open,https://github.com/GraphiteEditor/Graphite/issues/2601,Keavon,Good First Issue,,1,2025-04-20T07:01:34Z,2025-05-04T10:04:07Z,,,No,"Drag from a ruler to create a horizontal or vertical guide line. (Drag it back into the ruler to delete it.) This is positioned in document space. *View* > *Guides* should go next to the existing *View* > *Rulers* menu to toggle their visibility. Snapping works with them like they're a line (just without endpoints, since guide lines are infinitely long). Like everything else that you can drag in Graphite, <kbd>Esc</kbd> and right-click cancel a drag, putting it back where it began (or deleting it if this was just brought into existence by dragging out of a ruler)."
2598,Folder with transform produces warning,open,https://github.com/GraphiteEditor/Graphite/issues/2598,0HyperCube,Paper Cut,,0,2025-04-19T10:12:28Z,2025-04-19T10:15:36Z,,,No,Create a rectangle. Put it into a folder Place a transform node in front of the folder. ![Node Network](https://github.com/user-attachments/assets/a673cbf1-5141-4e5c-9c8c-cfd7c2fb335e)  Observe warning in console: > warn	editor/src/node_graph_executor/runtime.rs:298 failed to downcast monitor node output
2595,Path tool box selection starts on mousedown at a far-off location when animation is playing,open,https://github.com/GraphiteEditor/Graphite/issues/2595,Keavon,Good First Issue,,0,2025-04-18T07:54:21Z,2025-04-18T07:54:21Z,,,No,1. Switch to the Path tool 2. Hit play to start animation playback 3. Click but don't drag or release— notice how the box selection has gone from some far-off location to the current cursor location 4. Pan the document and repeat the above steps— notice how the starting point of the erroneous box changes in relation to how you pan
2592,Packing algorithm node,open,https://github.com/GraphiteEditor/Graphite/issues/2592,Keavon,"Help Wanted,Graphics",,5,2025-04-17T08:55:20Z,2025-05-04T10:15:13Z,,,No,Packing algorithms are tricky! But we should find or build one that's high quality and efficient based on whatever the state of the art is in this field of research that supports nonconvex shapes.  The motivating use case is creating a sign like this out of icons:  ![Image](https://github.com/user-attachments/assets/c595e596-11e0-4b56-9c12-bbfe8495208f)
2584,Drawing by appending to the selected layer fails on empty layers,open,https://github.com/GraphiteEditor/Graphite/issues/2584,Keavon,Good First Issue,,0,2025-04-16T08:10:06Z,2025-04-16T08:10:06Z,,,No,"You can use the Pen, Spline, or Freehand tool to draw while holding <kbd>Shift</kbd> to append to an existing selected layer of vector content. But if you create a brand new layer and draw on it with <kbd>Shift</kbd> held, this is the result:  ![Image](https://github.com/user-attachments/assets/d1b723c0-98e7-44c8-8bec-953397a46b76)  Whereas this is the normal result of drawing (where a new layer appears):  ![Image](https://github.com/user-attachments/assets/79e70028-7ee8-41a5-85c4-c325e09c0152)  So we need to detect if no existing vector data is there, and if so, add the Path and Stroke nodes instead of the Flatten Vector Elements node.  It also needs to work on ""empty"" layers that do contain modifier nodes, like this:  ![Image](https://github.com/user-attachments/assets/0acc3a83-a994-4285-bc90-d6691f4f5c99)  Currently, append-drawing results in this:  ![Image](https://github.com/user-attachments/assets/070203ca-93be-474c-a808-d3c8e2c3ae62)  But the desired output in this case should be:  ![Image](https://github.com/user-attachments/assets/0e935a76-b0e5-4bac-a146-10f16ae8d944)"
2582,Drawing a shape at non-100% viewport zoom wrongly applies the scale to the Transform node not the shape,open,https://github.com/GraphiteEditor/Graphite/issues/2582,Keavon,Good First Issue,,2,2025-04-16T05:44:19Z,2025-04-16T08:58:34Z,,,No,"1. Zoom out so you're not at 100% viewport zoom. 2. Draw a rectangle. 3. Notice the Transform node has a scale value other than `1` corresponding to the zoom level of the viewport. 4. This should be `1` and the viewport zoom should have been applied to the calculation of the rectangle dimensions instead.  This occurs with Rectangle, Ellipse, Polygon, and Star— but not Line."
2567,"Single, unified Value node that picks its type from usage",open,https://github.com/GraphiteEditor/Graphite/issues/2567,Keavon,Graphene,,0,2025-04-14T12:38:55Z,2025-04-14T22:04:58Z,,,No,Related: https://github.com/GraphiteEditor/Graphite/issues/2447
2556,Add proportional editing to the Path tool,open,https://github.com/GraphiteEditor/Graphite/pull/2556,singhutsav5502,,,18,2025-04-11T21:41:38Z,2025-06-28T13:25:58Z,,,Sí,"<!-- Please reference any relevant issue number below, optionally with a ""Closes""/""Resolves""/""Fixes"" prefix -->  # Adds Proportional Editing Mode  Functionality similar to Blenders Proportional Edit tool ported to Graphites 2D implementation.    **Alt + P** to toggle Proportional Editing mode.  **Mouse Scroll Up/Down** to increase/decrease **Influence Radius.**  Integrate with **GRS**  tool.    ### Introduces 8 falloff types:  1. Constant  2. Linear  3. Sharp  4. Root  5. Sphere  6. Smooth  7. Random  8. Inverse Square    Closes #2317  "
2554,Path tool click targets erroneously include hidden 'Path' node modifications,open,https://github.com/GraphiteEditor/Graphite/issues/2554,Keavon,Good First Issue,,0,2025-04-10T22:08:42Z,2025-04-10T22:08:42Z,,,No,"When generating click targets, hidden nodes such as the Path node need to be bypassed.  https://github.com/user-attachments/assets/01d7c2f4-80bb-477d-aea2-c2db7b5de446"
2552,Space when dragging to shift what's being drawn,open,https://github.com/GraphiteEditor/Graphite/issues/2552,Keavon,"Good First Issue,Paper Cut",,0,2025-04-10T11:59:57Z,2025-04-10T11:59:57Z,,,No,"For anything that can be dragged with the mouse clicked down, <kbd>Space</kbd> should offset it while held down. We have this in a few places (like dragging the next preview segment in the Pen tool), but it should be universal across all dragging actions in every tool.  - Select tool:   - [ ] Transform cage resizing, skewing, and rotating   - [ ] Box and lasso area selection - Artboard tool:   - [ ] Artboard drawing and resizing - Gradient tool:   - [ ] Gradient line drawing and endpoint moving - Path tool:   - [ ] Box and lasso area selection - Line tool:   - [ ] Line drawing and endpoint moving - Rectangle/Ellipse/Polygon tools:   - [ ] New shape drawing (and resizing after #1715) - Text tool:   - [ ] Text area drawing and resizing - And in the node graph:   - [ ] Box (and lasso after #2532) area selection"
2551,Add options to the 'Repeat' node for the spacing with envelope/span/pitch/gap,open,https://github.com/GraphiteEditor/Graphite/issues/2551,Keavon,"Good First Issue,Paper Cut",,1,2025-04-10T11:33:37Z,2025-06-10T00:51:46Z,,,No,"We currently implement the Repeat node based on the ""span"" method of distributing spacing (this should remain the default). A radio button should be added to pick other methods:  - `envelope = span + W` - `span = (N - 1) * pitch` - `pitch` - `gap = pitch - W`  ![Image](https://github.com/user-attachments/assets/b1034365-2f8a-449e-9d2e-7ded4c7eebe1)  The Circular Repeat node should also be given new options for min and max angle (without being limited to a total of 360°) and an angular equivalent to span and pitch (I don't think envelope and gap make sense in the angular context— essentially polar coordinates?)."
2547,Package and distribute Graphite across common desktop platforms,open,https://github.com/GraphiteEditor/Graphite/issues/2547,Keavon,Infrastructure,,0,2025-04-09T09:34:29Z,2025-04-09T09:41:56Z,,,No,"Distribution, the final step of [#2535 (Tracking Issue: Desktop application)](https://github.com/GraphiteEditor/Graphite/issues/2535)."
2545,Implement PWA resource caching and self-contained distribution of all resources (UI fonts),open,https://github.com/GraphiteEditor/Graphite/issues/2545,Keavon,Web,Keavon,0,2025-04-09T09:23:06Z,2025-05-19T09:40:15Z,,,No,https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Guides/Caching  Also: #1338
2544,Release desktop builds through Steam,open,https://github.com/GraphiteEditor/Graphite/issues/2544,Keavon,Infrastructure,,0,2025-04-09T09:13:15Z,2025-04-09T09:13:15Z,,,No,
2543,Release Windows builds through the Microsoft Store,open,https://github.com/GraphiteEditor/Graphite/issues/2543,Keavon,Infrastructure,,0,2025-04-09T09:12:27Z,2025-04-09T09:12:27Z,,,No,
2542,Release Mac builds through the Mac App Store,open,https://github.com/GraphiteEditor/Graphite/issues/2542,Keavon,Infrastructure,,0,2025-04-09T09:10:29Z,2025-04-09T09:10:29Z,,,No,
2541,Get the viewport to render beneath the Tauri webview,open,https://github.com/GraphiteEditor/Graphite/issues/2541,Keavon,"Help Wanted,Architecture",,0,2025-04-09T09:02:04Z,2025-06-10T00:33:01Z,,,No,"We will be rendering the Tauri webview for the Graphite GUI—where a transparent hole is cut out of the viewport area—over the top of the natively rendered viewport. The OS compositor needs to allow us to draw first the viewport, then the webview, every frame. This needs to work on Windows, Mac, and Linux.  Currently, we are blocked by issues with the Wayland compositor (an X11 fallback might be a feasible mitigation) and Windows API. See: - https://github.com/tauri-apps/tauri/issues/9220 - @TrueDoctor please add more issues for the pertinent ecosystem blockers and expand this with the state of affairs"
2540,Customize native window and utilization of native APIs,open,https://github.com/GraphiteEditor/Graphite/issues/2540,Keavon,"Architecture,Web",,4,2025-04-09T08:54:20Z,2025-05-25T07:38:58Z,,,No,"- Window title bar - File I/O (save, save as, open, import, export) - Automatically listing all local fonts - Clipboard access - More...?"
2539,Release desktop builds for direct download with an installer and self-updater,open,https://github.com/GraphiteEditor/Graphite/issues/2539,Keavon,"Architecture,Infrastructure",,0,2025-04-09T08:51:03Z,2025-04-09T09:15:55Z,,,No,
2538,Investigate moving editor code from Wasm to native in Tauri builds,open,https://github.com/GraphiteEditor/Graphite/issues/2538,Keavon,"Architecture,Performance",,0,2025-04-09T08:48:12Z,2025-04-09T08:48:12Z,,,No,"Rendering is where the heavy lifting occurs and that's what runs natively in the current Graphite integration of Tauri. The editor business logic is less performance sensitive (and any encountered slowness should be considered a bug) so for integration simplicity and cleanliness, we're initially keeping that running within Wasm.  It is also possible that this is the best engineering solution and we do want to stick with it. The web <-> native boundary has some IPC/websocket latency and the editor code directly processes user interactions with the UI. To keep it feeling as snappy as it does on web (which achieves a responsiveness that feels like a native app, not most web apps), it might be best to keep in Wasm if latency has a larger impact than processing speed.  A prototype should be made for this, and then the click-to-photon latency should be measured to compare actual responsiveness in both scenarios, under an array of workloads. If typical cases involve prolonged processing times for being non-native such that the final UI updates appear at a later time than they would under the prolonged latency scenario of running the editor code natively, then we pick the most responsive option accordingly. Special care should be taken for the most latency sensitive activities like painting, where results need to show up on screen with the least delay possible. There are special APIs both [on web](https://developer.mozilla.org/en-US/docs/Web/API/Ink_API) and (I believe) native for reducing some of that delay that may or may not be applicable/useful.  Rendering (graph execution) is and will remain native, which provides the performance gain that is of most significance. This issue merely describes a potential minor optimization to explore further at a later point in time."
2535,Tracking Issue: Desktop application,open,https://github.com/GraphiteEditor/Graphite/issues/2535,Keavon,"Help Wanted,Architecture,Infrastructure,Web,Performance",TrueDoctor,2,2025-04-09T08:19:44Z,2025-04-27T20:30:43Z,,,No,"The Graphite desktop app is designed to bring native rendering performance to users and improve ergonomics for file access, font access, and other APIs that have limited or no browser support. Web and desktop will both remain first-class targets.  [Tauri](https://tauri.app/) is an Electron alternative that uses the local OS's webview to provide a low-overhead web wrapper as a desktop app while keeping the Rust code running natively. Thus, only the GUI runs in JavaScript, and that code is built to be thin and lightweight so the interface remains snappy and fluid (both on web and desktop).  This tracking issue organizes the work that has and will go into stabilizing and releasing this feature. If you're awaiting the desktop app, feel free to subscribe to this issue and check back as more sub-tasks get completed."
2532,Add lasso selection mode to the node graph as well,open,https://github.com/GraphiteEditor/Graphite/issues/2532,Keavon,"Good First Issue,Paper Cut",,0,2025-04-08T08:20:13Z,2025-04-08T08:20:13Z,,,No,"<kbd>Ctrl</kbd> dragging in the canvas creates a lasso selection instead of a box selection. For consistency, the same should occur in the node graph.  This is soft-blocked on #1922 because the current box selection is implemented in Svelte, not using the overlay system which the canvas box/lasso selection both use. This could technically be implemented using an SVG path in Svelte but that's potentially wasted effort once the above issue is completed and the node graph no longer uses Svelte."
2530,"In the graph, a click that deselects a node loses the entered input field value",open,https://github.com/GraphiteEditor/Graphite/issues/2530,Keavon,"Help Wanted,Paper Cut",,1,2025-04-08T03:32:04Z,2025-05-29T11:08:32Z,,,No,"In the graph, if you have a node or layer selected, the Properties panel populates its parameter widgets. If you type a value in a widget's input field, and attempt to confirm that new value by clicking out of the input box elsewhere in the graph (to deselect everything, or select a new node) then the Properties panel ends up clearing all the widgets *before* the updated value has a chance to be saved.  https://github.com/user-attachments/assets/4e5b7d37-175f-426b-8c31-db50e6a9ee5e  However, this isn't an issue in the Layers panel or the viewport (rather than the graph). Deselecting a layer in the Layers panel (by clicking in the empty space beneath the layers, or clicking on another layer) or in the viewport (by clicking the artwork background or another layer) does successfully commit the input field's updated value before the widget disappears. So whatever approach is taken in those cases needs to be applied to the case of the graph in regard to (presumably) message ordering."
2528,Familiar shortcut commands,open,https://github.com/GraphiteEditor/Graphite/issues/2528,Keavon,Design,,0,2025-04-08T00:17:14Z,2025-04-08T03:44:03Z,,,No,"To maintain familiarity with industry software, here are some commands that we should aim to develop:  - <kbd>Alt</kbd><kbd>Delete/Backspace</kbd>: If one layer is selected, fill it completely with the primary working color - <kbd>Alt</kbd><kbd>Shift</kbd><kbd>Delete/Backspace</kbd>: If one layer is selected, fill its color channels (preserving transparency) with the primary working color - <kbd>Ctrl</kbd><kbd>Delete/Backspace</kbd>: If one layer is selected, fill it with the secondary working color - <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>Delete/Backspace</kbd>: If one layer is selected, fill its color channels (preserving transparency) with the secondary working color - <kbd>Shift</kbd><kbd>Delete/Backspace</kbd>: Open a menu to choose the settings for a fill node that can optionally preserve transparency, choose a blend mode and opacity, and pick from what custom paint type (color/gradient/pattern) to use  This list will expand over time."
2526,Add Vello support for non-scaling stroke width,open,https://github.com/GraphiteEditor/Graphite/issues/2526,Keavon,Graphics,,0,2025-04-07T00:17:34Z,2025-04-07T00:17:54Z,,,No,"See `Stroke::non_scaling` in `style.rs`.  This is used by the Outline view mode and works in our SVG renderer but isn't supported in our Vello renderer.  As for whether we allow users to set this on their own vector data, this needs some consideration because it violates our usual rule on scale invariance that's needed for consistent views of procedurally generated artwork regardless of scale. We could possibly make this the concept of a ""hairline stroke"" and find a way to draw it that's consistent across scales, such as making its thickness zero as far as any procedural operator nodes are concerned. Another option is to consider the ""zoom factor"" input to the `Context` call argument which lets nodes explicitly generate different content (such as level of detail in an OpenStreetMap view) when zooming (unless overridden and locked to a specific value in the navigation zoom popover)."
2524,Importing SVG gradients with userSpaceOnUse,open,https://github.com/GraphiteEditor/Graphite/issues/2524,0HyperCube,Good First Issue,,0,2025-04-06T17:38:31Z,2025-04-06T17:38:31Z,,,No,"We don't currently handle importing SVGs with `gradientUnits=""userSpaceOnUse""`.   Relevant code: https://github.com/GraphiteEditor/Graphite/blob/41288d7642bae17d3da13670dc9fed50ca656cfd/editor/src/messages/portfolio/document/graph_operation/graph_operation_message_handler.rs#L399-L400  Sample svg: ![circle with userSpaceOnUse gradient](https://github.com/user-attachments/assets/4f0aa527-9ddf-4563-939a-25543d233c5e) ``` <svg version=""1.1"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" width=""174"" height=""174"" viewBox=""0,0,174,174""><defs><radialGradient cx=""240"" cy=""180"" r=""87"" gradientUnits=""userSpaceOnUse"" id=""color-1""><stop offset=""0"" stop-color=""#ffffff""/><stop offset=""1"" stop-color=""#000000""/></radialGradient></defs><g transform=""translate(-153,-93)""><g data-paper-data=""{&quot;isPaintingLayer&quot;:true}"" fill=""url(#color-1)"" fill-rule=""nonzero"" stroke=""#000000"" stroke-width=""0"" stroke-linecap=""butt"" stroke-linejoin=""miter"" stroke-miterlimit=""10"" stroke-dasharray="""" stroke-dashoffset=""0"" style=""mix-blend-mode: normal""><path d=""M153,180c0,-48.04877 38.95123,-87 87,-87c48.04877,0 87,38.95123 87,87c0,48.04877 -38.95123,87 -87,87c-48.04877,0 -87,-38.95123 -87,-87z""/></g></g></svg> ```  A test that this works properly would also be greatly appreciated.  "
2522,RFC: Dynamic Tables,open,https://github.com/GraphiteEditor/Graphite/pull/2522,TrueDoctor,,,0,2025-04-06T08:37:44Z,2025-06-28T13:25:58Z,,,Sí,"<!-- Please reference any relevant issue number below, optionally with a ""Closes""/""Resolves""/""Fixes"" prefix -->      This RFC describes the planned addition of dynamic tables with attributes to graphite"
2520,Procedural vector data and attributes design considerations,open,https://github.com/GraphiteEditor/Graphite/issues/2520,Keavon,Architecture,,1,2025-04-06T04:05:39Z,2025-04-06T09:33:58Z,,,No,"Partially related to #2522, #2309, #1832, #1834, #950.  - Data-oriented design (struct of arrays) - Harmony with Vello’s GPU-based pipeline - SIMD and compute shader friendliness - Sequential (like SVG) vs. index buffer (like OBJ) approach - Short-term: vector paths (SVG-style open or closed paths) - Long-term: vector meshes (points, segments, and regions) - Segments representing any curve spline type - Basing paths around segments or manipulator groups - Relationship between anchors and handles - Columns for attributes (and custom attributes for passing along any info like color palette or other variables) - Open or closed faces - Subpaths - Fill rule - Winding order - Styling with fill - Styling with stroke - Stroke taper - Stroke being affected by parent groups that impose a stretch/skew transformation - Stroke caps/joins varying per-point - Avoiding cloning per node - Integration of monadic attributes into the graph - Copy on write attributes - Lazy evaluation of whole attributes (columns) or ranges (rows) - Propagating parametric modeling constraint relationships - Be a superset of a 3D mesh (including a Z axis) to support 3D to 2D vector flattening - Vector mesh depth sorting in the event of overlapping faces - Support for a bisection style drawing approach shown in https://www.youtube.com/watch?v=EZLEkhxiw9o - Support for a Shape Builder tool and Trim tool where you draw cuts through segments"
2519,Allow the Fill tool to flood fill raster images,open,https://github.com/GraphiteEditor/Graphite/pull/2519,EllenGYY,,,4,2025-04-06T01:38:41Z,2025-06-28T13:25:58Z,,,Sí,"	  •	Adds a “Raster Fill” node when the fill bucket tool is used on a raster layer.  •	Non-destructive: deleting the node restores the image to its original state.  •	Users can adjust the “tolerance” of color similarity, based on Euclidean distance in LAB color space (currently per-layer only).    Possible improvements:  	•	Allow users to adjust and delete individual fill operations on the same layer, including their respective tolerance settings.  	•	Add support for gradient fills.    ![raster-fill-demo](https://github.com/user-attachments/assets/babafced-1859-45b1-866f-c1b35d85d0f9)     "
2517,Support multiple outputs in a proto node definition with return struct unpacking in the node macro,open,https://github.com/GraphiteEditor/Graphite/issues/2517,Keavon,Graphene,,0,2025-04-05T07:15:38Z,2025-04-05T07:15:38Z,,,No,"The node macro should be updated to convert a returned struct (with each field annotated with an attribute for metadata like the output name) into the necessary node definitions to unpack the struct as separate outputs. This could occur by generating a subgraph, but an approach which allows for avoiding that would be preferred."
2515,SVG import is exponentially slow with respect to the number of layers,open,https://github.com/GraphiteEditor/Graphite/issues/2515,Keavon,Performance,adamgerhant,0,2025-04-04T09:06:12Z,2025-04-04T09:06:12Z,,,No,"During the import process, we are finding space to push the nodes. As more nodes are added, each additional node has to account for all the existing ones. So this probably is taking roughly O(n^2) because of:  ![Image](https://github.com/user-attachments/assets/f25541fb-877c-47b3-9d1f-d472c08a602a)  And we can see the call stack depth grow over time (actually, we're seeing the stack depth grow linearly but take increasingly long to do so over time, hence the inverse of the graph of the equation above):  ![Image](https://github.com/user-attachments/assets/d215da94-0db8-43c4-890d-dbbb4adf529b)  This repeatedly alternates between these two functions: - `NodeNetworkInterface::vertical_shift_with_push` - `NodeNetworkInterface::shift_node_or_parent`  We should probably avoid running any of this logic and just precompute the coordinates of each layer in the resulting layers that get added to the graph. We should also see if this repeated looping between those two functions can be avoided in the general case, even outside of SVG importing.  [Reproduction SVG](https://github.com/user-attachments/assets/79860023-34f8-4b7c-8fdb-86224de681c4) (takes about 10 seconds to open)"
2514,Blog post: Graphite progress report (Q1 2025),open,https://github.com/GraphiteEditor/Graphite/pull/2514,0HyperCube,,Keavon,1,2025-04-03T21:29:11Z,2025-06-28T13:25:58Z,,,Sí,Changes were aggregated using my [go script](https://github.com/0HyperCube/change-gen).
2505,Testing auto panning,open,https://github.com/GraphiteEditor/Graphite/issues/2505,0HyperCube,Testing,,0,2025-03-31T20:01:07Z,2025-03-31T20:01:07Z,,,No,Auto panning is broken #2504. We should probably add tests to avoid this happening again.  Test cases: - Select tool   - Drawing box   - Dragging   - Resizing - Artboard   - Drawing   - Dragging   - Resizing - Pen - Path - Rectangle - Ellipse - Line - Pen - etc.
2501,Edit->Duplicate in the node graph makes extra duplicates of reused input nodes,open,https://github.com/GraphiteEditor/Graphite/issues/2501,cpelling,Good First Issue,,1,2025-03-30T01:20:47Z,2025-03-30T08:01:34Z,,,No,"**Repro steps:**   1. Create a project with one Text node supplying input to two layers (or use the attached project). 2. Drag-select the two layers and their input nodes.    * In the attached project, use the bottom two layers, with the text ""Shut up and take my money!"" 3. Choose Edit -> Duplicate.    * It seems necessary to use the menu option, NOT the Ctrl-D keyboard shortcut, as odd as that sounds.  **Expected result:** The selected nodes are duplicated exactly once, adding two new layers.  **Observed result:** In _addition_ to the expected result, we now have one copy of the original Text node for each of the original two layers. This is almost impossible to notice since they overlap perfectly. See below for a more detailed explanation.  **Suggested fix:** * Don't make extra copies of the re-used input nodes. * For extra points, systemically prevent the case of nodes ever having exactly the same x and y coordinates in the node graph. When this happens it is REALLY confusing.  **Details:** In the attached project, I was attempting to create a ""shadow"" or outline for some meme text, using multiple layers. I reused the Text and Transform nodes for both layers using the node graph editor (see screenshot).  Later, I wanted a second line of text, so I box-selected my two layers and their input nodes and chose Edit -> Duplicate. This mostly worked, apart from some messed up wiring.  Even later, I tried to edit the top line of text and was confused as to why my edits were applying only to the white text and not the black text shadow:  ![Image](https://github.com/user-attachments/assets/904f87c5-8d33-46a0-99dd-699a6133ac06)  Eventually I realised the topmost Text node is actually TWO Text nodes, perfectly overlapping so it's impossible to see. Here I've moved them slightly to demonstrate (note, the graph structure is identical to the above image):  ![Image](https://github.com/user-attachments/assets/5f3b362d-a90b-4aab-a663-9cdfca864d2d)  I can reproduce this by similarly duplicating the bottom two layers with the text ""Shut up and take my money"".  [invalidate-cache.zip](https://github.com/user-attachments/files/19523590/invalidate-cache.zip)"
2500,RFC: Fine Grained Context Caching,open,https://github.com/GraphiteEditor/Graphite/pull/2500,TrueDoctor,,TrueDoctor,0,2025-03-29T23:02:17Z,2025-06-28T13:25:58Z,,,Sí,"<!-- Please reference any relevant issue number below, optionally with a ""Closes""/""Resolves""/""Fixes"" prefix -->    This RFC describes the implementation of fine-grained context caching    Covers part of #1607"
2499,Generate a visualization of the editor's hierarchical message system tree,open,https://github.com/GraphiteEditor/Graphite/pull/2499,MohdMohsin97,,,1,2025-03-29T10:43:33Z,2025-06-28T13:25:58Z,,,Sí,This PR add a HierarchicalTree trait that allows enums to be visualized in a tree-like structure. The generate_hierarchical_tree give Vec<String>.    Example:  BroadcastMessage::generate_hierarchical_tree give Vec<String> when printed gives:  BroadcastMessage  ├──TriggerEvent  │   ├──AnimationFrame  │   ├──CanvasTransformed  │   ├──ToolAbort  │   ├──SelectionChanged  │   └──WorkingColorChanged  ├──SubscribeEvent  └──UnsubscribeEvent
2488,Testing gradient tool,open,https://github.com/GraphiteEditor/Graphite/issues/2488,0HyperCube,Testing,,0,2025-03-25T21:51:18Z,2025-04-16T13:41:38Z,,,No,"- [x] Drawing on offset documents (#2481) - [x] <kbd>Shift</kbd> to snap to 15 degrees (#2481) - [x] Double click to insert a gradient stop (#2527) - [x] Dragging the stop rearranges the ordering (#2565) - [x] Dragging an endpoint sets the correct point in the viewport (#2564) - [ ] Select and <kbd>delete</kbd> removes a stop, which is currently broken by [this PR](https://github.com/GraphiteEditor/Graphite/issues/2445) so this also needs to be fixed"
2487,Testing line tool,open,https://github.com/GraphiteEditor/Graphite/issues/2487,0HyperCube,Testing,rahat2134,2,2025-03-25T21:46:46Z,2025-04-19T22:57:39Z,,,No,"Testcases: - [x] Works when the viewport is zoomed/panned/tilted (#2559) - [ ] Works when the artboard has an offset, which [this PR](https://github.com/GraphiteEditor/Graphite/issues/2485) has currently broken so this also needs a fix - [x] Works when the artboard has a transform before it (#2572) - [x] <kbd>Shift</kbd> constrains to 15 degrees from the viewport (test when the viewport is rotated by 5 degrees) (#2490) - [x] <kbd>Ctrl</kbd> locks the angle when pressed (#2490) - [x] <kbd>Alt</kbd> drags from centre (test when combined with shift as well) (#2490) - [ ] After drawing, selected layers *only* can have their endpoints dragged."
2483,Testing spline drawing,open,https://github.com/GraphiteEditor/Graphite/issues/2483,0HyperCube,Testing,,0,2025-03-25T21:34:44Z,2025-04-24T20:36:02Z,,,No,"**Further work on this shouldn't occur until #2368 is merged.**  Testcases: - [x] Works when the viewport is zoomed/panned/tilted (#2573) - [ ] Works when the artboard has an offset, which [#2484](https://github.com/GraphiteEditor/Graphite/issues/2484) recently fixed (#2575) - [ ] Works when the artboard has a transform before it - [ ] Closed splines can be drawn by clicking on the start. The tool should stop drawing. The second derivative of the curves should be continuous. - [x] Continuing to draw from a previous spline (#2591) - [ ] Continuing drawing when the other spline is transformed and in a group (currently broken, see [#2482](https://github.com/GraphiteEditor/Graphite/issues/2482)) - [ ] Continuing to draw from some other path"
2482,Spline tool extending a transformed spline is broken,open,https://github.com/GraphiteEditor/Graphite/issues/2482,0HyperCube,"Good First Issue,Paper Cut",,2,2025-03-25T21:33:26Z,2025-04-17T08:41:04Z,,,No,"To reproduce - Draw a spline with the spline tool. - Change the scale in the transform section of the properties - Go to the select tool, transform the spline, then go back to the spline tool - Try extending the spline - The point is offset from the cursor  https://github.com/user-attachments/assets/d7a83e82-c34c-49fa-a54d-a769a6b53d86"
2479,Fix broken links in documentation,open,https://github.com/GraphiteEditor/Graphite/issues/2479,LukeAbby,Good First Issue,,0,2025-03-25T11:32:07Z,2025-03-25T21:19:03Z,,,No,"There are a number of things that `cargo doc` will lint about from ``[`euclidean_to_parametric`]`` not existing to the bare url `https://wrfranklin.org/Research/Short_Notes/pnpoly.html` (as opposed to wrapped in angle brackets).  <details>  <summary>cargo doc output</summary>   ```rust warning: unresolved link to `euclidean_to_parametric`   --> libraries/bezier-rs/src/bezier/lookup.rs:13:53    | 13 |     /// For performance reasons, this version of the [`euclidean_to_parametric`] function allows the caller to    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^ no item named `euclidean_to_parametric` in scope    |    = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`    = note: `#[warn(rustdoc::broken_intra_doc_links)]` on by default  warning: unresolved link to `x`   --> libraries/bezier-rs/src/bezier/solvers.rs:10:21    | 10 |     /// Get roots as [[x], [y]]    |                        ^ no item named `x` in scope    |    = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `y`   --> libraries/bezier-rs/src/bezier/solvers.rs:10:26    | 10 |     /// Get roots as [[x], [y]]    |                             ^ no item named `y` in scope    |    = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: public documentation for `parametric_polynomial` links to private item `Polynomial`   --> libraries/bezier-rs/src/bezier/solvers.rs:43:20    | 43 |     /// Returns two [`Polynomial`]s representing the parametric equations for x and y coordinates of the bezier curve respectively.    |                       ^^^^^^^^^^ this item is private    |    = note: this link will resolve properly if you pass `--document-private-items`    = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default  warning: unresolved link to `line_test_crossings_prerotated`    --> libraries/bezier-rs/src/bezier/solvers.rs:443:109     | 443 | ... angle, consider instead using [`line_test_crossings_prerotated`] and moving this function's setup code into your own logic before the repeated call.     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no item named `line_test_crossings_prerotated` in scope     |     = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `line_test_crossings`    --> libraries/bezier-rs/src/bezier/solvers.rs:455:37     | 455 |     /// If that isn't important, use [`line_test_crossings`] which wraps this and provides an easier interface by taking a line rotation vector.     |                                        ^^^^^^^^^^^^^^^^^^^ no item named `line_test_crossings` in scope     |     = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `ray_test_crossings_prerotated`    --> libraries/bezier-rs/src/bezier/solvers.rs:467:108     | 467 | ...n angle, consider instead using [`ray_test_crossings_prerotated`] and moving this function's setup code into your own logic before the repeated call.     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no item named `ray_test_crossings_prerotated` in scope     |     = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `ray_test_crossings`    --> libraries/bezier-rs/src/bezier/solvers.rs:479:37     | 479 |     /// If that isn't important, use [`ray_test_crossings`] which wraps this and provides an easier interface by taking a ray direction vector.     |                                        ^^^^^^^^^^^^^^^^^^ no item named `ray_test_crossings` in scope     |     = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `new_regular_polygon`    --> libraries/bezier-rs/src/subpath/core.rs:308:47     | 308 |     /// Constructs a star polygon (n-star). See [new_regular_polygon], but with interspersed vertices at an `inner_radius`.     |                                                  ^^^^^^^^^^^^^^^^^^^ no item named `new_regular_polygon` in scope     |     = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `ray_test_crossings_count_prerotated`   --> libraries/bezier-rs/src/subpath/solvers.rs:49:108    | 49 |     /// If this needs to be called frequently with a ray of the same rotation angle, consider instead using [`ray_test_crossings_count_prerotated`].    |                                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no item named `ray_test_crossings_count_prerotated` in scope    |    = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `ray_test_crossings_count`   --> libraries/bezier-rs/src/subpath/solvers.rs:56:37    | 56 |     /// If that isn't important, use [`ray_test_crossings_count`] which provides an easier interface by taking a ray direction vector.    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^ no item named `ray_test_crossings_count` in scope    |    = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `point_inside_prerotated`   --> libraries/bezier-rs/src/subpath/solvers.rs:67:70    | 67 |     /// If this needs to be called frequently, consider instead using [`point_inside_prerotated`] and moving this function's setup code into your own logic b...    |                                                                         ^^^^^^^^^^^^^^^^^^^^^^^ no item named `point_inside_prerotated` in scope    |    = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `point_inside`   --> libraries/bezier-rs/src/subpath/solvers.rs:85:37    | 85 |     /// If that isn't important, use [`point_inside`] which provides an easier interface.    |                                        ^^^^^^^^^^^^ no item named `point_inside` in scope    |    = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `rectangle_intersections`    --> libraries/bezier-rs/src/subpath/solvers.rs:189:36     | 189 |     /// This is faster than calling [`rectangle_intersections`]`.len()` because it short-circuits as soon as an intersection is found.     |                                       ^^^^^^^^^^^^^^^^^^^^^^^ no item named `rectangle_intersections` in scope     |     = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: `bezier-rs` (lib doc) generated 14 warnings warning: unresolved link to `ArtboardData`    --> node-graph/gcore/src/graphic_element.rs:227:12     | 227 | /// Some [`ArtboardData`] with some optional clipping bounds that can be exported.     |            ^^^^^^^^^^^^ no item named `ArtboardData` in scope     |     = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`     = note: `#[warn(rustdoc::broken_intra_doc_links)]` on by default  warning: unresolved link to `HandleIds`    --> node-graph/gcore/src/vector/vector_data.rs:289:80     | 289 |     /// Enumerate all segments that start or end at a point, converting them to [`HandleId`s]. Note that the handles may not exist e.g. for a linear segment.     |                                                                                   ^^^^^^^^^^ no item named `HandleIds` in scope     |     = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `WasmEditorApi`    --> node-graph/gcore/src/application_io.rs:291:79     | 291 |     /// Font data (for rendering text) made available to the graph through the [`WasmEditorApi`].     |                                                                                  ^^^^^^^^^^^^^ no item named `WasmEditorApi` in scope     |     = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `WasmEditorApi`    --> node-graph/gcore/src/application_io.rs:296:67     | 296 |     /// Editor preferences made available to the graph through the [`WasmEditorApi`].     |                                                                      ^^^^^^^^^^^^^ no item named `WasmEditorApi` in scope     |     = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: this URL is not a hyperlink    --> node-graph/gcore/src/graphic_element/renderer/quad.rs:108:16     | 108 |     /// Code from https://wrfranklin.org/Research/Short_Notes/pnpoly.html     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     |     = note: bare URLs are not automatically turned into clickable links     = note: `#[warn(rustdoc::bare_urls)]` on by default help: use an automatic link instead     | 108 |     /// Code from <https://wrfranklin.org/Research/Short_Notes/pnpoly.html>     |                   +                                                       +  warning: this URL is not a hyperlink    --> node-graph/gcore/src/graphic_element.rs:137:37     | 137 |     /// Equivalent to the SVG <g> tag: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     |     = note: bare URLs are not automatically turned into clickable links help: use an automatic link instead     | 137 |     /// Equivalent to the SVG <g> tag: <https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g>     |                                        +                                                          +  warning: unclosed HTML tag `g`    --> node-graph/gcore/src/graphic_element.rs:137:28     | 137 |     /// Equivalent to the SVG <g> tag: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g     |                               ^^^     |     = note: `#[warn(rustdoc::invalid_html_tags)]` on by default  warning: this URL is not a hyperlink    --> node-graph/gcore/src/graphic_element.rs:139:56     | 139 |     /// A vector shape, equivalent to the SVG <path> tag: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path     |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     |     = note: bare URLs are not automatically turned into clickable links help: use an automatic link instead     | 139 |     /// A vector shape, equivalent to the SVG <path> tag: <https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path>     |                                                           +                                                             +  warning: unclosed HTML tag `path`    --> node-graph/gcore/src/graphic_element.rs:139:44     | 139 |     /// A vector shape, equivalent to the SVG <path> tag: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path     |                                               ^^^^^^  warning: this URL is not a hyperlink    --> node-graph/gcore/src/graphic_element.rs:198:101     | 198 | ...d extent, equivalent to the SVG <image> tag: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     |     = note: bare URLs are not automatically turned into clickable links help: use an automatic link instead     | 198 |     /// A CPU-based bitmap image with a finite position and extent, equivalent to the SVG <image> tag: <https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image>     |                                                                                                        +                                                              +  warning: unclosed HTML tag `image`    --> node-graph/gcore/src/graphic_element.rs:198:88     | 198 |     /// A CPU-based bitmap image with a finite position and extent, equivalent to the SVG <image> tag: https://developer.mozilla.org/en-US/docs/Web/SVG/Elem...     |                                                                                           ^^^^^^^  warning: unclosed HTML tag `dyn`    --> node-graph/gcore/src/registry.rs:159:35     | 159 | /// Wraps around a node taking Box<dyn DynAny> and returning Box<dyn DynAny>     |                                   ^^^^  warning: unclosed HTML tag `dyn`    --> node-graph/gcore/src/registry.rs:159:65     | 159 | /// Wraps around a node taking Box<dyn DynAny> and returning Box<dyn DynAny>     |                                                                 ^^^^  warning: `graphene-core` (lib doc) generated 13 warnings (run `cargo fix --lib -p graphene-core` to apply 4 suggestions) warning: unresolved link to `DocumentNodeDefinition`   --> node-graph/graph-craft/src/document.rs:88:24    | 88 | /// An instance of a [`DocumentNodeDefinition`] that has been instantiated in a [`NodeNetwork`].    |                        ^^^^^^^^^^^^^^^^^^^^^^ no item named `DocumentNodeDefinition` in scope    |    = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`    = note: `#[warn(rustdoc::broken_intra_doc_links)]` on by default  warning: unresolved link to `DocumentNodeDefinition`    --> node-graph/graph-craft/src/document.rs:622:24     | 622 | /// An instance of a [`DocumentNodeDefinition`] that has been instantiated in a [`NodeNetwork`].     |                        ^^^^^^^^^^^^^^^^^^^^^^ no item named `DocumentNodeDefinition` in scope     |     = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `DocumentNodeDefinition`    --> node-graph/graph-craft/src/document.rs:633:62     | 633 |     /// The name of the node definition, as originally set by [`DocumentNodeDefinition`], used to display in the UI and to display the appropriate properties.     |                                                                 ^^^^^^^^^^^^^^^^^^^^^^ no item named `DocumentNodeDefinition` in scope     |     = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `DocumentNode::path`    --> node-graph/graph-craft/src/document.rs:880:21     | 880 |     /// Populate the [`DocumentNode::path`], which stores the location of the document node to allow for matching the resulting proto nodes to the document ...     |                        ^^^^^^^^^^^^^^^^^^ the struct `DocumentNode` has no field or associated item named `path`  warning: unresolved link to `BorrowTree`    --> node-graph/graph-craft/src/proto.rs:137:134     | 137 | /// A proto node is an intermediate step between the `DocumentNode` and the boxed struct that actually runs the node (found in the [`BorrowTree`]).     |                                                                                                                                      ^^^^^^^^^^ no item named `BorrowTree` in scope     |     = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unclosed HTML tag `dyn`    --> node-graph/graph-craft/src/document/value.rs:53:25     | 53  |               /// Converts to a Box<dyn DynAny> - this isn't very neat but I'm not sure of a better approach     |                                    ^^^^ ... 137 | / tagged_value! { 138 | |     // TODO: Eventually remove this migration document upgrade code 139 | |     #[cfg_attr(feature = ""serde"", serde(deserialize_with = ""graphene_core::raster::image::migrate_image_frame""))] 140 | |     ImageFrame(graphene_core::raster::image::ImageFrameTable<Color>), ...   | 216 | |     FontCache(Arc<graphene_core::text::FontCache>), 217 | | }     | |_- in this macro invocation     |     = note: `#[warn(rustdoc::invalid_html_tags)]` on by default     = note: this warning originates in the macro `tagged_value` (in Nightly builds, run with -Z macro-backtrace for more info)  warning: `graph-craft` (lib doc) generated 6 warnings warning: public documentation for `BorrowTree` links to private item `Path`    --> node-graph/interpreted-executor/src/dynamic_executor.rs:168:88     | 168 | /// * `nodes`: A [`HashMap`] of [`NodeId`]s to tuples of [`SharedNodeContainer`] and [`Path`].     |                                                                                        ^^^^ this item is private     |     = note: this link will resolve properly if you pass `--document-private-items`     = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default  warning: public documentation for `BorrowTree` links to private item `Path`    --> node-graph/interpreted-executor/src/dynamic_executor.rs:171:42     | 171 | /// * `source_map`: A [`HashMap`] from [`Path`] to tuples of [`NodeId`] and [`NodeTypes`].     |                                          ^^^^ this item is private     |     = note: this link will resolve properly if you pass `--document-private-items`  warning: `interpreted-executor` (lib doc) generated 2 warnings warning: unresolved link to `BuildMetadata`  --> editor/src/messages/dialog/simple_dialogs/about_graphite_dialog.rs:5:45   | 5 | /// A dialog for displaying information on [BuildMetadata] viewable via *Help* > *About Graphite* in the menu bar.   |                                             ^^^^^^^^^^^^^ no item named `BuildMetadata` in scope   |   = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`   = note: `#[warn(rustdoc::broken_intra_doc_links)]` on by default  warning: unresolved link to `ManipulatorPoint`     --> editor/src/messages/tool/common_functionality/shape_editor.rs:1081:14      | 1081 |     /// Find a [ManipulatorPoint] that is within the selection threshold and return the layer path, an index to the [ManipulatorGroup], and an enum index f...      |                 ^^^^^^^^^^^^^^^^ no item named `ManipulatorPoint` in scope      |      = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `ManipulatorGroup`     --> editor/src/messages/tool/common_functionality/shape_editor.rs:1081:115      | 1081 | ...ld and return the layer path, an index to the [ManipulatorGroup], and an enum index for [ManipulatorPoint].      |                                                   ^^^^^^^^^^^^^^^^ no item named `ManipulatorGroup` in scope      |      = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `ManipulatorPoint`     --> editor/src/messages/tool/common_functionality/shape_editor.rs:1081:157      | 1081 | ...the [ManipulatorGroup], and an enum index for [ManipulatorPoint].      |                                                   ^^^^^^^^^^^^^^^^ no item named `ManipulatorPoint` in scope      |      = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unused variable: `device_pixel_ratio`   --> editor/src/messages/portfolio/document/overlays/overlays_message_handler.rs:22:4    | 22 |             device_pixel_ratio,    |             ^^^^^^^^^^^^^^^^^^ help: try ignoring the field: `device_pixel_ratio: _`    |    = note: `#[warn(unused_variables)]` on by default  warning: `graphite-editor` (lib doc) generated 4 warnings warning: `graphite-editor` (lib) generated 1 warning warning: unresolved link to `Node`   --> node-graph/node-macro/src/lib.rs:23:24    | 23 | ///   Implements the [`Node`] trait for the struct, with the `eval` method inside which is a modified version of the decorated function. See below for how th...    |                        ^^^^ no item named `Node` in scope    |    = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`    = note: `#[warn(rustdoc::broken_intra_doc_links)]` on by default  warning: unresolved link to `node_new`   --> node-graph/node-macro/src/lib.rs:27:106    | 27 | /// You'll use this macro most commonly when writing proto nodes. It's a convenient combination of the [`node_new`] and [`node_impl`] proc macros, which hand...    |                                                                                                          ^^^^^^^^ no item named `node_new` in scope    |    = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `node_impl`   --> node-graph/node-macro/src/lib.rs:27:123    | 27 | ...t's a convenient combination of the [`node_new`] and [`node_impl`] proc macros, which handles both of the bullet points above, respectively. There can onl...    |                                                           ^^^^^^^^^ no item named `node_impl` in scope    |    = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `node_impl`   --> node-graph/node-macro/src/lib.rs:27:295    | 27 | ...or method, but additional functions decorated by the [`node_impl`] macro can be added to implement different functionality across multiple type signatures.    |                                                           ^^^^^^^^^ no item named `node_impl` in scope    |    = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `node_impl`   --> node-graph/node-macro/src/lib.rs:35:269    | 35 | ... signatures, each each of these are converted by the [`node_impl`] macro into separate `impl` blocks for different `Node` traits.    |                                                           ^^^^^^^^^ no item named `node_impl` in scope    |    = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `node_fn`    --> node-graph/node-macro/src/lib.rs:116:151     | 116 | ... method. This is almost always called by the combined [`node_fn`] macro instead of using this one, however it can be used separately if needed. See that ...     |                                                            ^^^^^^^ no item named `node_fn` in scope     |     = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: unresolved link to `node_fn`    --> node-graph/node-macro/src/lib.rs:122:258     | 122 | ... functions each having different type signatures. The [`node_fn`] macro calls this macro as well as defining a `new` constructor method on the node struc...     |                                                            ^^^^^^^ no item named `node_fn` in scope     |     = help: to escape `[` and `]` characters, add '\' before them like `\[` or `\]`  warning: `node-macro` (lib doc) generated 7 warnings     Finished `dev` profile [optimized + debuginfo] target(s) in 1.43s ```  </details>"
2476,[Crash Report] In Node Graph view,open,https://github.com/GraphiteEditor/Graphite/issues/2476,qxzcode,"Good First Issue,Crash",,1,2025-03-24T04:03:23Z,2025-03-25T21:18:25Z,,,No,"**Describe the Crash** Not sure exactly what happened; I was just clicking around on https://editor.graphite.rs.  **Steps To Reproduce** Describe precisely how the crash occurred, step by step, starting with a new editor window. 1. Open the Graphite editor at https://editor.graphite.rs 2. ... Unfortunately I don't remember exactly what I did; I'm totally new to Graphite so I didn't really know what I was doing. 3. I was clicking around in the Node Graph, and I dragged the output of one node to create a new ""Opacity"" node. 4. I changed the opacity value. 5. I dragged the output of the Opacity node to one of the (output?) slots on the right (?) 6. I was clicking around those ""output slots"" when it crashed. It might have crashed when I clicked the ""-"" button on one to delete it.  **Additional Details**  Here's the state I ended up in:  ![Image](https://github.com/user-attachments/assets/4f3d816d-9e72-4f6c-ab78-5ade460462f4)  If I hide the crash dialog with the browser devtools, here's what's underneath:  ![Image](https://github.com/user-attachments/assets/177e24c3-5f05-4bdf-a677-b7b2a1e66d6c)  **Browser and OS** Chrome 134, Unix  **Stack Trace** Copied from the crash dialog in the Graphite editor:  ``` panicked at editor/src/messages/portfolio/document/utility_types/network_interface.rs:3480:70: removal index (is 1) should be < len (is 1)  Error     at https://editor.graphite.rs/assets/index-DW7tnTXP.js:922:1178     at g (https://editor.graphite.rs/assets/index-DW7tnTXP.js:908:63371)     at Object.handleJsMessage (https://editor.graphite.rs/assets/index-DW7tnTXP.js:908:63519)     at https://editor.graphite.rs/assets/index-DW7tnTXP.js:908:63912     at https://editor.graphite.rs/assets/index-DW7tnTXP.js:908:12372     at Ct (https://editor.graphite.rs/assets/index-DW7tnTXP.js:907:5957)     at S2.o.wbg.__wbg_call_3b770f0d6eb4720e (https://editor.graphite.rs/assets/index-DW7tnTXP.js:908:12342)     at graphite_wasm.wasm._ZN13graphite_wasm10editor_api12EditorHandle27send_frontend_message_to_js17hede8fc66aef6ad3cE (https://editor.graphite.rs/assets/graphite_wasm_bg-CVBdsMt_.wasm:wasm-function[4039]:0x89a8ee)     at graphite_wasm.wasm._ZN4core3ops8function2Fn4call17ha2fcdffa052e1591E (https://editor.graphite.rs/assets/graphite_wasm_bg-CVBdsMt_.wasm:wasm-function[14089]:0xb55eec)     at graphite_wasm.wasm._ZN3std9panicking20rust_panic_with_hook17hb39abb160cd4038cE (https://editor.graphite.rs/assets/graphite_wasm_bg-CVBdsMt_.wasm:wasm-function[7615]:0xa5fdf4)     at graphite_wasm.wasm._ZN4core9panicking9panic_fmt17h6f4dae69dcc1a6d2E (https://editor.graphite.rs/assets/graphite_wasm_bg-CVBdsMt_.wasm:wasm-function[11789]:0xb2bfe2)     at graphite_wasm.wasm._ZN5alloc3vec16Vec$LT$T$C$A$GT$6remove13assert_failed17h4799d1fa34bea83cE (https://editor.graphite.rs/assets/graphite_wasm_bg-CVBdsMt_.wasm:wasm-function[9971]:0xafcb46)     at graphite_wasm.wasm._ZN349_$LT$graphite_editor..messages..portfolio..document..document_message_handler..DocumentMessageHandler$u20$as$u20$graphite_editor..utility_traits..MessageHandler$LT$graphite_editor..messages..portfolio..document..document_message..DocumentMessage$C$graphite_editor..messages..portfolio..document..document_message_handler..DocumentMessageData$GT$$GT$15process_message17h0ca022fdb3026fa4E (https://editor.graphite.rs/assets/graphite_wasm_bg-CVBdsMt_.wasm:wasm-function[303]:0xa71ee)     at graphite_wasm.wasm._ZN325_$LT$graphite_editor..messages..portfolio..portfolio_message_handler..PortfolioMessageHandler$u20$as$u20$graphite_editor..utility_traits..MessageHandler$LT$graphite_editor..messages..portfolio..portfolio_message..PortfolioMessage$C$graphite_editor..messages..portfolio..portfolio_message_handler..PortfolioMessageData$GT$$GT$15process_message17h539ea4a2e673f68eE (https://editor.graphite.rs/assets/graphite_wasm_bg-CVBdsMt_.wasm:wasm-function[302]:0x7fbd3)     at graphite_wasm.wasm._ZN15graphite_editor10dispatcher10Dispatcher14handle_message17hf31fb8dc968d0cc1E (https://editor.graphite.rs/assets/graphite_wasm_bg-CVBdsMt_.wasm:wasm-function[449]:0x27f889)     at graphite_wasm.wasm._ZN13graphite_wasm10editor_api12EditorHandle8dispatch17ha8e4085a85846321E (https://editor.graphite.rs/assets/graphite_wasm_bg-CVBdsMt_.wasm:wasm-function[4967]:0x94390e)     at graphite_wasm.wasm.editorhandle_onMouseDown (https://editor.graphite.rs/assets/graphite_wasm_bg-CVBdsMt_.wasm:wasm-function[5039]:0x951b6e)     at C2.onMouseDown (https://editor.graphite.rs/assets/index-DW7tnTXP.js:908:5904)     at $ (https://editor.graphite.rs/assets/index-DW7tnTXP.js:911:3504)     at action (https://editor.graphite.rs/assets/index-DW7tnTXP.js:911:756) ```"
2462,Node variadic inputs to represent T as Vec<T>,open,https://github.com/GraphiteEditor/Graphite/issues/2462,Keavon,,,4,2025-03-18T11:13:13Z,2025-03-30T01:05:17Z,,,No,"A node which takes a Vec<T> should be able to expose itself as a variadic input, which looks like this:  | 100% Zoom | 200% Zoom | |--------|--------| | ![Image](https://github.com/user-attachments/assets/88268d1d-def4-4571-8a72-e6f94f28f29a) | ![Image](https://github.com/user-attachments/assets/452ca529-2e6e-4204-8938-d7b6108c6adc) |  *(7x14 rectangle with 2px rounding)*  Multiple wires can enter this. The order of the wires entering the variadic input does matter, and it laid out from top to bottom. The node receives these as a Vec of T and otherwise acts normally.  The node macro can define whether a data type, that's a Vec, is shown as variadic or regular. We should also consider whether we support the Table data type, where multiple wires become multiple table rows."
2461,Allow naming nodes and showing their names in the Properties panel,open,https://github.com/GraphiteEditor/Graphite/issues/2461,optozorax,Paper Cut,,0,2025-03-18T11:07:37Z,2025-03-18T11:35:37Z,,,No,"Currently if you create a lot of float values, there is no way to distinguish between them in this interface.  ![Image](https://github.com/user-attachments/assets/0558ba70-7b75-42ac-8c3c-0b7ca89e6adc)  Keavon showed that it's possible to apply a name on a node graph, by transforming variable to layer and renaming that layer, but this name doesn't used in the user interface as shown on the picture."
2459,Allow math node to work with variadic inputs,open,https://github.com/GraphiteEditor/Graphite/issues/2459,optozorax,,,1,2025-03-18T11:02:56Z,2025-03-18T11:21:17Z,,,No,"Requires variadic inputs: #2462  Currently it have only two arguments, but that's not that useful, since procedural illustrations benefits from having a lot of parameters that can be tweaked at any time, and any float may end up being parametrized.  Also, I think their names should be configurable too, because custom names are better than one-letter name A B C D E."
2458,Add node that generates geometry using parametric equations,open,https://github.com/GraphiteEditor/Graphite/issues/2458,optozorax,"Good First Issue,Graphics",,4,2025-03-18T10:59:26Z,2025-03-27T06:05:48Z,,,No,"I wanted to draw this illustration using graphite, but ended up using desmos and screenshotting it, because they support parametric equations. It will be nice to have such a node.  <details>   <summary>Desmos illustration</summary>    <img width=""1920"" alt=""Image"" src=""https://github.com/user-attachments/assets/e1311998-71dc-4bfe-8d05-d87e44e473ed"" />     </details>  I think that in this node we should be able to specify density of the geometry (amount of points), because different equations require different density, and it can affect performance.  I think there also should be density multiplier for the export rendering (if there is such a regime). So that at the editing stage we may see segmented geometry, and for the final render it will be smooth.  Also, unsolved problem: how to make this node accept any amount of variables (so that you can tweak behavior of your equation, like `l` in my example). This is also the problem for the Math node. Without this, this node will be not as useful is it might be. (#2462, and see also #2459)"
2451,Dragging handle back into its anchor makes its opposite handle move around randomly,open,https://github.com/GraphiteEditor/Graphite/issues/2451,Keavon,Good First Issue,,4,2025-03-17T11:39:14Z,2025-03-18T05:45:46Z,,,No,"~~We no longer can snap a handle to its anchor point, thereby hiding it (giving it a zero length status where it's treated as gone). When doing this, the other handle shouldn't be affected from its original position.~~  See the video in my comment below for what this issue is now about."
2447,Exposing a value to the graph should add and connect up an equivalent value node,open,https://github.com/GraphiteEditor/Graphite/issues/2447,Keavon,"Good First Issue,Graphene",,2,2025-03-17T00:43:24Z,2025-04-14T22:05:24Z,,,No,"Related: https://github.com/GraphiteEditor/Graphite/issues/2567  If you click the dot to expose an input to the graph...  ![Image](https://github.com/user-attachments/assets/8a44a7b9-990f-481c-945f-341969fcf14c)  (here, the top one is exposed and the other two are not)  ...it removes the control from the Properties panel and puts a connector on the node in the graph.  But that connector starts out connected to nothing. And whatever value the user had typed in the Properties panel previously, isn't represented anymore.  We want to have the process of clicking to expose an input to create a value node in the graph which is set to the same value as the Properties panel had. (This will require the creation of new value nodes, since not all representable Properties panel types have a value node yet.)  As a stretch goal, we also would like the reverse to occur: if a user un-exposes a node, it should evaluate what its current value is and set that to the input in the Properties panel. Perhaps only optionally, though, because the current behavior might be desired some (most?) of the time. This aspect can wait to be figured out or we can break it out into a separate issue."
2433,Add custom data types for angles and factors/percentages,open,https://github.com/GraphiteEditor/Graphite/issues/2433,Keavon,,,5,2025-03-14T11:35:50Z,2025-04-10T13:34:24Z,,,No,"Instead of using `f64` for all types of numbers, there are some with special significance.  - Angles can be represented by degrees or radians. Our data type should encode one unambiguous value, enforcing any nodes that want to construct or read an angle to do so with an explicit choice of degrees or radians. This should replace the Transform node's rotation and X-skew/Y-skew angles, avoiding the confusion that the inputs given in the node graph aren't the user-friendly degrees set in the Properties panel. (See [#2431](https://github.com/GraphiteEditor/Graphite/pull/2431)) - Percentages can be represented out of 100 (percent) or 1 (factor). This distinctly represents not a quantity but a portion out of a whole, so it needs its own type. This avoids the confusion and mess caused by our current inconsistent usage of percentages and factors in various places, with uncertainty about whether those values are out of 1 or 100 when fed by the node graph. We can ensure number input widgets in range mode display the factor or percent on a per-case basis for whichever is designed to be the more logical approach, or do what Blender does and offer an app preference to display all such quantities as out of 1.00 or out of 100%."
2432,Reenable Specta integration,open,https://github.com/GraphiteEditor/Graphite/pull/2432,oscartbeaumont,,,8,2025-03-14T11:19:49Z,2025-06-28T13:25:58Z,,,Sí,This fixes the commented out Specta integration resolving the TODO comment.    It might be worth moving the type exporting code into the startup of the application if possible when doing a debug build so that you don't need to run `cargo test ...` to generate the bindings but I don't know enough about Graphite's setup to know where is best. I also suppose any Rust running in wasm would not be a good place for that as it won't have filesystem access so a better place may not exist.    TODO:   - [ ] Decide on approach   - [ ] Fix the errors with linter (we can do that from the Specta side)    Part of #1148
2429,"Can't connect ""Color Value"" node to ""Background"" input of an artboard",open,https://github.com/GraphiteEditor/Graphite/issues/2429,ladsko,Paper Cut,,3,2025-03-13T13:01:03Z,2025-03-14T10:01:21Z,,,No,"The artboard ""Background"" parameter input does not accept ""none"" as an input so the ""Unwrap""-node is needed to connect a ""Color Value"" node.  I do not think that it should be that way."
2410,Boolean operations support for cutting out and separating non-manifold paths,open,https://github.com/GraphiteEditor/Graphite/issues/2410,j-jasz,Graphics,,0,2025-03-08T16:55:40Z,2025-04-13T23:02:28Z,,,No,"This feature is similar to Boolean operation, but it would allow for cutting out or separating non-manifold paths with the other one.  An example use case could look like the following where the final result are lines that are in between color shapes. The lines also could be separated into 3 distinctive groups.  ![Image](https://github.com/user-attachments/assets/942b768b-ad14-4df2-ab86-b0c8ae72fd28) ![Image](https://github.com/user-attachments/assets/9e6d08f8-f155-4831-a3c4-04972dc6a65c)  "
2409,"Node for calculating the ""medial axis transform and ""straight skeleton""",open,https://github.com/GraphiteEditor/Graphite/issues/2409,j-jasz,"Help Wanted,Graphics",,2,2025-03-08T15:37:43Z,2025-04-28T09:12:47Z,,,No,https://en.wikipedia.org/wiki/Topological_skeleton?useskin=vector#/media/File:Skel.png https://scikit-image.org/docs/stable/auto_examples/edges/plot_skeleton.html  Vector straight skeletons can be used as efficient rigs for animating more complex 2D shapes. Skeleton rig will automatically have the most efficient amount of control points per shape.  In raster graphics MAT in a form of gradients are a great way of making various masks that are either very time consuming or impractical to do by hand. MAT-based masks are also very useful in making textures for 3D. An example of how this could work is Distance Map in GIMP: Filters -> Generic -> Distance Map
2408,Inherit Alpha and Alpha Lock,open,https://github.com/GraphiteEditor/Graphite/issues/2408,j-jasz,,,0,2025-03-08T15:12:33Z,2025-05-17T06:55:53Z,,,No,"Both function are very useful for digital painting and can speed up masking parts of the workflow significantly. They can be found in Krita as Layer options next to layer lock.  Inherit Alpha - lets create temporary mask from alpha channel of the layer below - this eliminates the need for manually creating a mask and editing the content of it.  Alpha Lock - lets lock existing alpha channel values while enabling editing/painting RGB values  I believe both can be implemented either as nodes, node parameters or in other non-destructive manner."
2406,Subdivide Path node,open,https://github.com/GraphiteEditor/Graphite/issues/2406,j-jasz,,,0,2025-03-08T13:44:48Z,2025-05-17T06:57:24Z,,,No,As the name suggests.  This could be implemented as a Subdivide Path node that takes path elements selections as an additional input.
2399,Flick panning,open,https://github.com/GraphiteEditor/Graphite/issues/2399,j-jasz,,,0,2025-03-07T23:28:09Z,2025-03-07T23:29:05Z,,,No,Add optional feature of flick panning.  Flick panning works in a similar way to regular panning with MMB or Space+LMB but the viewport glides for a certain length (or time) after the key release.  This feature lets very quickly navigate between different areas of the artwork without zooming out-and-in and is very helpful when working with the details or on projects with very large resolution.
2391,Box/lasso selection should be compatible with PTZ,open,https://github.com/GraphiteEditor/Graphite/issues/2391,Keavon,"Good First Issue,Paper Cut",,0,2025-03-07T07:55:58Z,2025-03-07T07:57:27Z,,,No,"Box selection with the Select tool and Path tool doesn't follow the canvas when panning (via the mouse vertical/horizontal scroll wheel) or zooming (with Ctrl + or Ctrl -). The starting point of the rectangle should be locked down to the canvas location, not follow the viewport. This works correctly with the auto-panning feature (dragging the box selection off the edges of the viewport), so that code can be referenced. The actual box selection must still be rounded to viewport coordinates so the box selection is drawn cleanly (without fuzzy antialiasing). The video below shows the incorrect present behavior.  https://github.com/user-attachments/assets/6687128d-0123-4feb-bd10-88c36440971d  Discussion in this Discord thread: https://discord.com/channels/731730685944922173/1321358747133677599"
2386,Rename `responses` to `messages` throughout the message handlers,open,https://github.com/GraphiteEditor/Graphite/issues/2386,Keavon,,Keavon,0,2025-03-07T03:28:52Z,2025-03-07T03:28:52Z,,,No,This is a cleanup item for @Keavon to complete.
2385,Revise the styling of nodes in different states within the graph,open,https://github.com/GraphiteEditor/Graphite/issues/2385,Keavon,Design,Keavon,0,2025-03-07T03:27:31Z,2025-03-07T03:27:31Z,,,No,Hidden and selected nodes look too similar:  https://github.com/user-attachments/assets/ac70c787-cf2b-4984-96a4-f65d19eee412  Nodes also don't show up very well when overlaid over the artwork (especially when it's light colored) at lower values of the ![Image](https://github.com/user-attachments/assets/b3aa0a51-34ca-4f63-b404-23265cd33dac) slider.  This requires design work by @Keavon.
2384,Hide the window title if there isn't enough room to display it,open,https://github.com/GraphiteEditor/Graphite/issues/2384,Keavon,Web,Keavon,0,2025-03-07T03:24:42Z,2025-03-07T03:24:42Z,,,No,This requires some advanced CSS tricks to implement this cleanly. JS isn't the preferred solution. @Keavon will do this and it's likely not a good issue for others to work on for that reason.  ![Image](https://github.com/user-attachments/assets/36d46754-31a9-4d98-9878-6c58528475dc)
2383,Add a preference for the size of vector point anchor/handle manipulators,open,https://github.com/GraphiteEditor/Graphite/issues/2383,Keavon,Paper Cut,,0,2025-03-07T03:22:35Z,2025-03-07T03:22:35Z,,,No,"This isn't a priority and it will add a maintenance burden so this isn't suggested for completion in 2025, but at some later point in time once it's likely to benefit enough users to be worthwhile."
2382,The pressed Spacebar should show an open hand cursor before click-dragging makes it a closed hand,open,https://github.com/GraphiteEditor/Graphite/issues/2382,Keavon,Good First Issue,,0,2025-03-07T03:18:03Z,2025-03-07T03:18:03Z,,,No,"When holding space (but not dragging), the cursor should show the open hand icon (then switch to the currently-implemented closed hand while mousedown/dragging). Be careful to test in all the cases throughout the editor experience that this meets the desired behavior."
2380,Replace the FontInput component with the generalized MenuList component,open,https://github.com/GraphiteEditor/Graphite/issues/2380,Keavon,Web,Keavon,0,2025-03-07T02:39:41Z,2025-03-07T02:39:41Z,,,No,Cleanup work for @Keavon to do. This is a prerequisite for #2125 and #1340.
2379,"Locally ""peeking through"" the overlaid node graph to view the artwork underneath",open,https://github.com/GraphiteEditor/Graphite/issues/2379,Keavon,Design,,0,2025-03-07T02:36:04Z,2025-03-07T02:36:04Z,,,No,"A future feature for the node graph: hold <kbd>Space</kbd> to pan as well as display a bubble/magnifying glass sort of circle to show through the node graph fade to the underlying image without being darkened. Useful for viewing correct colors and stuff in a certain area, without adjusting the full ![Image](https://github.com/user-attachments/assets/01ec0e13-7290-412c-bd1c-d81d0e0c9f6c) widget value or hiding and showing the graph."
2378,Fix and reenable the panic proxy to make debugging crashes a little easier,open,https://github.com/GraphiteEditor/Graphite/issues/2378,Keavon,Web,Keavon,0,2025-03-07T02:33:17Z,2025-03-07T02:33:17Z,,,No,This is a task for @Keavon to return to at some point.
2377,Lock axis when panning,open,https://github.com/GraphiteEditor/Graphite/issues/2377,Keavon,Good First Issue,,0,2025-03-07T02:31:55Z,2025-03-07T02:31:55Z,,,No,"While panning the canvas (with MMB+drag or Space+drag), add support for locking to the X or Y axis with the Shift modifier key held down.  If the viewport is tilted (with Alt+MMB drag or Alt+Space+LMB drag), it should remain aligned with the X and Y axes of the viewport not the tilted document."
2376,Make modal interaction states take exclusive control over inputs,open,https://github.com/GraphiteEditor/Graphite/issues/2376,Keavon,Architecture,,1,2025-03-07T02:28:05Z,2025-03-07T02:29:49Z,,,No,"All keys should be blocked from going to other things (global shortcuts, switching tools, etc.) while a modal action is ongoing (a modal action includes dragging with a tool, G/R/S, etc.).  This will fix a very various bugs/edge cases where an ongoing interaction state can be interrupted by pressing a random key, such as one that might group the selected layers or change tools.  *Not a good beginner issue.*"
2375,Make it possible to snap the pivot gizmo when dragging it,open,https://github.com/GraphiteEditor/Graphite/issues/2375,Keavon,,,0,2025-03-07T02:24:52Z,2025-03-07T02:24:52Z,,,No,Soft blocked on #2225.
2374,Nudge-scaling of points with the Path tool,open,https://github.com/GraphiteEditor/Graphite/issues/2374,Keavon,Good First Issue,,0,2025-03-07T02:20:15Z,2025-04-03T08:04:04Z,,,No,"With a group of points selected, we'd like to be able to use nudge-scaling to resize their bounding box.  Nudge scaling is when, in the Select tool, you hold <kbd>Alt</kbd> when nudging with the arrow keys to resize by nudging only the bottom and right (or instead, top and left if <kbd>Ctrl</kbd> is also pressed) edge while keeping the opposite edges of the bounding box stationary, thereby resizing the shape.  This feature should create a bounding box of all selected points, in document space coordinates. Points at the very top and left of the bounds should be unaffected, and points at the very bottom and left should be nudged the full amount, with intermediate points scaling proportionally. This would be equivalent to scaling them with GRS's <kbd>S</kbd> if you were able to set the pivot to the top left of the combined points' bounding box. Handles of points should behave as <kbd>S</kbd> scaling does presently.  ---  https://github.com/user-attachments/assets/2e4cc512-8614-46d0-befa-f7d3e5253428  At the very end, I'm scaling those points (with the `S` key followed by `X`) as a means of illustrating the desired equivalent behavior for nudge scaling.  Arrow keys are used for nudging. In the Select tool, it moves the object. In the Path tool, it moves the points. When you add the Alt modifier key, it performs nudge scaling instead of nudging. But it's not implemented in the Path tool."
2373,Graphite should be able to copy/paste vector and raster content between other apps,open,https://github.com/GraphiteEditor/Graphite/issues/2373,Keavon,Good First Issue,,0,2025-03-07T02:09:33Z,2025-03-07T02:09:33Z,,,No,"*This is a good first issue but not for beginners.*  We should be able to copy vector and raster content, including hierarchies of layers and groups, between creative programs. Both into Graphite and out of Graphite. This shouldn't break existing copy-pasting within Graphite, which needs to have actual graph information rather than just vector or bitmap layer info.  This will require research into how the clipboard APIs let us encode different types of data, and if perhaps we need a degraded experience on web due to API limitations compared to a full separate implementation for the Tuari desktop version. Testing other creative apps and using a utility for inspecting clipboard contents at a technical level will be a useful way to approach this. It's also worth checking if this differs between OSs."
2357,Depricate our Bezier-rs crate,open,https://github.com/GraphiteEditor/Graphite/issues/2357,0HyperCube,,Keavon,2,2025-03-02T19:47:07Z,2025-03-05T10:51:50Z,,,No,"We're not really planning to use the crate any more (see #2325).  We also haven't published a release in over a year (despite many significant correctness and performance issues e.g. #1971 #2048 #2117).  @Keavon probably should publish a release marking it as deprecated: ```toml [badges.maintenance] status = ""deprecated"" ```"
2356,Redesigned vector tool fill/stroke selection in relation to the working colors and selected layers,open,https://github.com/GraphiteEditor/Graphite/issues/2356,Keavon,"Paper Cut,Design",Keavon,2,2025-03-02T12:07:05Z,2025-03-08T20:49:49Z,,,No,
2355,Design clarification for the relationship between changing tool options for future shapes vs. for selected shapes,open,https://github.com/GraphiteEditor/Graphite/issues/2355,Keavon,"Paper Cut,Design",Keavon,0,2025-03-02T12:06:30Z,2025-03-02T12:06:47Z,,,No,
2354,New contextual Properties panel (and rename current one to Parameters),open,https://github.com/GraphiteEditor/Graphite/issues/2354,Keavon,Design,Keavon,0,2025-03-02T12:05:56Z,2025-03-02T12:06:15Z,,,No,
2352,Snapping improvements/revamp,open,https://github.com/GraphiteEditor/Graphite/issues/2352,Keavon,"Good First Issue,Paper Cut",moosama76,5,2025-03-02T12:03:06Z,2025-05-20T07:20:02Z,,,No,This covers a lot of general improvements needed for the layer and point snapping systems. Ask on Discord for parts to begin with if you're interested in working towards this. It could also be a GSoC project in its own right.
2351,"Text alignment, justification, and hyphenation",open,https://github.com/GraphiteEditor/Graphite/issues/2351,Keavon,Good First Issue,,0,2025-03-02T12:00:59Z,2025-03-02T12:00:59Z,,,No,"Each of these should be their own PR. This is sort of a mini tracking issue to encompass these related features part of #1105 more broadly covering text/typography improvements.  - [ ] Left, center, and right alignment - [ ] Justification alignment   - [ ] Inter-word vs. inter-character justification ratio - [ ] [Hyphenation](https://github.com/tapeinosyne/hyphenation) and mid-word wrapping"
2350,Tracking Issue: Graphene language development,open,https://github.com/GraphiteEditor/Graphite/issues/2350,Keavon,Graphene,TrueDoctor,0,2025-03-02T11:47:23Z,2025-03-02T11:50:44Z,,,No,Follows on from pre-MVP work tracked in #144.  
2349,Color palettes,open,https://github.com/GraphiteEditor/Graphite/issues/2349,Keavon,Design,,0,2025-03-02T11:35:59Z,2025-03-02T11:36:20Z,,,No,
2348,Keyboardless interaction throughout the editor,open,https://github.com/GraphiteEditor/Graphite/issues/2348,Keavon,Design,,0,2025-03-02T11:25:54Z,2025-03-02T11:27:15Z,,,No,
2347,Thorough testing of tools for pen/touch usability,open,https://github.com/GraphiteEditor/Graphite/issues/2347,Keavon,"Paper Cut,Design",,0,2025-03-02T11:25:52Z,2025-03-02T11:27:00Z,,,No,
2346,Revamp menu bar for touch devices,open,https://github.com/GraphiteEditor/Graphite/issues/2346,Keavon,Web,,0,2025-03-02T11:25:50Z,2025-03-02T11:26:27Z,,,No,
2345,Rasterize vector content at the appropriate time in the graph,open,https://github.com/GraphiteEditor/Graphite/issues/2345,Keavon,"Graphene,Graphics",,0,2025-03-02T11:21:22Z,2025-03-05T09:58:51Z,,,No,Basically this is just the Into node.
2344,Add nodes for updating existing GPU buffers,open,https://github.com/GraphiteEditor/Graphite/issues/2344,Keavon,"Graphene,Graphics",,0,2025-03-02T11:21:19Z,2025-03-02T11:22:17Z,,,No,
2343,Modularize GPU blend mode as a merge node,open,https://github.com/GraphiteEditor/Graphite/issues/2343,Keavon,"Graphene,Graphics",,0,2025-03-02T11:21:17Z,2025-03-02T11:21:54Z,,,No,
2342,Add feature gate to only display GPU-based nodes when WGPU is available,open,https://github.com/GraphiteEditor/Graphite/issues/2342,Keavon,,,0,2025-03-02T11:19:19Z,2025-03-02T11:19:28Z,,,No,
2341,Replace layer thumbnails with Vello renders,open,https://github.com/GraphiteEditor/Graphite/issues/2341,Keavon,"Performance,Graphics",,0,2025-03-02T11:11:32Z,2025-03-02T11:12:45Z,,,No,
2340,Replace Eyedropper tool implementation to use Vello render data,open,https://github.com/GraphiteEditor/Graphite/issues/2340,Keavon,Graphics,,0,2025-03-02T11:11:27Z,2025-03-02T11:12:52Z,,,No,
2336,Proper node graph interaction aborting with Esc/RMB,open,https://github.com/GraphiteEditor/Graphite/issues/2336,Keavon,"Good First Issue,Paper Cut",,0,2025-03-02T00:51:54Z,2025-03-02T00:51:54Z,,,No,"Broken out from #1912:  - Dragging a wire should restore its initial connection   - [ ] <kbd>Esc</kbd> needs to not close the graph - Box selection should, upon right clicking, restore the selection before drag-selecting   - [ ] <kbd>Esc</kbd> needs to not close the graph"
2335,Make dragging layers to rearrange them abortable with Esc/RMB,open,https://github.com/GraphiteEditor/Graphite/issues/2335,Keavon,"Web,Paper Cut",,2,2025-03-02T00:49:25Z,2025-05-17T07:04:55Z,,,No,"Broken out from #1912:  Abort with Esc/RMB by dragging to rearrange layers (in Firefox, RMB actually confirms the action instead of aborting it, in Chrome it just does nothing)."
2332,Image trace vectorization,open,https://github.com/GraphiteEditor/Graphite/issues/2332,Keavon,Graphics,,0,2025-03-01T05:59:58Z,2025-03-01T05:59:58Z,,,No,One possibility of library is https://github.com/visioncortex/vtracer but there may be others worth researching and considering.
2325,Replace Bezier-rs usages with Kurbo,open,https://github.com/GraphiteEditor/Graphite/issues/2325,Keavon,"Good First Issue,Performance",,2,2025-02-28T05:44:18Z,2025-03-18T20:19:15Z,,,No,"[Kurbo](https://docs.rs/kurbo/latest/kurbo/)'s computational geometry is more stable, efficient, and high-quality than our Bezier-rs library which is a maintenance burden for us, and we'd like to phase it out. This issue tracks our desire to incrementally replace the many Bezier-rs usages with Kurbo equivalents wherever possible. In the end, hopefully only a few remaining functions that Kurbo doesn't support will be left, and then we can either contribute those upstream to Kurbo or move our implementations out of Bezier-rs and into Graphite/Graphene code directly.  This issue is open to anyone to work on in chunks. If you open a PR for it, say ""Part of #2325"" in the PR description."
2317,Proportional editing in the Path tool,open,https://github.com/GraphiteEditor/Graphite/issues/2317,Keavon,Graphics,,0,2025-02-26T23:56:20Z,2025-06-15T18:19:41Z,,,No,"Just like in Blender:  ![Image](https://github.com/user-attachments/assets/e2765a54-f355-40d9-b01b-fdcce17ecd5a)  But unlike with Blender, it needs to play nicely with Bézier handles."
2316,"Node for tweening ""topo lines"" across several guide paths",open,https://github.com/GraphiteEditor/Graphite/issues/2316,Keavon,"Help Wanted,Graphics",,0,2025-02-26T23:51:59Z,2025-02-26T23:51:59Z,,,No,"This is sort of like the Morph node, but it should work despite changes in topology of the curvature and it should take multiple layers (as a GraphicGroup stack, lavender-colored data) and output either one (with a `t` value) or multiple paths that interpolate it.  In this rough hand-drawn example, the RED paths are the end guide paths, the PINK paths are the intermediate guide paths, and the GRAY lines are the tweened paths. In the real output, none of the guide paths would be directly preserved, only the interpolated versions, ensuring they are evenly spaced with each other given some density or count parameter.  ![Image](https://github.com/user-attachments/assets/7859f6fe-cf8a-4baa-ab4b-07da5ead2c74)"
2314,"Multiple ""streams"" for graphical data, click targets, snap targets, gizmos, and parameter widgets",open,https://github.com/GraphiteEditor/Graphite/issues/2314,Keavon,Graphene,,0,2025-02-26T12:23:04Z,2025-06-05T07:12:51Z,,,No,"Inspired by the ideas in Blender's way of representing gizmos: https://www.youtube.com/watch?v=Opzk1wUhzCw  Currently, a node network (graph/subgraph) processes the graphical data, such as `VectorData`. This is what will become the ""graphical stream"". But this graphical data it is also abused by the tooling, which needs to track the graph data for interacting with it. Some nodes (like the Text node) need custom control over their click targets.  The idea here is to add extra ""graph streams"" to the same subgraph, which lets the user pick from a dropdown menu which stream to show nodes for. The graph's data imports would likely be the same in all streams, but its exports would be of different types. However, they would all be nodes in the same subgraph and it will probably be possible to <kbd>Shift</kbd> click multiple dropdown menu entries to see them simultaneously, otherwise when one isn't shown its nodes and exports are simply hidden from the subgraph.  - Click targets: the exports would be some vector description of click targets used for hit testing. It would likely be stored as an additional table on the graphical data type flowing through the graph. If present, that table overrides the click targets in use (otherwise it falls back to the geometry of the `VectorData` or some alpha cutoff threshold for raster data). The Text node or others may add a table for custom click targets using nodes in this graph stream. Other nodes, like Bevel or Path (which fundamentally change the geometry) may choose to delete any such table because it would become invalid. Other nodes (like Transform) may apply its change to the click targets table. - Snap targets: similar to click targets but these would be various types of snapping targets with different classifications for things like importance, geometric form, etc. Dynamic targets could be returned by evaluating this graph stream in different scenarios or with different snapping settings or priorities set. - Thumbnails: some nodes may wish to offer a custom thumbnail render, or bounds. That'll be necessary for nodes which produce boundless data. This might be able to be consolidated into another concept instead of using a separate stream. - Gizmos: these might be part of click targets? It remains to be determined how much they take over from what's currently handled by the tools in regards to displaying gizmos. - Parameter widgets: the UI for each node's parameters in the Properties panel is currently either derived in the most trivial cases or is linked by name to a hard-coded layout definition function. That link is fragile since any change to the node definition unlinks it. The solution is to move those hard-coded layout definition functions into the graph itself. A family of nodes representing the widgets and various logical operators and math functions can be used to replicate all existing methods of defining the layouts. In the future, we can even have a drag-and-drop widget builder in the editor UI which builds this node graph behind the scenes on behalf of the user, just like viewport tooling edits the graphical parts of the graph.  A future opportunity, which doesn't have to be implemented initially, is that the graph can be compiled by the Graphene compiler omitting any streams that aren't relevant. In a CLI environment, editor-focused things like click targets may not be needed (unless they are used for something interactive at runtime like hit testing). And we can even decouple the render from the click targets and gizmos, keeping the editor and overlays/gizmos responsive even if the artwork renders at a considerably lower framerate. This will make painting much more feasible and all sorts of design feel snappy by letting overlays fill in the gaps. Even the visualization stream can first render using a low quality level, then if there's time before the next frame is requested, go back and do a medium and then a high quality render (with all those renders happening on a version of the graph containing only the graphical data)."
2312,Click targets for axis contraint on 'compass rose' are very small,open,https://github.com/GraphiteEditor/Graphite/issues/2312,0HyperCube,"Paper Cut,Design",,0,2025-02-23T21:52:24Z,2025-02-23T21:52:24Z,,,No,"To drag constrained to an axis, it is necessary to have very precise motor control or to zoom the browser in. Since even I can't do it reliably, this isn't really great for accessibility. Perhaps the size of the target should be increased or the functionality removed?  There are other easier ways to accomplish the same thing (drag with <kbd>shift</kbd> or use <kbd>G</kbd> then <kbd>X</kbd>) so this isn't particularly high priority."
2310,Rendering the strokes of vector meshes,open,https://github.com/GraphiteEditor/Graphite/issues/2310,Keavon,"Architecture,Graphics",,0,2025-02-21T12:23:52Z,2025-04-03T07:01:28Z,,,No,"Vector meshes generalize paths to have more than two edges connected to a point. That messes with assumptions made by the renderer as part of stroking for caps and joins. We need to devise a strategy for properly rendering such cases.  It would also potentially be worthwhile to control the caps and joins (and miter limit) on a per segment or per anchor basis, even at both ends of just a simple line.  This is currently handled badly, as we can see from the line caps:  ![Image](https://github.com/user-attachments/assets/8f5e290c-f65a-4377-b22a-faaab2a835a4)"
2309,Rendering the fills of vector meshes and intersecting paths,open,https://github.com/GraphiteEditor/Graphite/issues/2309,Keavon,"Architecture,Graphics",,0,2025-02-21T12:19:51Z,2025-05-25T07:49:25Z,,,No,"High-level goal:  Topological styling: we need to apply fill and stroke styles to the *topology* of the geometry in the scene (composed of subpaths), even when the geometry can move around *spatially* from frame to frame. On any frame, when rendering, we need to apply the topological styling to the current spatial arrangement of the geometry in a stable manner. We need to uniquely, stably address the **sub-segments** and **sub-regions** based on where intersections occur given the current spatial arrangement, to apply a stroke and fill style to each as given by the artist's intent.  ---  Vector meshes generalize paths to support arbitrary topology. Loops of segments need a way of being rendered with a fill. This needs to support certain requirements, such as reasonable robustness during editing and animation.  The plan according to the current design is to define a filled region as the area bounded within a list of segments, taking into account each segment's winding order (flow direction or half-edge of a segment) to bound the curved area, akin to CSG. If a flow direction is backwards, it represents a back-face which isn't considered filled.  For example, the dots in the inside of this edge flow would indicate that the left lobe of the infinity shape should be filled as the front-face, while the right lobe's outer-facing dots would be considered a back-face and not filled.  ![Image](https://github.com/user-attachments/assets/ebf427cc-543b-4927-be82-6ba3e42535b6)  Uniquely identifying cubic Beziers isn't possible because there can be up to 9 intersections with 8 enclosed regions between a pair of them, compared to quadratic Beziers with 4 intersections and 3 enclosed regions. To address the boundaries of quadratics, cubics need to be considered as quadratics. This can likely be done (without actually subdividing the geometry) by addressing the starting or ending halves of a half-edge, splitting a segment up into four pieces. The midpoint of a half-edge is where the number of intersections is equal to half the total. The starting half reaches from the start to that middle intersection and the ending reaches from the end to the middle intersection, overlapping by a shared segment in cases with even numbers of intersections. A full explainer is at https://discord.com/channels/731730685944922173/731738914812854303/1341703079770193951 (and for @Keavon and @otdavies, [this private Discord chat](https://discord.com/channels/@me/98632974106378240/1341623418055036949)).  This drawing shows some unique addressing cases of each individual region. Red circles indicate midpoint intersections (from one or both of either curve).  ![Image](https://github.com/user-attachments/assets/57801a41-1f20-4985-92bf-ccbf96a625bd)  CSG boundary edges don't have to address just one region; they can also address a larger region while ignoring any intersections that aren't listed as boundaries. If, for example, the self-intersecting 4-region shape at the center right in the drawing above just had its full list of path segments used as its boundary, it might work similar to a regular SVG path (including a choice of fill rule)? (Or would that only count as enclosing the dark blue center region since only points in there would be enclosed by all segments? Hopefully not, so it can act like regular SVG complete with a choice of fill rule.)  Other approaches: - https://alexharri.com/blog/vector-networks (contains some useful ideas, but this works based on assigning a filled-not-not-filled flag to specific areas which must be statically chosen and can't support dynamic filling when the topology changes) - https://web.archive.org/web/20061115004311/http://blogs.msdn.com/mswanson/archive/2006/02/27/539749.aspx - https://web.archive.org/web/20061116051921/http://www.the-labs.com/MacromediaFlash/SWF-Spec/SWFfilereference.html#h3ShapeArchitecture (similarly, requires destructive changes to the topology to represent its vector mesh structure as connected paths, but it uses an interesting idea of left/right fill styles belonging to each segment) - https://www.borisdalstein.com/research/phd/ (hat tip: @4adex; focuses more on the topology representation, which we might borrow from, but doesn't solve dynamic fills for intersection regions)"
2305,Gradients along strokes,open,https://github.com/GraphiteEditor/Graphite/issues/2305,Keavon,Graphics,,0,2025-02-18T13:42:49Z,2025-02-18T13:43:00Z,,,No,"There are two directions:  - Along the stroke      [See this](https://dev.to/uuuuuulala/gradient-along-svg-path-with-gsap-kl4) for info about how to approximate this. We can also just split up the stroke into a lot of pieces with solids colors, or with linear gradients aiming to go from the start to end, using greater subdivision where the start and end planes bend more quickly to aim for them to be close to parallel so the linear gradient works.      ![Image](https://github.com/user-attachments/assets/e77de12c-42fa-41e2-b37c-0a6c2ac12991)  - Across the stroke      Repeat the stroke many times with increasing thickness. Use the technique described in #2268 for not mirroring at the centerline.      ![Image](https://github.com/user-attachments/assets/70d8def3-b751-4bd2-84a7-e140471f66ab)  Regardless of method or direction, masking is likely necessary to handle end caps properly."
2304,Better gradient support,open,https://github.com/GraphiteEditor/Graphite/issues/2304,Keavon,Graphics,,0,2025-02-18T13:32:17Z,2025-03-05T10:00:55Z,,,No,"- Gradients within strokes: SVG supports this, we just need to make the renderer and tooling use it. - Elliptical gradients (minor and major axis) - [Focal point](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Gradients#center_and_focal_point) - [Spread method](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Gradients#spreadmethod) (pad, reflect, repeat) - Gradient stop midpoint (for non-linear interpolation, using that as an ""exponent"" of sorts) - Color interpolation ([`color-interpolation`](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/color-interpolation) has limited browser support), we can also approximate in steps - Independent interpolation of color and alpha - Reusing vector data types to provide the spatial gradient control inputs"
2303,Freeform gradients,open,https://github.com/GraphiteEditor/Graphite/issues/2303,Keavon,Graphics,,0,2025-02-18T13:14:08Z,2025-02-18T13:14:08Z,,,No,"Similar to #2302, we need to find a clever way to generate these within the SVG or SVG + CSS spec. Rasterization is probably the most likely approach here. But here are some ideas:  - Raserization. - A point cloud of circles with radial gradients interpolating over alpha, with optional transforms to essentially create 2D Gaussian splats. - For use cases supporting CSS as part of SVG, we can render quads with linear gradients applied to each edge which generates a quad of a mesh, then the CSS perspective transform would skew the four corners to fit within the mesh adjacent to other quads doing the same thing to build a mesh representing the full freeform gradient.  There are two possible sources of color spread, which can be mixed: - Point (with a color and radius)      ![Image](https://github.com/user-attachments/assets/45268a9d-63ed-4902-8982-b0dccb30edbd)  - Path (with a color interpolated along the path, such as being set at each anchor)      ![Image](https://github.com/user-attachments/assets/8f240d5b-7f7f-46ec-a4ab-f5bb52f554a8)"
2302,Conic gradients,open,https://github.com/GraphiteEditor/Graphite/issues/2302,Keavon,Graphics,,0,2025-02-18T12:36:05Z,2025-02-18T12:38:59Z,,,No,"This could be implemented using a few strategies, and we probably will want multiple so the user can pick what's best for their use case.  For support in all SVG viewers: - A whole bunch of solid-colored pie slice triangles - Rasterized as a base64 image at a set resolution  For support in some SVG viewers like browsers: - `<foreignObject><div style=""background: conic-gradient(red, green, blue)""></div></foreignObject>` - Possibly fewer pie slice triangles made out of linear gradient quads given CSS perspective transforms to turn them into triangles by pinching a pair of corners, however pure SVG only supports affine transforms  ![Image](https://github.com/user-attachments/assets/ce862322-078a-4204-a202-1bccb0af5c39)"
2293,Fix the Bevel node so it applies a consistent bevel size regardless of angle,open,https://github.com/GraphiteEditor/Graphite/pull/2293,MohdMohsin97,,,16,2025-02-15T17:40:40Z,2025-06-30T09:05:01Z,,,Sí,Previously algorithm only spilt the line from both side with the give length.    ![411837396-7bfb998d-604c-45d5-90e4-c607c3144855](https://github.com/user-attachments/assets/4b56a838-26c6-4696-ad3e-2479fa452be5)    Update the bevel algorithm for straight line only to give same bevel length.    ![Screenshot 2025-02-15 222335](https://github.com/user-attachments/assets/086d5123-0129-440f-ada0-782ae9240cb3)    Issue #2281  
2281,Improve Bevel node algorithm,open,https://github.com/GraphiteEditor/Graphite/issues/2281,Keavon,"Good First Issue,Graphics",,1,2025-02-11T05:14:37Z,2025-02-11T10:05:55Z,,,No,"Right now, the Bevel node works based on the angle between segments (I think?). The bevel can be larger or smaller depending on angle:  ![Image](https://github.com/user-attachments/assets/7bfb998d-604c-45d5-90e4-c607c3144855)  Notice that tiny bevel on the right compared to on the left.  To set this up, use the Pen tool to draw a triangle like that above. Then use this button ![Image](https://github.com/user-attachments/assets/4a4b29b2-58e6-4695-b50d-8cb2fd36b653) in the top right of the Properties panel to search for ""Bevel"" and add it. Then drag its distance parameter.  We also want it to work for curved segments, like this, appropriately:  ![Image](https://github.com/user-attachments/assets/578e6175-c0bc-4101-8001-c333a4e2974d)  We will then have a follow-on feature for rounding these corners by inserting an arc of a circle in the beveled corners.  We'll also want an option to control the angle at which bevels begin, so that only slight bends don't have to generate bevels. "
2280,Menu lists should allow dragging from their spawner and releasing on a selection,open,https://github.com/GraphiteEditor/Graphite/issues/2280,Keavon,"Web,Paper Cut",Keavon,1,2025-02-10T22:37:22Z,2025-02-17T02:39:05Z,,,No,"Currently, menu bar entries require clicking the menu bar button to open it, then clicking to pick a row inside. Menu bar entries should also support opening on mousedown and letting users drag down and then release on an entry. Additionally, right click and <kbd>Esc</kbd> should allow aborting when the left mouse is held down (either for a drag or just a click), such that the menu closes without being selected. This applies for all menu lists, such as dropdown menus as well."
2279,Restore prior selection after aborting a dragged box/lasso selection,open,https://github.com/GraphiteEditor/Graphite/issues/2279,Keavon,"Good First Issue,Paper Cut",,1,2025-02-10T22:19:46Z,2025-02-10T22:24:25Z,,,No,"Select & Path tools: drag-selecting, upon right clicking, should restore the selection before drag-selecting (details and explanation webcast in [this discussion](https://discord.com/channels/731730685944922173/1216976541947531264/1325911477042942073) on Discord)."
2266,Update the input mapping system to not dispatch both a matched KeyDown and KeyDownNoRepeat,open,https://github.com/GraphiteEditor/Graphite/issues/2266,Keavon,,,8,2025-02-05T03:34:07Z,2025-02-15T12:55:16Z,,,No,"For example, if we update `input_mapping.rs` like so:  ```diff - entry!(KeyDown(KeyA); action_dispatch=ToolMessage::ActivateToolPath), + entry!(KeyDownNoRepeat(KeyA); action_dispatch=ToolMessage::ActivateToolPath), ```  Then <kbd>Ctrl</kbd><kbd>A</kbd> will fire both the selection of all layers...  ``` entry!(KeyDown(KeyA); modifiers=[Accel], action_dispatch=DocumentMessage::SelectAllLayers), ```  ...as well as the change to the Path tool, since one gets matched on `KeyDown` and another on `KeyDownNoRepeat`. If both were `KeyDown` or `KeyDownNoRepeat`, only one would match. But currently, both are matching, and we only want one to match.  After implementing this fix, the following mappings should be changed from `KeyDown` to `KeyDownNoRepeat`:  <details><summary>Mappings to change</summary>  ``` // TransformLayerMessage entry!(KeyDown(KeyX); action_dispatch=TransformLayerMessage::ConstrainX), entry!(KeyDown(KeyY); action_dispatch=TransformLayerMessage::ConstrainY),  // PathToolMessage entry!(KeyDown(KeyG); action_dispatch=PathToolMessage::GRS { key: KeyG }), entry!(KeyDown(KeyR); action_dispatch=PathToolMessage::GRS { key: KeyR }), entry!(KeyDown(KeyS); action_dispatch=PathToolMessage::GRS { key: KeyS }),  // PenToolMessage entry!(KeyDown(KeyG); action_dispatch=PenToolMessage::GRS { grab: KeyG, rotate: KeyR, scale: KeyS }), entry!(KeyDown(KeyR); action_dispatch=PenToolMessage::GRS { grab: KeyG, rotate: KeyR, scale: KeyS }), entry!(KeyDown(KeyS); action_dispatch=PenToolMessage::GRS { grab: KeyG, rotate: KeyR, scale: KeyS }),  // ToolMessage entry!(KeyDown(KeyV); action_dispatch=ToolMessage::ActivateToolSelect), entry!(KeyDown(KeyZ); action_dispatch=ToolMessage::ActivateToolNavigate), entry!(KeyDown(KeyI); action_dispatch=ToolMessage::ActivateToolEyedropper), entry!(KeyDown(KeyT); action_dispatch=ToolMessage::ActivateToolText), entry!(KeyDown(KeyF); action_dispatch=ToolMessage::ActivateToolFill), entry!(KeyDown(KeyH); action_dispatch=ToolMessage::ActivateToolGradient), entry!(KeyDown(KeyA); action_dispatch=ToolMessage::ActivateToolPath), entry!(KeyDown(KeyP); action_dispatch=ToolMessage::ActivateToolPen), entry!(KeyDown(KeyN); action_dispatch=ToolMessage::ActivateToolFreehand), entry!(KeyDown(KeyL); action_dispatch=ToolMessage::ActivateToolLine), entry!(KeyDown(KeyM); action_dispatch=ToolMessage::ActivateToolRectangle), entry!(KeyDown(KeyE); action_dispatch=ToolMessage::ActivateToolEllipse), entry!(KeyDown(KeyY); action_dispatch=ToolMessage::ActivateToolPolygon), entry!(KeyDown(KeyB); action_dispatch=ToolMessage::ActivateToolBrush),  // DocumentMessage entry!(KeyDown(Space); modifiers=[Control], action_dispatch=DocumentMessage::GraphViewOverlayToggle), entry!(KeyDown(KeyO); modifiers=[Alt], action_dispatch=DocumentMessage::ToggleOverlaysVisibility), entry!(KeyDown(KeyS); modifiers=[Alt], action_dispatch=DocumentMessage::ToggleSnapping), entry!(KeyDown(KeyL); modifiers=[Accel], action_dispatch=DocumentMessage::ToggleSelectedLocked), entry!(KeyDown(KeyG); modifiers=[Alt], action_dispatch=DocumentMessage::ToggleGridVisibility),  // TransformLayerMessage entry!(KeyDown(KeyG); action_dispatch=TransformLayerMessage::BeginGrab), entry!(KeyDown(KeyR); action_dispatch=TransformLayerMessage::BeginRotate), entry!(KeyDown(KeyS); action_dispatch=TransformLayerMessage::BeginScale),  // PortfolioMessage entry!(KeyDown(KeyO); modifiers=[Accel], action_dispatch=PortfolioMessage::OpenDocument), entry!(KeyDown(KeyI); modifiers=[Accel], action_dispatch=PortfolioMessage::Import), entry!(KeyDown(KeyR); modifiers=[Alt], action_dispatch=PortfolioMessage::ToggleRulers),  // DialogMessage entry!(KeyDown(KeyE); modifiers=[Accel], action_dispatch=DialogMessage::RequestExportDialog), entry!(KeyDown(KeyN); modifiers=[Accel], action_dispatch=DialogMessage::RequestNewDocumentDialog), entry!(KeyDown(Comma); modifiers=[Accel], action_dispatch=DialogMessage::RequestPreferencesDialog), ```  </details> "
2258,Ctrl+Z on 'Edit > Convert to Infinite Canvas' creates leftover merge nodes,open,https://github.com/GraphiteEditor/Graphite/issues/2258,moosama76,Good First Issue,,0,2025-02-03T21:04:16Z,2025-03-10T23:23:43Z,,,No,https://github.com/GraphiteEditor/Graphite/blob/6d52151d6067627caf618e6167636108dfc0d6f4/editor/src/messages/portfolio/document/graph_operation/graph_operation_message_handler.rs#L205  Undoing *Edit*> *Convert to Infinite Canvas* (formerly called 'Clear Artboards') with Ctrl+Z leaves N merge nodes which doesn't seem logical given where transaction added.  https://github.com/user-attachments/assets/2db0178c-b08a-47c3-b71f-712ddcf15e21
2252,Path tool sometimes snaps to the previous anchor positions,open,https://github.com/GraphiteEditor/Graphite/issues/2252,0HyperCube,Paper Cut,,0,2025-02-02T19:02:58Z,2025-02-02T19:02:58Z,,,No,To reproduce: - New document - Draw a rectangle - Switch to path tool - Drag the rectangle from the centre  https://github.com/user-attachments/assets/780d4f1b-caf5-4722-92a7-3458ef5c1409  This occurs both on dev.graphite.rs and editor.graphite.rs.
2231,Path tool creates unexpected Flatten Vector Elements node,open,https://github.com/GraphiteEditor/Graphite/issues/2231,kojq,,,1,2025-01-27T14:42:38Z,2025-02-18T13:55:58Z,,,No,"This issue results in an error in the node graph, causing the document to not be rendered.  The *Flatten Vector Elements* node is created in utility_types.rs: https://github.com/GraphiteEditor/Graphite/pull/2228/files#diff-f9c3a49009b09a2d6bd1ebb8b090622e4a0e9c19f760f501d006bdb09e42759dR299  This was initially caused by creating a single file and using the path tool on an ellipse (I had two on the canvas), but it was difficult to reproduce.  To consistently reproduce, open these three files ([error_1-and-3.graphite.txt](https://github.com/user-attachments/files/18559523/error_1-and-3.graphite.txt) and [error_2.graphite.txt](https://github.com/user-attachments/files/18559524/error_2.graphite.txt) are the two files needed) in succession on a clean Graphite instance, using `File > Open...`, in the given order:  `error_1-and-3.graphite.txt`, `error_2.graphite.txt`, and finally `error_1-and-3.graphite.txt`.  Then, in the last file (the one currently open), use the path tool to drag a point of the black ellipse (the other layers/shapes are extraneous data relative to the error).  > #2214 is a great example of the kind of situation we're looking to get bug reports for  Discord discussion: https://discord.com/channels/731730685944922173/860830913390575646/1333447293021720706"
2225,Visualize the separate concepts of tooling pivot and graphical data origin,open,https://github.com/GraphiteEditor/Graphite/issues/2225,0HyperCube,,,0,2025-01-26T09:49:52Z,2025-06-27T09:38:14Z,,,No,"There will be two different dot gizmos, which the Select tool's control bar shall display a dropdown to choose from. A checkbox beside these controls enables or disables the whole feature, and when disabled it uses the center of the current selection's bounding box. The reference point input widget that's presently in the control bar will become specific to the pivot mode— but when the feature's checkbox is unticked to use the bounding box center, we will show none of the 9 selector boxes as active while still letting the user click one to enable pivot mode. This would be grayed out entirely in origin mode. These same controls described above will be added to the Path tool's control bar, as well.  Currently, the pivot is used by the tooling. But that will adapt to the chosen mode once this issue is implemented, so the chosen mode's center of rotation/scaling is used by the following forms of tooling:  - G/R/S - Resizing the corners of the transform cage when <kbd>Alt</kbd> is pressed. (Should transform cage rotation also use the bounding box center by default unless <kbd>Alt</kbd> is pressed?)  Albeit with some differences like our choice of labeling, this feature is sort of analogous to Blender's ""Transform Pivot Point"" menu:  ![Image](https://github.com/user-attachments/assets/5c49b76b-ae95-491c-8825-1a7db920f2c3)  - **Bounding Box Center**: should behave the same in Graphite as Blender; our equivalent occurs when the mode is disabled so this won't be part of the dropdown menu; this acts equivalently to the **centered** yellow pivot as it works today in master - **3D Cursor**: equivalent to our pivot but it behaves differently than in Blender; this shouldn't be touched from the behavior already in master - **Individual Origins**: should behave the same in Graphite as Blender; this is one of the origin's modes; each selected layer transforms about its own origin position - **Median Point**: should behave the same in Graphite as Blender; this is one of the origin's modes; each selected layer transforms about the average position of their shared origins - **Active Element**: should behave the same in Graphite as Blender; this is one of the origin's modes; transforms all the selected layers about the origin of the most recently selected layer (stretch goal, possible future follow-up work)  | | | |:-:|-| | <h3>Pivot</h3>![Image](https://github.com/user-attachments/assets/d687ce18-a309-48a2-8fdb-fb905c3c5830) | <p>This is the yellow (final color TBD) crosshair symbol. It's the temporary/transient pivot. Equivalent to Blender's 3D cursor, but isn't global to the document nor is it as persistent as the 3D cursor. It's used only for tooling, not part of the node graph data or document format. This is our current implementation, but it will need to be tweaked.</p><p><ul><li>Currently, we store the pivot permanently on each layer, but this can lead to confusion if the user comes back later and finds it in an unexpected location (especially since scaling can affect it in weird ways). This also makes the code more difficult because we have to save tooling-level data into the serialized document. Remove the per-layer, persistent storage.</li><li>Make it so each layer that the user clicks will have the pivot set to its corresponding corner/midpoint/center of the reference point input widget (located in the tool's control bar). Switching from one layer to the next keeps that chosen position of the reference point input widget.</li><li>The user can drag the pivot crosshair gizmo anywhere in the canvas, disconnecting it from the chosen position in the reference point input widget. When disconnected, clicking away from the current layer (by deselecting it, or by selecting another layer instead; however **not** by partially extending/subtracting the existing selection) resets it, going back to the last selected position of the 9-box widget.</li><li>But the user can ""pin"" the dragged location:<br /><img style=""float: right"" src=""https://github.com/user-attachments/assets/36957ab8-188d-4f14-a8a4-9d476a97403a"" /><br />Then, no matter what selection changes occur, that remains the location of the pivot until unpinned or until clicking any of the 9 boxes in the reference point input widget again which unpins it. Perhaps double-clicking the crosshair gizmo can pin/unpin.</li></ul></p> | | | | | <h3>Origin</h3>![Image](https://github.com/user-attachments/assets/467a8575-e153-4215-8fe5-d8241c8a0575) | <p>This is the blue (final color TBD) dowel pin symbol. It's the origin (`(0, 0)` point) of the vector data's internal coordinate space. This is used when transforming in the *Transform* node's properties panel parameters, or when using the *Copy to Points* node. Its drag will be stored in the ""Origin: Offset"" parameter of the *Transform* node (but for now, we don't have that yet, so the origin is visualized but not draggable for now).</p><p><img src=""https://github.com/user-attachments/assets/1a6f2f78-13b2-470f-bf4e-65b223abe02b"" /></p><p>(This menu's scale and rotation parameters should also offer a way to edit those values factoring in the current pivot choice which would make it update its location together with the typed value for rotation or scale such that it treats the change as occurring with that temporary pivot.)</p> |"
2222,Motivating use case: Feynman diagrams,open,https://github.com/GraphiteEditor/Graphite/issues/2222,0HyperCube,,,0,2025-01-25T11:55:13Z,2025-06-30T06:19:56Z,,,No,Graphite should support creating the Feynman diagrams. Users should be able to draw the vector paths and assign the particle types and labels. The node graph should allow for diagrams to be generated mostly automatically and then manually refined where necessary.  - [x] #2221  - [x] #696 - [ ] #1832 - [ ] UI for assigning attributes from inside the path tool - ideally a dropdown with the particle type per segment - [ ] Generating graphics probably requires some custom nodes along with #883 - [ ] Automatically place labels to attempt to avoid intersections  ![Sample diagram](https://github.com/user-attachments/assets/f53c97b2-00b7-48d1-af07-50f1578d700f)  ![Image](https://github.com/user-attachments/assets/89ba0fee-0102-47e1-a357-86e1a74d68b5)
2219,Prevent the layer tree from allowing layer drag group formation of incompatible types,open,https://github.com/GraphiteEditor/Graphite/issues/2219,Keavon,Paper Cut,,0,2025-01-24T07:25:07Z,2025-06-05T03:52:45Z,,,No,"We display a grayed out expansion arrow for empty layers. This also means other layers can be dragged into that layer, becoming a child.  ![Image](https://github.com/user-attachments/assets/ab098d1f-950e-4c6a-949c-e2cf4b224b7f)  That's because we want to indicate to users that this potentially could have a child. If it gains a child, it would become a group and the expansion arrow would get un-grayed out. Or, it can become a content layer fed by a chain starting with a generator node, in which case it can't gain a child.  But there is confusing behavior with the Path node, since it isn't a generator node. That is, it takes an optional primary input. Since now it becomes possible to attach a child layer to the start of that chain (feeding into the Path node), we display the grayed out expansion arrow. However, the user won't ever be dragging one layer (which outputs group data) into the layer (since the Path node takes vector data).  However, if it's just a Transform node feeding into the otherwise empty layer, that chain has no content. It still makes perfect sense to drag another layer into this layer to turn it into a group (which is transformed by the Transform node).  So there are two situations here: - The layer's left input at the start of the node chain accepts group input (such as no chain, or the Transform node, or the Flatten Vector Elements node). Keep the current behavior with the grayed out expansion arrow and ability to drag layers into it. - The Path node doesn't (currently) accept group data. Upon dragging another layer into the vector data layer, this becomes a type error (but this will change with #1822, negating this specific example, but there will be other examples this concept should still be implemented for). So we don't want to allow dragging layers (which output group data) into a node which begins with the Path node, or any other node with a primary input incompatible with group data. In that case, the grayed out expansion arrow shouldn't show in the Layers panel, and users shouldn't be able to drag a layer into it. (In the future, if we have layers that output a specific other type besides group, we should aim to allow dragging compatible types into compatible inputs even if they don't show the grayed out expansion arrow normally.) This change will prevent the user from using the WYSIWYG tooling to break the graph (which should be considered a bug: #2214).  Lastly, when reordering layers by dragging them around in the Layers panel, we want to turn the insertion bar red if the type would be invalid, causing a graph error."
2216,Tracking Issue: Biggest quality-of-life improvements,open,https://github.com/GraphiteEditor/Graphite/issues/2216,Keavon,,,0,2025-01-23T06:35:13Z,2025-05-25T21:20:31Z,,,No,"Some but not all of these are good first issues (just ask, preferably in Discord but here is fine too).  "
2214,Prompt user to report a bug if graph becomes unrenderable due to an act of tooling,open,https://github.com/GraphiteEditor/Graphite/issues/2214,Keavon,"Good First Issue,Paper Cut",,2,2025-01-23T05:32:56Z,2025-01-28T21:30:08Z,,,No,"The graph can fail to render due to a type error, or outright crash. If this happens while a user is interacting with WYSIWYG tooling (i.e. the graph isn't open), we should consider this a bug because the tooling broke the graph. In this situation, we should indicate to users that this situation isn't supposed to happen, and request they report the bug.  To prevent users from being prompted to report bugs arising from noodling around in the graph, even if they subsequently close the graph and Ctrl+Z their way back to the broken graph, we should store if the graph was open or closed during the document history snapshot. We could also open the graph for the user automatically if they undo/redo to a point when the graph was invalid and that node graph was open at that time. If so, it should also close the graph if the user undoes/redoes past that point and returns to a valid graph, without having interacted with the automatically-opened graph."
2207,Variable stroke width,open,https://github.com/GraphiteEditor/Graphite/issues/2207,plufz,,,2,2025-01-19T21:08:28Z,2025-01-20T13:20:10Z,,,No," For me variable stroke width is a feature that I really need to be able to use a vector editor to make illustrations.  Is there any chance that feature is a part of the ""Stylus and touch interaction"" task below from the roadmap? Otherwise I would really appreciate if you would consider it. All the best!"
2191,Improve performance of path bool library,open,https://github.com/GraphiteEditor/Graphite/pull/2191,TrueDoctor,,,0,2025-01-11T23:38:29Z,2025-06-28T13:25:59Z,,,Sí,"<!-- Please reference any relevant issue number below, optionally with a ""Closes""/""Resolves""/""Fixes"" prefix -->    "
2188,Importing raw camera photos,open,https://github.com/GraphiteEditor/Graphite/issues/2188,0HyperCube,"Architecture,Graphene,Graphics",,0,2025-01-11T18:32:08Z,2025-04-11T22:50:29Z,,,No,"A partial implementation in #2106 but is blocked. This is the final deliverable from a Google Summer of Code [project](https://graphite.rs/volunteer/guide/student-projects/#2024-raw-photograph-decoding-in-rust).  This work was stalled because it was unusable due to memory restrictions #1895.  This will be solved by reducing copying of image data as much as possible via the asset database system (#1604). Further, we can save the actual data in JS memory and read it from Wasm memory.  Other possible solutions: - Reducing copying of image data using `Arc<Image>`. - Using [memory64](https://github.com/WebAssembly/memory64/blob/main/proposals/memory64/Overview.md) if it is released as stable in Chrome, Firefox, and Safari. - Somehow reducing the memory requirements of autosave (e.g. don't encode the uncompressed f32 values as base64). Possibly addressed as part of #1605."
2187,Tracking Issue: Animation,open,https://github.com/GraphiteEditor/Graphite/issues/2187,0HyperCube,"Architecture,Performance,Graphene",Keavon,0,2025-01-11T18:23:11Z,2025-04-11T22:33:05Z,,,No,"Previously discussed in #1601.  - [x] Avoiding constant folding (#2232)   Progress on animation was stalled because of the constant folding: non-async secondary inputs are all evaluated as the graph is compiled.  - [x] Parametric animation (#2443)   Allow the time from the context to be retrieved by the user in the node graph via the ""Animation Time"" and ""Real Time"" nodes. Add simple buttons and keybinds for pausing/playing and restarting the animation.  -  [ ] Add nodes for [easings](https://easings.net/)  -  [ ] Implement the Timeline panel   ![Image](https://github.com/user-attachments/assets/548ee0de-2dd6-41c4-816c-2290d556d7c3)  - [ ] Add the ability to expose channels for keyframing from the Properties panel   ![Image](https://github.com/user-attachments/assets/f3a43a19-c10f-4e06-9fb5-a46d52cd9346)   ![Image](https://github.com/user-attachments/assets/0d424350-a44b-4519-93ab-bc7f3e8dcda2)  - [ ] Onion skins  - [ ] 2D rigging"
2168,Tracking Issue: GPU integration,open,https://github.com/GraphiteEditor/Graphite/issues/2168,Keavon,"Graphene,Graphics",TrueDoctor,0,2024-12-30T05:08:54Z,2025-03-02T11:21:22Z,,,No,
2167,Status bar graph render progress spinner/indicator,open,https://github.com/GraphiteEditor/Graphite/issues/2167,Keavon,Graphene,,2,2024-12-30T01:52:46Z,2025-01-19T22:08:54Z,,,No,"Display a spinner icon in the status bar when beginning to render the node graph, and remove it when done"
2153,"The Layers panel doesn't show expandable children for the lower layer, only the top layer",open,https://github.com/GraphiteEditor/Graphite/issues/2153,Keavon,Paper Cut,,1,2024-12-23T06:45:05Z,2025-01-19T22:08:57Z,,,No,"![capture](https://github.com/user-attachments/assets/6ad06b4f-da1f-49ae-8f2f-7e68d5084f9f)    In the Layers panel on the right, *both* parent layers should show an expand arrow with child layers. Not only the top one."
2151,Path tool should have a linear/quadratic/cubic toggle for selected anchors,open,https://github.com/GraphiteEditor/Graphite/issues/2151,Keavon,Design,,0,2024-12-23T06:09:48Z,2025-02-07T11:57:08Z,,,No,"I need to design icons for these three modes that'll be displayed in a radio button arrangement (use text for now as placeholders). This will finally make it possible for the user to see whether an anchor point is currently set to linear, quadratic, or cubic and have control over that.  We also want quadratic segments to have their single handle connect to both its endpoints with a line overlay visualization, not just arbitrarily one of the two endpoints. This will help also clarify to users when a segment is quadratic, since its handle will visually being to both anchors.  Also, hitting the delete key should set handles to zero-length but not remove it, turning cubic into quadratic or quadratic into linear, as it does now. See [this](https://discord.com/channels/731730685944922173/881073965047636018/1217753262363775046) `#code-todo-list` task."
2142,Refactor floating menus to use HTML <dialog> and CSS popover with anchor(),open,https://github.com/GraphiteEditor/Graphite/issues/2142,Keavon,Web,,2,2024-12-16T23:41:28Z,2025-01-19T22:09:00Z,,,No,"Modal dialogs (such as Preferences, About Graphite, closing save confirmations, etc.) should be refactored to use a [`<dialog>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog) element.    Popover menus (such as menu lists and popovers) should be refactored to use the [Popover API](https://developer.mozilla.org/en-US/docs/Web/API/Popover_API/Using) paired with [CSS anchor positioning](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_anchor_positioning/Using) to replace the current CSS positioning hackery (which is fragile and isn't compatible with keeping up with scrolling its floating menu spawner within a pane with scrollbars). Care will need to be taken to ensure it works with [nested popovers](https://developer.mozilla.org/en-US/docs/Web/API/Popover_API/Using#nested_popovers).    This is **blocked** on CSS anchor positioning reaching all modern browsers ([caniuse](https://caniuse.com/css-anchor-positioning)). As of late 2024, Firefox and Safari do not support it.    ![capture](https://github.com/user-attachments/assets/afdfb9e2-f6ac-4610-86d3-38f329d65e45)  "
2141,Small click target when dragging/moving a straight line or small objects,open,https://github.com/GraphiteEditor/Graphite/issues/2141,tcpie,"Good First Issue,Paper Cut",,2,2024-12-16T18:32:26Z,2025-01-19T22:08:56Z,,,No,"Make a straight line with e.g. the pen tool. Using the select tool, try to move the line. Notice how it is not possible -- either the line is rotated, or the point of reference for rotation is moved -- the line cannot be dragged. Moving with the ""G"" button (grab) works, but that mode does not seem to support snapping.    A (similar?) issue occurs for 2D objects when they are (too) small: they cannot be dragged anymore, only resized or rotated."
2129,Exporting with auto bounds doesn't account for outer stroke,open,https://github.com/GraphiteEditor/Graphite/issues/2129,paul-fornage,Paper Cut,,4,2024-12-06T05:18:39Z,2025-05-09T00:29:41Z,,,No,"When exporting an SVG with transperancy, the bounding box doesn't seem to include the outer stroke weight. So if you export a square with a stroke width of 8 px, the exported image will have the outer stroke cut off.     This is also the case in the dev deployment.    The exported svg:  (notice how the borders are visibly cut off)  ![Spelling bee cell](https://github.com/user-attachments/assets/d55adc0a-ae02-4fa4-bd4c-e7c77690e82c)    The project file (renamed to have `.txt` so github lets me upload it):  [Spelling bee cell.graphite.txt](https://github.com/user-attachments/files/18033027/Spelling.bee.cell.graphite.txt)    Changing the SVG `viewbox`, `width`, `height`, and remoxing the transformation to restore the boundaries to those present in the project (1000px^2 for me) fixed the issue completely.  "
2125,Advanced font management and browsing,open,https://github.com/GraphiteEditor/Graphite/issues/2125,nz366,,,2,2024-12-02T04:17:42Z,2025-03-07T02:37:55Z,,,No,"Most of the time font selection takes way too much time. Mostly I don't want to use fonts that is installed by different apps and the system. Graphite should have a better font selection ux.   - There should be a dedicated panel to manage font selection.  - Ways to find fonts quickly that matches certain styles.  - Even better a separate modal  (something like google fonts UI) to  sort, group fonts by available features like languages and weights etc. And hide/enable/disable set of font in a click of a button.     I think these feature is to broad could be built inside a plugin. I hope at least graphite can pave the way for plugins like this.  As a starting point graphite should be able to read a json file for list of fonts graphite is currently allowed to list inside font selection dropdown menu.  Related: #1340"
2117,Add a parametric_to_euclidean() function to Bezier-rs,open,https://github.com/GraphiteEditor/Graphite/issues/2117,lucasw,Good First Issue,,3,2024-11-23T03:01:28Z,2025-01-19T22:08:51Z,,,No,"I'd like to convert the output of [project()](https://docs.rs/bezier-rs/latest/bezier_rs/struct.Bezier.html#method.project) to a euclidean distance ratio, but I don't see that method, only euclidean_to_parametric() for going the other way- or is it there and named something different?"
2108,[Crash Report] Trying to blend 2 images ,open,https://github.com/GraphiteEditor/Graphite/issues/2108,carlo-colombo,Crash,,2,2024-11-12T06:50:15Z,2025-01-19T22:08:58Z,,,No,"**Describe the Crash**  I imported 2 images in the editor, then added a Rasterize blend node, when I tried to connect the output of the blend node to a transform to output in a layer it crashed    **Steps To Reproduce**  Describe precisely how the crash occurred, step by step, starting with a new editor window.  1. Open the Graphite editor at https://editor.graphite.rs  2. add 2 images  3. add blend node  4. output blend to a layer  5.     **Additional Details**  Provide any further information or context that you think would be helpful in fixing the issue. Screenshots or video can be linked or attached to this issue.    <img width=""1055"" alt=""Screenshot 2024-11-12 at 07 48 53"" src=""https://github.com/user-attachments/assets/18512de7-0dba-4046-a291-2a638dfc3c38"">    **Browser and OS**  Chrome 130, Mac    **Stack Trace**  Copied from the crash dialog in the Graphite editor:    ```  panicked at node-graph/gcore/src/raster/image.rs:162:9:  assertion `left == right` failed    left: 211600   right: 1558440    Error      at https://editor.graphite.rs/assets/index-StBtR31p.js:706:1169      at p (https://editor.graphite.rs/assets/index-StBtR31p.js:691:5216)      at Object.handleJsMessage (https://editor.graphite.rs/assets/index-StBtR31p.js:691:5364)      at https://editor.graphite.rs/assets/index-StBtR31p.js:692:63200      at https://editor.graphite.rs/assets/index-StBtR31p.js:692:35871      at et (https://editor.graphite.rs/assets/index-StBtR31p.js:692:1842)      at P0.o.wbg.__wbg_call_5fb7c8066a4a4825 (https://editor.graphite.rs/assets/index-StBtR31p.js:692:35841)      at graphite_wasm.wasm._ZN13graphite_wasm10editor_api12EditorHandle27send_frontend_message_to_js17he2260553331a2c0eE (https://editor.graphite.rs/assets/graphite_wasm_bg-hUH_VdBe.wasm:wasm-function[3760]:0x80c152)      at graphite_wasm.wasm._ZN4core3ops8function2Fn4call17haad1996cb846aa98E (https://editor.graphite.rs/assets/graphite_wasm_bg-hUH_VdBe.wasm:wasm-function[13566]:0xaccd7c)      at graphite_wasm.wasm._ZN3std9panicking20rust_panic_with_hook17he5c089ac7305193eE (https://editor.graphite.rs/assets/graphite_wasm_bg-hUH_VdBe.wasm:wasm-function[6938]:0x9a80e6)      at graphite_wasm.wasm._ZN4core9panicking9panic_fmt17hdc8d2d914c0710e4E (https://editor.graphite.rs/assets/graphite_wasm_bg-hUH_VdBe.wasm:wasm-function[10356]:0xa7e74c)      at graphite_wasm.wasm._ZN4core9panicking19assert_failed_inner17hac6df1fbe8940f48E (https://editor.graphite.rs/assets/graphite_wasm_bg-hUH_VdBe.wasm:wasm-function[4538]:0x8a2e32)      at graphite_wasm.wasm._ZN13graphene_core6raster5image14Image$LT$P$GT$10to_flat_u817h4555360db951b76cE (https://editor.graphite.rs/assets/graphite_wasm_bg-hUH_VdBe.wasm:wasm-function[2052]:0x65b99d)      at graphite_wasm.wasm._ZN13graphene_core6raster5image48Image$LT$graphene_core..raster..color..Color$GT$6to_png17h47de683678e9d25eE (https://editor.graphite.rs/assets/graphite_wasm_bg-hUH_VdBe.wasm:wasm-function[5226]:0x8fe603)      at graphite_wasm.wasm._ZN123_$LT$graphene_core..graphic_element..Raster$u20$as$u20$graphene_core..graphic_element..renderer..GraphicElementRendered$GT$10render_svg17h7930ea5fdb36609dE (https://editor.graphite.rs/assets/graphite_wasm_bg-hUH_VdBe.wasm:wasm-function[1123]:0x4d133b)      at graphite_wasm.wasm._ZN129_$LT$graphene_core..graphic_element..GraphicGroup$u20$as$u20$graphene_core..graphic_element..renderer..GraphicElementRendered$GT$10render_svg17ha65ae070e1b3686eE (https://editor.graphite.rs/assets/graphite_wasm_bg-hUH_VdBe.wasm:wasm-function[1339]:0x55148b)      at graphite_wasm.wasm._ZN12graphene_std19wasm_application_io6render28_$u7b$$u7b$closure$u7d$$u7d$17h05695b0b382f62c1E (https://editor.graphite.rs/assets/graphite_wasm_bg-hUH_VdBe.wasm:wasm-function[533]:0x2ed250)      at graphite_wasm.wasm._ZN150_$LT$graphene_core..registry..DynAnyNode$LT$_I$C$_O$C$N$GT$$u20$as$u20$graphene_core..Node$LT$alloc..boxed..Box$LT$dyn$u20$dyn_any..DynAny$GT$$GT$$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h09caeea081fb414aE (https://editor.graphite.rs/assets/graphite_wasm_bg-hUH_VdBe.wasm:wasm-function[6121]:0x95db0e)      at graphite_wasm.wasm._ZN173_$LT$$RF$interpreted_executor..dynamic_executor..DynamicExecutor$u20$as$u20$graph_craft..graphene_compiler..Executor$LT$I$C$graph_craft..document..value..TaggedValue$GT$$GT$7execute28_$u7b$$u7b$closure$u7d$$u7d$17haa162f81f698bdb7E.llvm.10675772075615849968 (https://editor.graphite.rs/assets/graphite_wasm_bg-hUH_VdBe.wasm:wasm-function[3839]:0x81a715)      at graphite_wasm.wasm._ZN13graphite_wasm10editor_api26poll_node_graph_evaluation28_$u7b$$u7b$closure$u7d$$u7d$17hf0998fcf8cb87065E (https://editor.graphite.rs/assets/graphite_wasm_bg-hUH_VdBe.wasm:wasm-function[5317]:0x91193c)      at graphite_wasm.wasm._ZN20wasm_bindgen_futures5queue10QueueState7run_all17hd97bfc3873db4599E (https://editor.graphite.rs/assets/graphite_wasm_bg-hUH_VdBe.wasm:wasm-function[3837]:0x81a0be)      at graphite_wasm.wasm._ZN20wasm_bindgen_futures5queue5Queue3new28_$u7b$$u7b$closure$u7d$$u7d$17h09657dd8eac6fbb0E.llvm.4933978826303673485 (https://editor.graphite.rs/assets/graphite_wasm_bg-hUH_VdBe.wasm:wasm-function[11857]:0xaa29aa)      at graphite_wasm.wasm._ZN136_$LT$dyn$u20$core..ops..function..FnMut$LT$$LP$A$C$$RP$$GT$$u2b$Output$u20$$u3d$$u20$R$u20$as$u20$wasm_bindgen..closure..WasmClosure$GT$8describe6invoke17h34d207096920c174E (https://editor.graphite.rs/assets/graphite_wasm_bg-hUH_VdBe.wasm:wasm-function[11856]:0xaa299c)      at graphite_wasm.wasm.closure10070 externref shim (https://editor.graphite.rs/assets/graphite_wasm_bg-hUH_VdBe.wasm:wasm-function[12019]:0xaa4769)      at y0 (https://editor.graphite.rs/assets/index-StBtR31p.js:692:891)      at i (https://editor.graphite.rs/assets/index-StBtR31p.js:692:266)  ```"
2106,Import ARW files as Images,open,https://github.com/GraphiteEditor/Graphite/pull/2106,elbertronnie,,,4,2024-11-10T21:21:53Z,2025-06-28T13:25:58Z,,,Sí,"Blocked because of #1895, waiting on #1604 to be unblocked. Closes #2188"
2101,Initialization flicker when creating a document with an artboard or imported image,open,https://github.com/GraphiteEditor/Graphite/issues/2101,0HyperCube,Paper Cut,,1,2024-11-10T12:39:13Z,2025-01-19T21:45:56Z,,,No,"When creating a document with file -> new document, flickering occurs. This is because the editor first renders the artboard with a scale of 1 and no offset, before centring the viewport.    Ideally this first render should not be necessary. If it is kept however, there is no reason to blit it."
2100,Long node graph evaluations hang frontend,open,https://github.com/GraphiteEditor/Graphite/issues/2100,0HyperCube,Performance,,1,2024-11-10T10:59:47Z,2025-01-19T21:45:45Z,,,No,Despite all of the weird and hacky things we have to pass node graph evaluations to another 'thread'  both browsers I have tested (firefox-dev and msedge) appear to evaluated the node graph on the main thread. This was confirmed both by running an expensive node and using the profiler.
2084,Node versioning system,open,https://github.com/GraphiteEditor/Graphite/issues/2084,adamgerhant,,,0,2024-10-30T04:30:46Z,2025-01-19T22:08:52Z,,,No,"Since nodes are constantly changing, we currently have to run automated upgrade scripts to replace node internals with the current version, update inputs, etc. A non destructive node versioning system similar to Crates is necessary for compatibility and ease of use.    Each instance of a node will store its version, and the document node definition will also store the version. The definition version will be incremented every time a node is changed, and every time a new version is created an upgrade script can be included to upgrade from the previous version to that version.    When the editor notices an out of date node, it prompts the user to upgrade it. It will use the mapping of version to upgrade scripts one by one to get the node to the most up to date version. The important part is that a node will never be automatically changed unless a user explicitly requests it. An ignore box should also be available, which dereferences the users node from the node definition.    Note that this is not related to editor structs and fields. That will still require breaking changes or best attempts at upgrading."
2078,Aperiodic tile generator node,open,https://github.com/GraphiteEditor/Graphite/issues/2078,Keavon,Good First Issue,,4,2024-10-26T00:56:31Z,2025-01-19T22:08:53Z,,,No,https://en.wikipedia.org/wiki/Aperiodic_tiling  https://en.wikipedia.org/wiki/Einstein_problem    It'd be a cool demonstration of the boundlessness of the adaptive resolution system.
2068,Preserve point IDs without a path node,open,https://github.com/GraphiteEditor/Graphite/issues/2068,0HyperCube,"Architecture,Crash",,2,2024-10-22T20:40:47Z,2025-03-29T04:51:05Z,,,No,"When there is no path node, the `compute_modified_vector` function (included below) relies on the `click_targets`. However click targets don't store PointIds, SegementIds, or colinear handles. This leads to a couple of issues:  - If you select a point on ellipse (no dragging) the colinear check box won't be filled.  - If the segments are in an odd order (e.g. with the bevel node), inserting a point in a segment crashes.    https://github.com/GraphiteEditor/Graphite/blob/c3a3c4c907419e2ebb9a382546a1d7b66f57cdc0/editor/src/messages/portfolio/document/utility_types/network_interface.rs#L2826-L2831"
2054,Store metadata as data flows through the graph,open,https://github.com/GraphiteEditor/Graphite/issues/2054,adamgerhant,"Architecture,Graphene",adamgerhant,1,2024-10-19T18:07:23Z,2025-07-02T09:09:12Z,,,No,"The downstream transform to the document for layers (and other nodes) will have to be returned from the render output due to caching not working with monitor nodes (#1946). Monitor nodes cannot be used to get the downstream transforms, since a downstream transform node will not update an upstream cached monitor node. Currently this logic is done when rendering, but this will skip data upstream from destructive operations. This means the best solution is to store a recursive metadata structure for each row in a spread sheet that stores its downstream transforms, and the downstream transforms of all upstream nodes.  This means all spreadsheets will need to contain a column for metadata, which will also need to include all upstream metadata (downstream transform to document).     The Path node and Merge node should add their NodeId and an identity matrix to the spreadsheet, and the transform node will continuously modify this transform as it flows through the graph. This means the Footprint is no longer used to calculate the downstream transforms    Monitor nodes can be used to access upstream data though, for example the vector data of a Path node, clip status for the artboard node, etc. This is somewhat blocked by (#2044), but an easy work around could be to insert them in the definition for now.    ~~Transforms on vector data will be stored in a column of type Vec<(NodeId, DAffine)>. Each transform node right (left?) multiplies the last matrix in the vec, and each path node adds a new element to the vec. It is essentially the responsibility of the data type and nodes to provide the vector modify functionality for manipulating the various path nodes. The data cannot be returned from monitor nodes due to caching, as a downstream transform could change without the monitor node being updated. The two solutions to this could be to start execution from the path node, or return the data with the render output. Returning data from the render output means that the path node would store the its vector data in a column of type Vec<(NodeId, VectorData)>~~    ~~When displaying the overlay for vector data in `path_overlays`, the click targets from the first path node are used, but the transform is derived from the layer. The transform should be used as it flows through the monitor node in the path node, not the layer.~~    ~~For example, create a vector with a path, then repeat it. The graphic group has an identity transform, while the vector data stores the full transform. This means the vector~~    ~~The best solution is to not return the transform to viewport from the render output as is currently done. Instead, monitor nodes are used to return the transform to document space (downstream transforms * data transform). The downstream transforms are tracked by separating the document to viewport and downstream transforms in the footprint. Then the editor will use the document to viewport transform to calculate the full transform from that monitor node to viewport space (monitor transform * document to viewport). This solves the caching issue since the monitor nodes will only need to return their data when the data changes, not when the document to viewport in the footprint changes.~~    ~~In general, no metadata should be returned from the render output due to its destructive nature.~~      "
2050,Upstream transform in a layer stack offsets tooling downstream of it,open,https://github.com/GraphiteEditor/Graphite/issues/2050,adamgerhant,Architecture,,1,2024-10-17T19:55:10Z,2025-01-26T00:30:54Z,,,No,"If there is a transform node in a stack, and a rectangle is created at the top of the stack, it will be offset from the cursor. This is because the graphic group stores a global transform. This is something that will need to be fixed by the spreadsheet system (#2003).  ![Image](https://github.com/user-attachments/assets/223f791c-fee2-4351-bebd-e2a8c6be0d97)"
2048,Bezier-rs web demo site's miter limit control doesn't work,open,https://github.com/GraphiteEditor/Graphite/issues/2048,dzaima,"Help Wanted,Good First Issue,Web",,2,2024-10-16T23:00:01Z,2025-03-03T05:04:14Z,,,No,"The ""join: Miter - limit"" options on https://graphite.rs/libraries/bezier-rs/ don't appear to do anything.  I believe it should be the [`variable: ""join: Miter - limit""`](https://github.com/GraphiteEditor/Graphite/blob/9f7b3936f412ad88253ba38f3a9203827ed8b119/website/other/bezier-rs-demos/src/features-subpath.ts#L174)s not matching `options.miter_limit`, but don't have the dev env set up to properly test.  The code for this, which is separate from the main Graphite editor code base, is in [`/website/other/bezier-rs-demos`](https://github.com/GraphiteEditor/Graphite/tree/master/website/other/bezier-rs-demos) which has a readme there for how to set up the project. There isn't much code in that directory.  In the video below, the pointy bit should get flattened when changing the limit slider, but it doesn't currently work in the demo.  https://github.com/user-attachments/assets/8d4dce4b-5116-4fa2-bd8f-879676afedcb"
2047,Identity node has no compiled type,open,https://github.com/GraphiteEditor/Graphite/issues/2047,adamgerhant,"Paper Cut,Graphene",,1,2024-10-16T20:27:24Z,2025-03-15T05:29:21Z,,,No,"https://github.com/user-attachments/assets/36009c4e-07d4-48b4-8c41-a2180d8f63c9    There may be some optimization to remove the identity nodes when compiling the network, which means the type is not added to the `ResolvedDocumentNodeTypes` hashmap"
2044,Automatic monitor node insertion,open,https://github.com/GraphiteEditor/Graphite/issues/2044,adamgerhant,Graphene,,0,2024-10-16T19:47:50Z,2025-01-19T21:41:01Z,,,No,"In order to display thumbnails for every wire, a Monitor node should be placed at outputs during compilation. The number of monitor nodes should be minimized to avoid redundant clones as data flows through the graph. The outputs would be selected based on which thumbnails should be rendered, both in the node graph UI and layer panel. This would also improve #2028 and getting artboard translations in the [Clear Artboards PR](https://github.com/GraphiteEditor/Graphite/pull/2015).    Monitor nodes will be the standard way of getting data from the node graph, as opposed to the render output. This is because the render output does not include all data in the node graph due to destructive operations like rasterize or boolean operations. We currently work around this by redundantly storing the upstream graphic group for vector data created by a boolean operation, but this is not ideal. (This is something that is still currently being discussed)    https://discord.com/channels/731730685944922173/731738914812854303/1291860544604602439  https://discord.com/channels/731730685944922173/731738914812854303/1291830448195899527"
2042,Move network import type from NodeInput::Network to NodeNetwork in order to enable automatic Into node insertion,open,https://github.com/GraphiteEditor/Graphite/issues/2042,adamgerhant,"Architecture,Graphene",,0,2024-10-16T19:36:15Z,2025-06-27T01:16:24Z,,,No,"Instead of annotating type for each NodeInput::network usage, the types should be annotated in a single vec for every import. For example we do something like ``` pub fn node(input1){   subnode(input1: String)   subnode(input1: String)   etc } ```  rather than ``` pub fn node(input1: String){   subnode(input1)   subnode(input1)   etc } ``` Technically I dont think we even need to annotate the parameters, since their types can be resolved at compile time. However, this system would be useful/necessary for automatic into node insertion (#1890, which can also be used to solve #1919), as well as displaying what types can be connected to a node when hovering over the input.  Discussions here: https://discord.com/channels/731730685944922173/731738914812854303/1253116397370998794 https://discord.com/channels/731730685944922173/860830913390575646/1271586374314885201 https://discord.com/channels/731730685944922173/860830913390575646/1271605307771981987  And a more recent recap asking for a reminder about what this is and its status: https://discord.com/channels/731730685944922173/1059075292414619689/1387941282701119550"
2040,Extrude curves,open,https://github.com/GraphiteEditor/Graphite/issues/2040,girllich,,,0,2024-10-16T18:09:57Z,2025-01-19T22:08:55Z,,,No,"(as requested in #general by Keavon)    - For noncurving polygons, just do extrude (but allow multiselect, so you can extrude multiple polygon segments at a time) (see image below)  - For bezier segments, break the bezier into curve elements, turn these into subdivision lines (2d analog of subdivision surfaces) , and extrude those. You end up with cusps, but that's inevitable.    ![image](https://github.com/user-attachments/assets/7775b308-6f39-4eb4-99da-f67c734dafb4)  ![image](https://github.com/user-attachments/assets/8a620611-b843-4feb-b5db-31fb16352f74)  "
2038,Safari-specific JS debugging: Click-and-drag number fields can't be released,open,https://github.com/GraphiteEditor/Graphite/issues/2038,peterawhittaker,"Help Wanted,Web",,6,2024-10-16T12:56:44Z,2025-06-30T22:36:06Z,,,No,"1. Make a new document.  2. Draw a circle.  3. In properties panel, click-and-drag to adjust line weight (or any other similar parameter).  4. Value changes as you move mouse left and right; but it's impossible to finish the adjustment; no matter if I click elsewhere, hit Escape, return, hide the panel etc. the value keeps being adjusted as I move my mouse left and right.   5. Have to reload the editor to fix it.    Not shown in the attached video, but this happens with the document zoom value field as well. If I click-and-drag (not just click) in multiple value fields, they all start adjusting up-down!     https://github.com/user-attachments/assets/12cad083-3a4b-4c4e-b105-555af108ea64    I'm running safari Version 18.0 (19619.1.26.111.10, 19619)."
2026,Tracking Issue: Fully-featured math expression parser and calculator,open,https://github.com/GraphiteEditor/Graphite/issues/2026,Keavon,"Help Wanted,Good First Issue",urisinger,5,2024-10-09T07:41:56Z,2025-06-09T09:36:11Z,,,No,"This should be built as a library (in our `/libraries` directory) that uses a parsing framework such as [Chumsky](https://github.com/zesterer/chumsky) that takes a string at runtime and calculates its result, including units and dimensional analysis.  This would make a great solo contribution for somebody interested in developing a robust solution for this problem without needing to learn any of Graphite's code base. It would also make a good university team/solo ""capstone"" project, which our organization can serve as an ""industry sponsor"" for.  Here's the spec:  ## Operators - [ ] Infix operators: 	- [ ] Addition: `+` 	- [ ] Subtraction: `-` 	- [ ] Multiplication: `*` 	- [ ] Division: `/` 	- [ ] Modulo: `%` 	- [ ] Exponentiation: `^` 	- [ ] Equals: `==` 	- [ ] Not Equals: `!=` 	- [ ] Less Than or Equal To: `<=`, `≤` 	- [ ] Greater Than or Equal To: `>=`, `≥` 	- [ ] Less Than: `<` 	- [ ] Greater Than: `>` 	- [ ] Or: `||` 	- [ ] And: `&&` - [ ] Prefix operators: 	- [ ] Unary Plus: `+` 	- [ ] Unary Minus: `-` 	- [ ] Square root: `√` 	- [ ] Not:`!` - [ ] Postfix operators: 	- [ ] Factorial: `!` - [ ] Grouping operators: 	- [ ] Parentheses: `(` and `)` - [ ] Logical operators: 	- [ ] Equality: `==`, `!=`, `>=`, `<=`, `<`, `>`, `||`, `&&`, and `!` logical operators to the spec.  ## Constants - [ ] Infinity: `inf`, `INF`, `infinity`, `INFINITY`, `∞` - [ ] Imaginary unit: `i`, `I` - [ ] Pi: `pi`, `PI`, `π` - [ ] Tau: `tau`, `TAU`, `τ` - [ ] Euler's Number: `e` - [ ] Golden Ratio: `phi`, `PHI`, `φ` - [ ] Earth's gravitational acceleration: `G`  ## Variables - [ ] Single-letter variables (examples: `x`, `y`, `z`) - [ ] Multi-letter variables (examples: `theta`, `alpha`, `beta`, `gamma`) - [ ] Non-Latin letters and symbols (examples: `λ`, `あ`, `א`, `👍`)  ## Functions - [ ] Trig: 	- [ ] `sin()`, `cos()`, `tan()` 	- [ ] `csc()`, `sec()`, `cot()` - [ ] Inverse trig (aliases: `ar-` and `arc-` prefixes): 	- [ ] `asin()`, `acos()`, `atan()`, `atan2()` 	- [ ] `acsc()`, `asec()`, `acot()` - [ ] Hyperbolic: 	- [ ] `sinh()`, `cosh()`, `tanh()` 	- [ ] `csch()`, `sech()`, `coth()` - [ ] Inverse hyperbolic (aliases: `ar-` and `arc-` prefixes): 	- [ ] `asinh()`, `acosh()`, `atanh()` 	- [ ] `acsch()`, `asech()`, `acoth()` - [ ] Logarithm: 	- [ ] Natural log: `ln()` 	- [ ] Logarithm base 10: `log()` 	- [ ] Logarithm base 2: `log2()` 	- [ ] Logarithm base N: `logN()` (alias: `log_N()`) 		- Examples: `log5()`, `log3.25()`, `log_8()` 	- [ ] Logarithm with variable base: `log(x, b)` - [ ] Exponential: 	- [ ] e^x: `exp()` 	- [ ] 2^x: `exp2()` - [ ] Roots: 	- [ ] Square root: `sqrt()` (alias: `root()`, `root2()`, `root_2()`) 	- [ ] Cube root: `cbrt()` (alias: `root3()`, `root_3()`) 	- [ ] Nth root: `rootN()` (alias: `root_N()`) 		- Examples: `root3()`, `root5.237()`, `root_27.72()` 	- [ ] Root with variable degree: `root(n, x)` 		- Example: `root(27, 3)` is equivalent to `cbrt(27)` - [ ] Geometry: 	- [ ] Hypotenuse equation sqrt(a^2 + b^2): `hypot()` - [ ] Mapping: 	- [ ] Absolute value: `abs()` (magnitude of a real or complex number) 	- [ ] Floor: `floor()` 	- [ ] Ceiling: `ceil()` 	- [ ] Round: `round()` 	- [ ] Clamp: `clamp(x, min, max)` 	- [ ] Lerp: `lerp(a, b, t)` 	- [ ] Truncate: `trunc()` 	- [ ] Fractional part: `frac()` 	- [ ] Sign: `sign()` - [ ] Logical 	- [ ] Is NaN: `isnan()` (returns 1 if the operand is NaN, 0 otherwise) 	- [ ] Equality: `eq()` (returns 1 if both operands and units are equal, 0 otherwise) 	- [ ] Greater than: `greater()` (returns 1 if the left operand is greater than the right operand and units are equal, 0 otherwise) 	- [ ] Greater-or-equal: `greatereq()` (returns 1 if the left operand is greater than or equal to the right operand and units are equal, 0 otherwise) 	- [ ] Less than: `lesser()` (returns 1 if the left operand is less than the right operand and units are equal, 0 otherwise) 	- [ ] Less-or-equal: `lessereq()` (returns 1 if the left operand is less than or equal to the right operand and units are equal, 0 otherwise) 	- [ ] Not: `not()` (returns 1 if the operand is zero, 0 otherwise) 	- [ ] And: `and()` (returns 1 if both operands are non-zero, 0 otherwise) 	- [ ] Or: `or()` (returns 1 if either operand is non-zero, 0 otherwise) 	- [ ] Xor: `xor()` (returns 1 if exactly one operand is non-zero, 0 otherwise) 	- [ ] If: `if(cond, a, b)` (returns `a` if `cond` is non-zero, `b` otherwise) 		- A potential alternative to nonzeroness in these logical functions could be using `true` and `false` as units with either no value, a value of 0, or a value of 1 - [ ] Complex numbers: 	- [ ] Real part: `real()` 	- [ ] Imaginary part: `imag()` 	- [ ] Angle: `arg()` (alias: `angle()`)  ## Number representations - [ ] Integers (examples: `0`, `42`, `-42`) - [ ] Decimals (examples: `0.5`, `3.14159`, `-2.71828`) - [ ] Scientific notation (examples: `1e-6`, `2.5E3`) - [ ] Imaginary numbers (examples: `3i`, `-2.5i`, `1.5e-3i`, `2.5e3 + 2.1e-2i`) - [ ] Units (examples: `5m`, `5 m`, `3.5kg`, `3.5 kg`, `2.5m/s^2`, `2.5 m/s^2`)  ## Units - In addition to the unit abbreviations, full unit names can be used in either singular or plural form - Math expressions perform dimensional analysis 	- The scalar part is simplified while the unit part is kept as a fraction if it cannot be simplified 	- Units should only be combined if they are mixed with other units in either the numerator or denominator, defaulting to the unit that would best avoid loss of precision 		- Example: `5m + 3m -> 8m` 		- Example: `5ft + 3ft -> 8ft` 		- Example: `5m + 3ft -> 5.9144m` (meters are chosen because 1ft = 0.3048m exactly, while its inverse can't be represented exactly) - Values can always be requested for conversion to a specific unit in the API  ## Unit list - Unitless - Pixels: 	- `px` - Length: 	- Meter `m` and its prefixes 	- `thou`, `pc`, `pt`, `in`/`""`, `ft`/`'`, `yd`, `mi`, `nmi` - Area: 	- length^2 	- `acre`, `are`, `hectare` - Volume: 	- length^3, area * length 	- Paper sizes: `A0`, `A1`, `A2`, `A3`, `A4`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10` 	- `floz`, `cup`, `pint`, `qt`, `gal` 	- `l` and its prefixes - Mass: 	- Kilogram `kg` and its prefixes 	- `gr`, `oz`, `lb`, `ton`, `tonne` - Time: 	- Second `s` and its prefixes 	- `min`, `hr`, `day` - Angle: 	- Degrees: `deg`/`°` 	- Radians: `rad` (unitless is not an angle) 	- Turns: `turn` - Velocity: 	- length / time 	- `m/s`, `km/h`, `mph`, `knot` - Acceleration: 	- velocity / time, length / time^2 	- `m/s^2`, `ft/s^2`, `g` - Angular velocity: 	- angle / time 	- `deg/s`, `rad/s`, `rpm`, `rps` - Angular acceleration: 	- angular velocity / time, angle / time^2 	- `deg/s^2`, `rad/s^2` - Illumination 	- TODO: Research and lay out what these are, like candela, nits, etc.  ## Unit metric prefixes - Nano (`n`) - Micro (`µ`, `u`) - Milli (`m`) - Centi (`c`) - Deci (`d`) - Deca (`da`) - Hecto (`h`) - Kilo (`k`) - Mega (`M`) - Giga (`G`) - Tera (`T`)  ## Implicit multiplication - [ ] Automatically handle multiplication without explicit `*` operator 	- [ ] Between numbers and variables/constants (examples: `3x`, `2pi`) 	- [ ] Between numbers and functions (example: `4sin(90deg)`) 	- [ ] Between adjacent variables/constants (examples: `xy`, `pi r^2`)  ## API features - [ ] Parsing/construction separate from evaluation so the same expression can be run repeatedly with different variables without wasted performance - [ ] Setting the result of one expression to a variable for use in subsequent expressions - [ ] Custom supplied units, unit symbols, functions, and constants - [ ] Syntax highlighting  ---  - [x] Initial library implementation (#2033) - [ ] Add more features as described in the spec above, such as `abs()` and others"
2021,Destructive node collapse,open,https://github.com/GraphiteEditor/Graphite/issues/2021,Keavon,,,3,2024-10-04T06:26:35Z,2025-03-13T17:17:54Z,,,No,"It should be possible to right click a node and collapse its effect into its upstream nodes, whenever that's possible. For example, a Transform node should be able to update the nodes upstream of it to produce the same result without its continued presence. This should work for all nodes that could support something of the sort. For example, if a Round Corners node (which we don't have yet) is applied downstream of a Rectangle node, it could be collapsed by setting the original Rectangle node's corner rounding parameter to an equivalent value after factoring in any transformations that have altered its scale along the data flow. We may need some kind of system to encode and calculate equivalence relations. (This full system could be a GSoC project.)  For some background reading related to the subject: - https://en.wikipedia.org/wiki/E-graph - https://egraphs-good.github.io/ - https://www.youtube.com/watch?v=ap29SzDAzP0"
2019,Replace self-hosted runner with GH-provided runner,open,https://github.com/GraphiteEditor/Graphite/pull/2019,Keavon,,,0,2024-10-02T19:42:36Z,2025-06-28T13:25:59Z,,,Sí,"Due to the outage, I'm temporarily reverting use to GH-hosed runners until @TrueDoctor has the time to fix this CI outage."
2017,Alt-drag duplication makes snapping freeze the editor for seconds/minutes/forever,open,https://github.com/GraphiteEditor/Graphite/issues/2017,Keavon,Performance,,2,2024-10-01T21:30:11Z,2025-01-19T22:09:01Z,,,No,"Type a bunch of text with the text tool, like a sizable paragraph, across multiple lines. Hold <kbd>Alt</kbd> and drag with the Select tool, in order to duplicate the text layer. (I also tested this while holding <kbd>Shift</kbd> to constrain it to horizontal or vertical movement when duplicate-dragging, I'm not sure if that part is relevant.) This freezes the editor for many seconds or minutes.    ![capture](https://github.com/user-attachments/assets/18e85abd-cde2-49a9-af19-4f63093e124e)    As we can see, this originates in [fn snap_drag](https://github.com/GraphiteEditor/Graphite/blob/master/editor/src/messages/tool/common_functionality/transformation_cage.rs#L221). That function has a loop `for point in candidates` that calls [fn constrained_snap](https://github.com/GraphiteEditor/Graphite/blob/master/editor/src/messages/tool/common_functionality/snapping.rs#L379). The code in here has several more layers of loops."
2010,Canvases with spherical and non-euclidean coordinate spaces,open,https://github.com/GraphiteEditor/Graphite/issues/2010,Keavon,Architecture,,0,2024-09-27T09:42:04Z,2025-03-15T01:29:50Z,,,No,"A spherical canvas could represent a photo sphere, or maps of the Earth or other planet surfaces, or the stars around the earth. Unlike the standard euclidean infinite canvas, this would have finite area but retain infinite zoom depth. Useful nodes could, for example: - Provide base maps for GIS data such as satellite/aerial imagery - Digital elevation maps - OpenStreetMap layers - Import custom survey datasets and lat/long/(elevation?) tracks - Generate star charts from star databases - Plot tracks for satellites, planets, comets, etc. from their ephemera - Visualize KML files  Things you could do: - Make videos with motion graphics incorporating city street/transit layouts or city/country/continent-scale boundaries - Annotating maps or overlaying CAD site plans on a map - Visualize sea level rise or flooding - Process LiDAR or other survey datasets with image processing techniques - Generate celestial body tracks over star charts - Animate a planetarium show (and render its different projector views) - Use tools to paint, draw, and animate over photo spheres and 360° videos - Load accelerometer data to stabilize and reorient the spherical canvas - Render out tiny planet projections - Design skyboxes for games/animations  Besides spherical coordinates, other non-euclidean canvas coordinate systems could be used, such as a finite tiling rectangle or hex cell. Drawing off one edge would result in drawing on the opposite edge. This would be more sophisticated than an infinite tiling node because the actual coordinate space would wrap, not just the content being generated infinitely. Other variants of wrapping could include a ping-ponging coordinate space or a Möbius strip (see [this video](https://youtu.be/v5ev-RAg7Xs?t=297)).  ![Image](https://github.com/user-attachments/assets/a960e839-5c0d-46a5-9f50-ee4a7b305f5d)  See https://en.wikipedia.org/wiki/Template:Orthogonal_coordinate_systems and https://en.wikipedia.org/wiki/Orthogonal_coordinates  This all somewhat relates to #1271 which will involve moving beyond affine transforms."
2003,Design an appearance table for encoding how vector shapes get rendered,open,https://github.com/GraphiteEditor/Graphite/issues/2003,Keavon,Graphene,,0,2024-09-23T07:02:04Z,2025-07-02T09:09:36Z,,,No,"Just as a vector shape has the [Point], [Segment], and [Region] tables for encoding and manipulating the Bezier geometry, a fourth table called [Appearance] will be used to encode how that shape is rendered by the renderer. Each row of this table describes, in order, what rendering procedures to run to draw the appearance of the shape. Each rendering procedure is some function (likely a node, e.g. one for fill and one for stroke) called by the renderer. The final computed shape is given to the function along with all the data cells from the other columns within its row. The shape data describes the final form of what to render, and the extra column cells describe how it should look. Our current representation of a shape with a fill and stroke would become an [Appearance] table with two rows:    | AppearanceId | Procedure | Color | Transform | Fill Rule | Thickness |  |--------|--------|--------|--------|--------|--------|  | 0 | Stroke | `#00ff00` | Identity | - | 5px |  | 1 | Fill | `#ff00ff` | Identity | NonZero | - |     As part of implementing this, the Fill and Stroke nodes should be refactored to add rows to the [Appearance] table.    When a vector shape is transformed by the various nodes in Graphite, the points are updated directly which would then affect how a stroke is rendered. To counteract this, those nodes would also multiply in (the inverse of?) that transform for every row's entry in the Transform column in the [Appearance] table. The fill rendering procedure ignores that column because it's not relevant (and likewise, the thickness column). The stroke rendering procedure ignores the fill rule column. Arbitrarily many columns can be added to suit the needs of various rendering procedures, some unique and some general enough (like color) to be shared by multiple rendering procedures.    Since rendering procedures are just nodes, users can create their own in the future. For example, someone could modify the stroke renderer to create a ""hairy"" effect that draws a scruffy hair or grass kind of look. Or a weather-beaten cracked appearance. Or the whole shape could be drawn like fluffy clouds. Or as a low-poly wireframe. Basically anything should be possible.    The key benefit is that this strategy generalizes the concept of vector strokes and fills, giving customizability in a way that lets the user make modifications to the vector shape data and what will become the final appearance using nodes that modify the table data. Then at the very end, the final form of the shape and the final form of the render parameters can be added. This makes it also very ergonomic to add multiple strokes or multiple fills (useful for gradients or patterns involving transparency, for example). Instead of arbitrary fill and stroke rendering routines, this opens up the possibilities through a better generalized model of what styling a shape is about. Otherwise, shapes would just be invisible mathematical constructs."
1979,Shift+R to repeat the last action,open,https://github.com/GraphiteEditor/Graphite/issues/1979,Keavon,,,0,2024-09-15T22:31:36Z,2025-01-19T22:08:57Z,,,No,"This is a bit longer-term, once we have a more rigorously defined architecture for ""actions"" similar to how Blender does it (where they're searchable, and probably where you can specify the parameters that affect the action using that bottom left menu that appears when the action just occurred). That's related to #741 and #384, which are sort of this issue's prerequisites."
1971,"bezier-rs 0.4.0: `Bezier::euclidean_to_parametric` is imprecise, with a big discontinuity at 0.5",open,https://github.com/GraphiteEditor/Graphite/issues/1971,Calsign,,,4,2024-09-11T02:00:13Z,2025-03-05T18:11:38Z,,,No,"In the current released version of bezier-rs, 0.4.0, the logic for approximating `Bezier::euclidean_to_parametric` is wrong. Specifically [here](https://github.com/GraphiteEditor/Graphite/blob/7951c5b5878965d9c509c0506faf4dcfae0d70a8/libraries/bezier-rs/src/bezier/lookup.rs#L35):  ```rust  // If the curve is near either end, we need even fewer segments to approximate the curve with reasonable accuracy.  // A point that's likely near the center is the worst case where we need to use up to half the predefined number of max subdivisions.  let subdivisions_proportional_to_likely_length = ((euclidean_t - 0.5).abs() * DEFAULT_LENGTH_SUBDIVISIONS as f64).round().max(1.) as usize;  ```  This logic is supposed to use more subidivions the closer we are to 0.5. Instead, it uses only one subdivision at 0.5 and uses the most subdivisions near 0 and 1 where they aren't necessary. The consequence is that the approximation gets increasingly imprecise near 0.5. Additionally, since it picks which direction to estimate from based on which side of 0.5 it's on, there's a big discontinuity at 0.5 as it switches across two bad approximations.    I noticed this when I found some sample beziers that exhibited this sharp discontinuity at 0.5. It only seems to be noticeable for some beziers, I haven't figured out why. This test demonstrates that behavior:    ```rust  #[test]  fn reproducer() {      use assert_approx_eq::assert_approx_eq;        let beziers = vec![          Bezier::from_quadratic_coordinates(              59.481598,              -22.974262,              -199.90213012695313,              37.127464294433594,              0.95370483,              155.28082,          ),          // if the inequality is changed from < to <=, the above passes but this one fails:          Bezier::from_quadratic_coordinates(              287.4947204589844,              314.4862060546875,              283.2593688964844,              111.31137084960938,              168.7027587890625,              297.6860046386719,          ),      ];        const APPROX_ERROR: f64 = 0.01;      const COMPARE_ERROR: f64 = 0.05;        for bezier in beziers {          let actual = bezier.euclidean_to_parametric(0.5, APPROX_ERROR);          let before = bezier.euclidean_to_parametric(0.49, APPROX_ERROR);          let after = bezier.euclidean_to_parametric(0.51, APPROX_ERROR);            // the value at 0.5 should be roughly halfway between the values at 0.49 and 0.51          assert_approx_eq!(actual, (before + after) / 2.0, COMPARE_ERROR);      }  }  ```    Output:  ```  assertion failed: `(left !== right)` (left: `0.1875`, right: `0.4375`, expect diff: `0.05`, real diff: `0.25`)  ```    Fortunately, this logic has changed completely in https://github.com/GraphiteEditor/Graphite/pull/1624, specifically https://github.com/GraphiteEditor/Graphite/commit/218e9675fd2751ac588a8a6995ec045e00539fcb. I am working around this by using the latest master version of bezier-rs.    I didn't see an existing issue for this so I thought it was worth posting in case others encounter the same issue. Also, a new release of bezier-rs with the refactor/fix would be appreciated."
1969,Show selection bounding box width/height in the X/Y rulers,open,https://github.com/GraphiteEditor/Graphite/issues/1969,Keavon,"Good First Issue,Web",,3,2024-09-10T04:24:14Z,2025-01-19T22:08:58Z,,,No,"See the picture below with the lines running within the X and Y rulers, connected by a 5x5 px blue hollow square on either end. In the middle (in this particular example image) is the 5x5 px yellow hollow circle for the current position of the origin point.  ![capture](https://github.com/user-attachments/assets/aaff557d-55a7-4800-993b-12bb5877b842)  There are two modes, and the picture above shows projected mode. To switch between modes, the user can click the icon in the top left where both rulers meet. This will eventually open a ruler options popover menu, but if that's not built yet, the icon can be used to just directly toggle the two modes.  ## Projected mode  The bounding box and the origin point are both projected onto the rulers from the bounding box of the transform cage. The endpoints are draggable to resize the selection, equivalent to resizing the corresponding edge of the bounding box. The line itself is draggable, which slides the selection as if the user was dragging both endpoints simultaneously, thus sliding along the local transform (keeping the selection bounding box endpoints/line unchanged on the opposite axis's ruler), equivalent to dragging the transform cage's center ""compass"" dial (red) X axis arrow or (green) Y axis arrow. Dragging the yellow origin point circle moves along the local axis of the layer, keeping its position on the opposite axis's ruler unchanged.  ## Axis-aligned mode Instead of the transform cage and origin point projecting along the local coordinates of the layer, they instead project the axis-aligned bounding box of the transform cage. If it's tilted, dragging the line endpoints will cause it to skew, as if the user used the <kbd>S</kbd> key to scale it along the canvas space coordinates. If the viewport is tilted (<kbd>Alt</kbd>-middle click drag), the projection of the selection transform cage's AABB no longer reaches the rulers at a perpendicular angle anymore. This situation would relate to #1482. (Viewport tilting also similarly affects projected mode.) The goal would be to ensure that the actual coordinates are correctly represented by the line endpoints and origin point when they reach the ruler, even if the whole view of the canvas is tilted."
1957,Store network metadata information in the node network (prep for Graphene-rendered node graph UI),open,https://github.com/GraphiteEditor/Graphite/pull/1957,adamgerhant,,,2,2024-09-04T07:24:58Z,2025-06-28T13:25:58Z,,,Sí,Stores all network metadata as value inputs to cloned nodes. This will allow the new node graph rendering process to have access to the metadata.    TODO:  Toggle to layer is broken
1935,Show nodes as mini layers in the Layers panel,open,https://github.com/GraphiteEditor/Graphite/issues/1935,Keavon,"Web,Design",adamgerhant,0,2024-08-14T07:24:08Z,2025-01-19T22:08:59Z,,,No,"The layer panel is mainly designed to show layers, but because non-layer nodes can also be included at the bottom of a layer stack, or within the middle of it (causing the stack to ""stair-step"" within the graph), it becomes unclear how the data is sourced and transformed if the layer panel lacks that information. Those nodes should be added to the layer panel, but made skinnier and without thumbnails, in order to show a full picture of what's going on in the graph even without needing to look at the graph.    Compared to the more complex Outliner panel, the Layers panel only allows expansion of layers, not node secondary inputs, and doesn't show the data flow wires or other complexities that the Outliner panel shows in order to provide a near 1:1 mapping to the graph."
1934,Add and implement expand/collapse arrow buttons in the graph to hide upstream branches,open,https://github.com/GraphiteEditor/Graphite/issues/1934,Keavon,Web,adamgerhant,0,2024-08-14T07:19:24Z,2025-01-19T22:08:59Z,,,No,"The icon for a node, when that icon is hovered, shall change to an expand/collapse arrow (![capture](https://github.com/user-attachments/assets/bbf5a310-cad7-4096-a41e-e5efcb74ca58)). Secondary inputs also have that arrow, aligned underneath the location of the node's icon, in the location where the text is—which will slide rightward or be covered over—to accommodate the expand/collapse arrow button.    For nodes, the buttons, which appear when they're hovered over, go here:    ![capture](https://github.com/user-attachments/assets/a8af66e0-bd57-400a-a1cb-5e7f81f7f512)    For layers, the arrow goes on the layer node icon:    ![capture](https://github.com/user-attachments/assets/987f494d-7c29-43e3-82b6-1b408fd00e2d)    When a layer's side input is collapsed, the input thumbnail remains and the layer retracts to encompass only as far as that thumbnail, but all upstream nodes disappear:    ![capture](https://github.com/user-attachments/assets/3751d527-ad97-49dd-900b-819df97e7d35)    When a node's primary input is collapsed, the input thumbnail remains and the layer retracts to encompass only as far as that thumbnail, but the remaining nodes disappear:    ![capture](https://github.com/user-attachments/assets/9a37b1d0-032c-410d-bc37-ab90752723f9)    When a layer's secondary input is collapsed, the horizontal part of the wire is kept but fades out rather than curving downwards to the nodes/layers that it previously led to:    ![capture](https://github.com/user-attachments/assets/8618426b-5899-43ad-a33f-36b4c229a390)    The collapsed icon remains visible when it's collapsed (not only while hovered).    Via the context menu when right-clicking a node, we also will have two other ways to collapse nodes:  - Collapse all secondary inputs and fold them up within the single-row node  - Collapse the text name for the node, reducing its width"
1929,Generalize all possible nodes to work on group data,open,https://github.com/GraphiteEditor/Graphite/issues/1929,Keavon,Paper Cut,,0,2024-08-14T02:05:57Z,2025-06-07T09:33:03Z,,,No,"Most nodes are rather limited in their type signature compatibility. Most nodes only work on VectorData, but should be extended to work on GraphicGroup data as well. #1822 covers the Path node case.  A good first step is evaluating what nodes are missing support and which make sense to support this, and find a plan to cleanly integrate this change across all those which need it."
1922,Reimplement the node graph UI in the backend,open,https://github.com/GraphiteEditor/Graphite/issues/1922,Keavon,"Web,Performance",adamgerhant,1,2024-08-10T10:05:30Z,2025-01-19T22:09:00Z,,,No,"HTML/CSS isn't well suited for our node graph implementation. We need to reimplement all functionality of the UI by building it out of rounded rectangles, icons, strokes, etc. in the backend. Vello will then be able to render this much more efficiently than the HTML/CSS implementation, while also being able to apply certain effects like the frosted glass background that aren't possible in the current web-based UI due to CSS limitations. In addition to helping fix performance and improve styling, this will help remove a bunch of plumbing code and reuse a lot of code that already goes into rendering the artwork within the viewport, which will now simply have a node graph drawn similarly above it. Once this is done, we can begin putting more effort again into the node graph UI for extra features that aren't worthwhile in the soon-to-be-replaced web UI for the graph, which was always a hacky mess to begin with.    There are two possible approaches:  - Directly emitting a Vello scene    - Pro: probably faster    - Pro: possibly more controllable    - Con: requires WebGPU which is an issue until the end of 2024    - Unknown: might be easier *or* harder to implement frosted background blurring  - Emitting the GraphicGroup data describing how the node graph can be rendered (but without the node graph, just the graphical data)    - Pro: backwards-compatible for SVG-based rendering without Vello    - Con: may require additional maintenance burden as we update the graphical data format    - Unknown: might be easier **or* harder to implement frosted background blurring"
1919,Allow constructing IVec2 in graph,open,https://github.com/GraphiteEditor/Graphite/issues/1919,0HyperCube,"Good First Issue,Graphene",,9,2024-08-09T21:13:24Z,2025-07-01T22:09:52Z,,,No,The artboard node takes an IVec2 as the dimensions and position. Currently it is impossible to construct this in the graph.    A node taking in two f64s and constructing an IVec2 should be added.
1895,Out of memory (editor crash) when loading large images,open,https://github.com/GraphiteEditor/Graphite/issues/1895,TrueDoctor,"Architecture,Web",,4,2024-08-05T08:05:13Z,2025-04-11T22:42:25Z,,,No,"When Trying to open a large image in the editor, it crashes after some while. This is likely caused by our animation loop not playing nice with such a long-running task on the main thread"
1877,Upgrade to Svelte 5 and remove slow manual component event delegation,open,https://github.com/GraphiteEditor/Graphite/issues/1877,Keavon,"Web,Performance",Keavon,1,2024-07-30T02:38:16Z,2025-01-19T22:14:23Z,,,No,"`LayoutRow.svelte` and `LayoutCol.svelte` each have to manually [delegate events](https://github.com/sveltejs/svelte/issues/2837) and we take the ugly approach of just naming every event for delegation. But as @adamgerhant and I just discovered when debugging a performance issue with creating and destroying a bunch of layers in the Layers panel, it turns out Svelte is creating and destroying an event handler for each and every one of those delegated events, even when nearly all are unused. Removing these quadruples the performance for creating/removing all those layers.    Svelte 5 [allows components to delegate events](https://svelte-5-preview.vercel.app/docs/old-vs-new#forwarding-events). We should aim to upgrade to Svelte 5 and update how those components are doing their event delegation. (Side note: can we also delegate other attributes like `class` and `style` to avoid the hacky way we have many components do that presently?) This should provide a significant frontend performance improvement for all components that utilize LayoutRow and LayoutCol."
1855,Drag to rearrange document tabs,open,https://github.com/GraphiteEditor/Graphite/issues/1855,TrueDoctor,"Web,Paper Cut",Keavon,1,2024-07-24T09:57:06Z,2025-01-19T22:09:05Z,,,No,![image](https://github.com/user-attachments/assets/ba62fdc2-9c11-4951-bf69-e044e45c4a5d)  It should be possible to rearrange open documents by dragging their tab in the bar
1854,Allow renaming documents by clicking on the document tab,open,https://github.com/GraphiteEditor/Graphite/issues/1854,TrueDoctor,"Web,Paper Cut",Keavon,0,2024-07-24T09:52:04Z,2025-01-19T21:48:18Z,,,No,This task will be done by @Keavon and it isn't open to community contributions because of some subtle trickiness involved.    ![image](https://github.com/user-attachments/assets/7cd1fd52-8373-4a49-a91f-52082473f515)    It should be possible to rename a document by double-clicking the tab and renaming it in place
1845,Tracking Issue: Vello integration,open,https://github.com/GraphiteEditor/Graphite/issues/1845,TrueDoctor,,TrueDoctor,0,2024-07-23T07:50:55Z,2025-03-02T11:11:32Z,,,No,
1836,Move PathStyle from VectorData to an attribute of the Region domain,open,https://github.com/GraphiteEditor/Graphite/issues/1836,Keavon,,,0,2024-07-15T08:33:53Z,2025-01-19T22:09:02Z,,,No,"`VectorData` has the `pub style: PathStyle` field which should be moved to an attribute of the Region domain. This will require updating the renderer so split the shape out into multiple SVG paths each with separate styles matching each region's style, as long as they differ within the same `VectorData`."
1834,Tracking Issue: Instances tables,open,https://github.com/GraphiteEditor/Graphite/issues/1834,Keavon,Architecture,Keavon,0,2024-07-15T08:23:38Z,2025-06-22T00:01:20Z,,,No,"- [x] 1. Write the `Instances<T>` struct. Wrap `VectorData` to become `Instances<VectorData>`, `ImageFrame` to become `Instances<ImageFrame>`, `GraphicGroup` to become `Instances<GraphicGroup>`, which lets us leave `transform`/`alpha_blending` alone for now. Places that read the single piece of data now read from a ""getter"" function that calls `.next().expect(""..."")` and write to a ""setter"" function that loops through each row (but there's just 1 presently).   (#2230) - [x] 2. Move the `transform`/`alpha_blending` up a level, which removes those fields from `VectorData`, `ImageFrame`, and `GraphicGroup`.   (#2249) - [x] 3. Since the `ImageFrame<P>` struct now has only one field left (`pub image: Image<P>`), delete this redundant struct and replace its usage in `Instances<ImageFrame<P>>` with `Instances<Image<P>>`.   (#2256) - [x] 4. Wrap `ArtboardGroup` to become `Instances<ArtboardGroup>`. Since the `ArtboardGroup` struct now has only one field (`artboards: Vec<(Artboard, Option<NodeId>)>`), delete this redundant struct and replace its usage with `Instances<Artboard>`. Move the `Option<NodeId>` to be an attribute called `source_node_id` in `Instances<T>`. (#2265) - [x] 5. Since the `GraphicGroup` struct now has only one field left (`elements: Vec<(GraphicElement, Option<NodeId>)>`), delete this redundant struct and replace its usage in `Instances<GraphicGroup>` with `Instances<GraphicElement>`. Move the `Option<NodeId>` to the `source_node_id` attribute in `Instances<T>`. At this point, we have multi-row tables for group data but single-row image and vector data tables.   (#2363) - [x] 6. Remove all usages of `.one_instance_ref()` and `.one_instance_mut()` by replacing their usages with loops or fold/reduce as needed in the nodes that currently expect one value but now need to work on multiple rows of values. Once this is done, nodes won't panic when we have a zero-row table. So we can replace usages of the form `VectorDataTable::new(VectorData::empty())` with an actual empty table. Now, we have nodes that can accept table data of any row counts, and will often map N rows to N rows, but we don't have any nodes that actually produce more than 1 row as output yet unless given more than 1 row. But the repeat style nodes all currently output groups, not multi-rows of vector or raster, which we change in the next step. (db34ac3f53b5e9905a71b48fa464e8ca8f52293d, 2cee9e24cd43b2fadefbcfccf03f91417a665dd2, #2672, #2684, #2689) - [x] 7. Change `RasterFrame` (an enum of `ImageFrameTable<Color> = Instances<Image<Color>>` and `TextureFrameTable = Instances<ImageTexture>` variants) to `RasterTable = Instances<Raster>`, where `Raster` is an enum of `Image<Color>` and `ImageTexture` variants. (~~#2693~~, 5cacab2e390d658e022f7c07305be18787c3db53, 6111440afd932bbd4640eda6fe45eec5d759340f) - [x] 8. Change the *Repeat*/*Circular Repeat*/*Copy to Points* node to no longer create a level of grouping, so they map from `Instances<T>` to `Instances<T>`, not from `Instances<T>` to `Instances<GraphicElement>`, now that we have (in the previous step) ensured all other nodes are able to work correctly with multiple instances instead of assuming a single instance. Investigate also doing this for the Merge node, making it generic over its input types, so we can have homogenous layer stacks to keep the data entropy down. (#2697, #2699) - [ ] 9. Clean up all terminology and naming.  ---  ### Initial  ```rs type GraphicElement = VectorData | GraphicGroup;  struct VectorData {     transform: DAffine2, }  struct GraphicGroup {     transform: DAffine2,     elements: Vec<GraphicElement>, } ```  ---  ### Wrapped in table  ```rs type GraphicElement = VectorDataTable | GraphicGroupTable;  struct VectorData {     // transform has been moved to the table } type VectorDataTable = struct Instances<VectorData> {     transform: Vec<DAffine2>, // count = 1     instance: Vec<VectorData>, // count = 1 }  struct GraphicGroup {     // transform has been moved to the table, but not up to the parent group     elements: Vec<GraphicElement>, } type GraphicGroupTable = struct Instances<GraphicGroup> {     transform: Vec<DAffine2>, // count = 1, parent to all in self.instance[0].elements     instance: Vec<GraphicGroup>, // count = 1 } ```  ---  ### (Inlined GraphicGroup)  ```rs type GraphicElement = VectorDataTable | GraphicGroupTable;  struct VectorData {     // transform has been moved to the table } type VectorDataTable = struct Instances<VectorData> {     transform: Vec<DAffine2>, // count = 1     instance: Vec<VectorData>, // count = 1 }  type GraphicGroupTable = struct Instances<Vec<GraphicElement>> {     transform: Vec<DAffine2>, // count = 1, parent to all in self.instance[0]     instance: Vec<Vec<GraphicElement>>, // count = 1 } ``` ```rs // Document root // ├─ Top folder // │  ├─ Inner vector 1 // │  └─ Inner vector 2 // └─ Top vector  // Document root GraphicGroupTable {     transform: vec![ // count = 1         DAffine2::IDENTITY,     ],     instance: vec![ // count = 1         vec![             // Top folder             GraphicGroupTable {                 transform: vec![ // count = 1                     DAffine2::TOP_FOLDER,                 ],                 instance: vec![ // count = 1                     vec![                         // Inner vector 1                         VectorDataTable {                             transform: vec![ // count = 1                                 DAffine2::INNER_VECTOR_1,                             ],                             instance: vec![ // count = 1                                 VectorData {},                             ],                         },                         // Inner vector 2                         VectorDataTable {                             transform: vec![ // count = 1                                 DAffine2::INNER_VECTOR_2,                             ],                             instance: vec![ // count = 1                                 VectorData {},                             ],                         },                     ],                 ],             },             // Top vector             VectorDataTable {                 transform: vec![ // count = 1                     DAffine2::TOP_VECTOR,                 ],                 instance: vec![ // count = 1                     VectorData {},                 ],             },         ],     ], } ```  ---  ### Flattened GraphicGroup with transform moved to parent  ```rs type GraphicElement = VectorDataTable | GraphicGroupTable;  struct VectorData {     // transform has been moved to the table } type VectorDataTable = struct Instances<VectorData> {     transform: Vec<DAffine2>, // count = 1     instance: Vec<VectorData>, // count = 1 }  type GraphicGroupTable = struct Instances<GraphicElement> {     transform: Vec<DAffine2>, // parent to its corresponding element in self.instance     instance: Vec<GraphicElement>, } ``` ```rs // Document root // ├─ Top folder // │  ├─ Inner vector 1 // │  └─ Inner vector 2 // └─ Top vector  // Document root GraphicGroupTable {     transform: vec![         DAffine2::TOP_FOLDER,         DAffine2::TOP_VECTOR,     ],     instance: vec![         // Top folder         GraphicGroupTable {             transform: vec![                 DAffine2::IDENTITY, // from the Merge layer node                 DAffine2::IDENTITY, // from the Merge layer node             ],             instance: vec![                 // Inner vector 1                 VectorDataTable {                     transform: vec![ // count = 1                         DAffine2::INNER_VECTOR_1,                     ],                     instance: vec![ // count = 1                         VectorData {},                     ],                 },                 // Inner vector 2                 VectorDataTable {                     transform: vec![ // count = 1                         DAffine2::INNER_VECTOR_2,                     ],                     instance: vec![ // count = 1                         VectorData {},                     ],                 },             ],         },         // Top vector         VectorDataTable {             transform: vec![ // count = 1                 DAffine2::IDENTITY,             ],             instance: vec![ // count = 1                 VectorData {},             ],         },     ], } ```"
1833,Make a shape's Segment table use handles from the Point table,open,https://github.com/GraphiteEditor/Graphite/issues/1833,Keavon,,,0,2024-07-15T08:13:26Z,2025-01-19T22:09:04Z,,,No,"Replace `SegmentDomain::handles` with a `Curvature` enum which describes the Bezier handle(s) or other curvature info like None for a polyline, Cubic, Quadratic, or even Arc or Conic or Euler Spiral or NURBS or other forms of curve representations.    This is the first step in making all data be attribute-driven in #1832."
1832,Tracking Issue: Tables and attributes for graphical data,open,https://github.com/GraphiteEditor/Graphite/issues/1832,Keavon,"Architecture,Graphene",,0,2024-07-15T07:55:32Z,2025-06-22T01:20:51Z,,,No,"This involves moving towards a unified conceptual model for procedural graphical data based around tables (a data type represented by a spreadsheet) and attributes (the columns of a table).   ## New instances-based concept design notes (as we designed during the Maker Faire)  > Here are the notes Adam took while he, True Doctor, and Keavon discussed the design while driving to the Maker Faire: >  > All data is > ```rs > struct Instances<T> { >     // Datastore: HashSet<Reference, T> (this is an older idea, before choosing to use Rc<Mutex<T>>) >     instances: Vec<(String, Vec<TaggedValue)>> >     // First column is Rc<Mutex<T>> second column is transform, footprint, click targets, vector modify, >     // overlays, other columns that the user adds. This forms the spreadsheet. > ``` >  > Vector data transforms stored in `Vec<(NodeId, Transform)>`, each monitor node adds an entry, the transform node multiples the rightmost. >  > No appearance data, color/thickness/properties used by renderer are stored in table. >  > Rectangle node creates `Instances<VectorData>`, which can be added to a group of `Instances<GraphicElementInstances>` when it enters a layer stack >  > ```rs > enum GraphicElement { >     Vector(Instances<VectorData>), >     ImageFrame(Instances<ImageFrame>) >     // Etc. > } > ```  ## Old pre-instances concept design notes (prior to the Maker Faire)  **Design for the new table-based graphical data structure**  Using this syntax: | Definition | Description| |:-|:-| | `Struct = { Field1, Field2, ... }` | Rust struct | | `[Table] = [Attribute1[], Attribute2[], ...]` | Either a HashMap, or Rust struct,<br />of parallel `Vec`s shown as a spreadsheet | | `Union = Type1 \| Type2 \| ...` | Rust enum of 1-tuple type<br />variants each named after its type |   Elements, which all implement `trait Graphical` (renamed from the currently named `GraphicElementRendered`): - `[Element] = [ElementId[], (dyn Graphical)[], Transform[], AlphaBlending[]]` - `VectorData = { [Point], [Segment], [Region], ColinearManipulators, FillRule, SvgFilter, FutureMeshVectorInfo }` - `Raster = // to be designed` - `SDF = // to be designed` - `Color = // to be designed` - `Gradient = // to be designed`  `VectorData` tables:  - `[Point] = [PointId[], Position[]]` - `[Segment] = [SegmentId[], Start[], End[], Curvature[]]` - `[Region] = [RegionId[], SegmentRange[], PathStyle[]]`  *(`[Element]` is formerly `GraphicGroup`; `FutureMeshVectorInfo` is additional data for the format we'll design in the future for vector meshes; we need to guarantee no collisions with each table's ID which acts as the database key)*  And these are some additional details about the vector, raster, and SDF data in both their raw and resolution-aware forms:  ``` Greater purity/usefulness │ │   ┌───┬────────── Node signature: () -> VectorData         (SVG or Pen tool shape or Rectangle node output) │   │   ├────────── Node signature: Footprint -> VectorData  (Tile generator or infinite repeat node) │   └─> │   ┌────── Node signature: () -> SDF                (SDF generator node output, to be implemented) │       ├─> ├────── Node signature: Footprint -> SDF         (Cullable procedural SDF generator node output, to be implemented) │       │   │   ┌── Node signature: () -> Raster             (ImageFrame, a bitmap with a location, exists today) │       └─> └─> └─> Node signature: Footprint -> Raster      (Resolution aware raster, to be implemented) V Lesser purity/usefulness ```  - `() -> Data` means ""I will give you all the `Data`, which obviously must be finite"". - `Footprint -> Data` means ""I will generate a view into the `Data` for some rectangle in space, because it might not even be finite""."
1826,Path tool on group,open,https://github.com/GraphiteEditor/Graphite/issues/1826,0HyperCube,Good First Issue,,2,2024-07-13T11:42:21Z,2025-01-19T22:09:03Z,,,No,"When in the path tool with a group selected, it should allow editing child vector data."
1822,Path nodes should be able to edit multiple table rows of vector data,open,https://github.com/GraphiteEditor/Graphite/issues/1822,0HyperCube,"Paper Cut,Graphene",,0,2024-07-13T11:29:28Z,2025-06-26T07:14:38Z,,,No,"The *Path* (vector modify) node must store modifications for each shape's element ID now that we support multiple rows of vector data thanks to the work in #1834.  For now, we can do this based on index:  > you'd need a `HashMap<RowId, VectorDataModification>` which would require refactoring all of the tools  (we don't have `RowId` yet, so we can use `usize` for its row index instead: `HashMap<usize, VectorDataModification>`)  In the future, we can attempt a smarter way of generating unique IDs: #1821.  Related: #1929."
1821,Stable vector data IDs in the graph,open,https://github.com/GraphiteEditor/Graphite/issues/1821,0HyperCube,"Architecture,Graphene",,1,2024-07-13T11:29:18Z,2025-01-19T21:39:27Z,,,No,"In order to apply the vector modify node on a graphic group, it is necessary to be able to identify which graphic element within the graphic group.    We could do this by index (e.g. modification to graphic element 3 within the graphic group). However @Keavon wants to allow re-arranging the graphic elements without impacting the result.    In order to do this, each graphic element will get an id assigned when creating it. Nodes will be able to get their own id by having the input `TaggedValue::MyNodeId` (which would be populated during graph pre-processing). In order to avoid cutting and pasting changing the node id (as it does currently) some more logic to check if no such id exists will be added.    Each graphic group must contain unique ids. It is the job of the constructing node to enforce this (e.g. incrementing one of the ids to avoid collision)."
1819,Node list shelf on the left side of the graph,open,https://github.com/GraphiteEditor/Graphite/issues/1819,0HyperCube,"Web,Design",,0,2024-07-13T11:29:05Z,2025-01-19T22:09:09Z,,,No,In the node graph on the left (where the tools usually are) there should be icons for all the node categories that can be used to insert the nodes.    Blocked on Keavon's design.
1762,A network's import cannot be connected directly to its export,open,https://github.com/GraphiteEditor/Graphite/issues/1762,adamgerhant,"Architecture,Graphene",,2,2024-05-27T17:14:51Z,2025-04-11T22:15:34Z,,,No,"Currently it is only possible to connect NodeInput::Value (disconnected export), or NodeInput::Node (link to node) to an export (UI only export node). It is not possible to connect an import directly to the export, which would result in a NodeInput::Network. To fix this, the flattening processing in `flatten_with_fns` will have to be adjusted to include exports when setting a NodeInput::Network to whatever that parent nodes input is.     I started some code, which outlines the general idea, but I could not get it to compile. I think this is an interesting problem to solve, which requires understanding the flattening process during compilation, and how to adapt the various methods to work with the network exports vec, rather than the node inputs vec.    Some relevant starting points are uncommenting the (None, None) case in `NodeGraphMessage::ConnectNodesByLink`, removing the reconnect restriction in `remove_references_from_network`, and understanding `flatten_with_fns`.     There are also some pictures and helpful discussion here:   https://discord.com/channels/731730685944922173/1238015208534966313/1239327786104262730  ![image](https://github.com/GraphiteEditor/Graphite/assets/116332429/a60b2e8c-e7b6-41c3-952a-a0f1d86df0b3)    https://discord.com/channels/731730685944922173/1238015208534966313/1240797177467506688  ![image](https://github.com/GraphiteEditor/Graphite/assets/116332429/7b9bf657-04b6-4c4d-b7a1-71ee448b6ef5)    "
1742,Stable document format MVP,open,https://github.com/GraphiteEditor/Graphite/issues/1742,Keavon,Architecture,,0,2024-05-07T22:22:56Z,2025-01-19T22:09:10Z,,,No,"Stable document format:  - Infrastructure for migrating old to new formats  - Separate structure for storing the document, decoupled from the `struct DocumentMessageHandler` and `struct NodeNetwork` definitions  	- One struct per version, plus an associated upgrade function that goes to the next version  	- ASCII graph structure markup format (use RON syntax, we need to define the semantics), see #1605  	- Translation back from the ASCII format to those structs  - A way to look up a built-in node's definition by its name and not have to store its sub-network  - A way to store user-created subgraph network (or modified from a built-in node definition)"
1720,Alignment button options (align to artboard),open,https://github.com/GraphiteEditor/Graphite/issues/1720,Keavon,Good First Issue,,3,2024-04-01T02:49:29Z,2025-01-19T22:09:11Z,,,No,"This popover menu is currently ""coming soon"".    ![image](https://github.com/GraphiteEditor/Graphite/assets/4388688/72bf94fe-378a-4901-aee3-aee5278c29f0)    We'd like to have a checkbox (off by default) called ""To Artboard"" which makes the alignment of all selected layers work in relation to the artboard rather than their collective bounding box.    There has also been [a request](https://discord.com/channels/731730685944922173/1134981447539761273/1216556761910345868) for letting the user choose a specific layer's bounding box to align all other layers to (meaning that chosen layer doesn't move, but the others do).    Potentially one more feature that would be handy is a way to choose between ""deep"" and ""shallow"" treatment of nested layers, where only the selected folders get aligned vs. each of their contents get aligned."
1694,AI models for graphics editing,open,https://github.com/GraphiteEditor/Graphite/issues/1694,Keavon,Help Wanted,,6,2024-03-20T08:17:01Z,2025-01-21T21:30:49Z,,,No,"Below is a list of AI model disciplines that will be useful tools in the graphics editing process. Feel free to comment with ideas for more items missing from this list.  - Image generation (to turn inputs like text, images, masks, or other control data into a desired image)     - Infill (to generate the content in missing areas based on a mask, or uncrop an image)     - Style transfer (to adapt the subject of one image to the art style of another image) - Upscaling - Segmentation (to automatically mask a subject or break a scene apart into multiple subjects) - Depth estimation (to generate a depth map that can be used for many procedural effects) - Decomposing into render channels like albedo, normal, depth, irradiance, roughness, metalness ([RGB↔X](https://zheng95z.github.io/publications/rgbx24?lid=7ibrcrhosh7a)) - Relighting (to change the direction and color cast of the lighting on a scene or subject) - Novel view synthesis (to alter the perspective angle or FoV of a subject) - Altering a scene's focus or deconvolving blur - Un-smearing a motion-blurred image - Noise removal (sensor noise, JPEG artifacts) - SDR to HDR conversion by inferring the extra data that was outside the camera's dynamic range   - Recovering clipped pixels in overexposed scenes - Color gamut extension by inferring true WCG colors of a scene beyond the range of the imaging device sensor"
1689,Path tools should filter out snapping to the procedurally generated contents of its own layer,open,https://github.com/GraphiteEditor/Graphite/issues/1689,Keavon,Paper Cut,,1,2024-03-15T00:08:00Z,2025-01-22T06:41:54Z,,,No,"For example, a *Sample Points* node which generates circles on the inside of a shape. If you use the Path tool to modify that shape, it wants to snap to is own circles. We only want the Path tool snapping dragged points to other points in the same vector path, not the generated shapes that are derived from it."
1673,Convex Hull node,open,https://github.com/GraphiteEditor/Graphite/issues/1673,Kakapio,Good First Issue,,6,2024-03-11T17:58:51Z,2025-01-19T22:09:14Z,,,No,"This node should convert vector shapes into convex hulls of their shapes, preserving their convex curves and bridging their concave parts with straight lines.    ~~@Keavon Just wanted a run-down of how you want this to work. I'll be implementing a standard algorithm but wanted to ask if you had any specific functionality in mind.~~    ~~Edit:  Information for whoever wants to tackle this task:~~    ~~While there is plenty of literature about building the convex hull from polygons (polylines), there is much less on the internet about algorithms for doing that from bezier curves. You'll have to do some additional research to solve this, either through Googling for online resources or reading academic papers or thinking through a solution to the problem yourself as an extension of one of the polyline algorithms. The same algorithm needs to work for both shapes such as a hexagon and a circle.~~"
1669,Drop shadow effect,open,https://github.com/GraphiteEditor/Graphite/issues/1669,kojq,Graphene,,0,2024-03-10T21:03:01Z,2025-01-19T22:09:15Z,,,No,"Objects can have shadows positioned in various ways, and perhaps there can be a way to use a light source."
1621,Make the Graphene type system more powerful with bidirectional (or HM?) type inference,open,https://github.com/GraphiteEditor/Graphite/issues/1621,Keavon,Graphene,TrueDoctor,0,2024-02-21T02:01:16Z,2025-07-01T00:46:24Z,,,No,"Implement https://en.wikipedia.org/wiki/Hindley–Milner_type_system in Graphene. Or that might be unnecessarily complex and powerful for our needs, where we just likely need bidirectional type inference, something akin to Rust's own ability to detect what a variable's declared type is based on usages. Essentially this means we'd have up-and-down type inference, like what's common in languages such as TS or Rust. This can help let us know which typed implementation of a node is the appropriate one to reference when a node input is disconnected (but it's not part of the rendered graph) and that input has to be set to some type's default value.  ---  - Type inference at declaration site when usage site is further up or down in the node flow (needed to allow the Number value node to have a built-in Into node)     - Support for traits"
1610,Node versioning and package management system,open,https://github.com/GraphiteEditor/Graphite/issues/1610,Keavon,"Architecture,Graphene",,2,2024-02-15T08:20:35Z,2025-03-02T11:39:58Z,,,No,"Create an overrides/versioning system that lets users override document nodes (subgraphs), either overriding part of the subgraph or creating a copy of the full document node; then make a way of tracking versions and upgrading old documents to new versions"
1609,"Store references, not implementations, for document nodes",open,https://github.com/GraphiteEditor/Graphite/issues/1609,Keavon,Graphene,,0,2024-02-15T08:18:54Z,2025-01-19T22:09:16Z,,,No,Make `DocumentNode` instances link to their `DocumentNodeDefinition`s instead of storing many redundant copies of the definition
1608,"Independent, async execution for long-running nodes",open,https://github.com/GraphiteEditor/Graphite/issues/1608,Keavon,Graphene,TrueDoctor,4,2024-02-15T08:14:02Z,2025-03-28T23:04:06Z,,,No,"Support for long-running async nodes that execute sequentially, show progress, allow aborting/retrying, and permit graph modification while running    Also:  - Sandbox the graph executor in a web worker so it can recover from panics  - Sandbox individual nodes that panic so they can be disabled and let the remainder still execute"
1607,Spatial (resolution-aware) caching,open,https://github.com/GraphiteEditor/Graphite/issues/1607,Keavon,"Performance,Graphene",,9,2024-02-15T08:11:08Z,2025-03-30T01:11:08Z,,,No,"Spatial, and likely temporal, caching needs to with based on storing cached data at different zoom levels, areas in space (forming a patchwork quilt of cache hit areas within surroundings of cache miss areas), and different times in the animation timeline. All this will be needed to make Cache nodes relation-aware to work with footprint data."
1606,Incremental graph compilation,open,https://github.com/GraphiteEditor/Graphite/issues/1606,Keavon,"Performance,Graphene",TrueDoctor,0,2024-02-15T08:09:47Z,2025-01-19T22:09:17Z,,,No,
1605,Create a user-facing ASCII format for nodes and subgraphs,open,https://github.com/GraphiteEditor/Graphite/issues/1605,Keavon,Graphene,,2,2024-02-15T07:53:34Z,2025-04-06T09:35:36Z,,,No,"Currently the `CopyBufferEntry` is serialised using JSON when a user copies a layer: ```json { 	""nodes"": { 		""2"": { 			""alias"": ""custom alias"", 			""name"": ""Transform"", 			""inputs"": [ 				{ 					""Node"": { 						""node_id"": 3, 						""output_index"": 0, 						""lambda"": false 					} 				}, 				{ 					""Value"": { 						""tagged_value"": { 							""DVec2"": [ 								5.049571603427239, 								118.83782129742963 							] 						}, 						""exposed"": false 					} 				}, ```  However this should be changed to be in a format that looks something like:  ```toml [node parent(4) / transform(2)] alias = ""custom alias"" position = [1, 3] vector_data = { node_id = 3, output_index  = 0 } translation = { value = [5.04, 118.8], exposed = false } ```  whereby each input is stored in snake case if it is overwritten.  Or possibly a format using the [ron](https://github.com/ron-rs/ron) grammar. This is the current line of thinking for the design."
1604,Asset database,open,https://github.com/GraphiteEditor/Graphite/issues/1604,Keavon,Graphene,,0,2024-02-15T07:45:40Z,2025-03-16T06:48:56Z,,,No,"*Make Image nodes store their bitmap data in an asset database stored on the document*  Right now, if you drag an image into the document, the Image node itself stores the data (as part of a value input which we hide, but would otherwise appear in the Properties panel just like any other parameter like a number or a color). We want to instead have each document store its blob data (such as images) in an asset database, and then it would be accessed by URL as `graphite://d0ce5747-6916-42a0-88d9-a623ac5d927f` for example."
1553,Hide any nodes that are erroring so the remaining graph still renders,open,https://github.com/GraphiteEditor/Graphite/issues/1553,Keavon,"Paper Cut,Graphene",,0,2024-01-07T01:38:57Z,2025-01-19T22:09:19Z,,,No,"This way if the user breaks a node in the graph, it doesn't stop the viewport content from rendering (which is confusing, since they see whatever happened before and it looks like their node had no effect, but then the viewport becomes unresponsive since you can't even pan anymore). And when opening a broken document, you'll confusingly see no artwork at all.    So basically if a node is displaying an error message, we just disable it. Then if the next downstream node is broken, we hide that one too. And so on, until it eventually reaches the layer at which point disabling/hiding that layer should end the chain reaction."
1545,Tracking Issue: Tablet/stylus support,open,https://github.com/GraphiteEditor/Graphite/issues/1545,0HyperCube,Help Wanted,,1,2024-01-04T19:42:42Z,2025-06-29T20:16:07Z,,,No,
1544,Customizing shortcuts,open,https://github.com/GraphiteEditor/Graphite/issues/1544,0HyperCube,"Architecture,Web",,0,2024-01-04T16:38:25Z,2025-01-19T22:09:21Z,,,No,"It would be useful for the user to customise shortcuts, which could probably be saved in the local storage of the browser.    This could probably be added to the `file -> preferences` menu. All of the shortcuts are currently hardcoded in `default_mapping.rs` - however it may be necessary to filter these keybinds before displaying them (e.g. it doesn't make sense for the user to need to customise each key press for nudge, and pointer move events should not change)."
1529,Dragging layers sharing a transform node applies multiple translations,open,https://github.com/GraphiteEditor/Graphite/issues/1529,0HyperCube,Good First Issue,,3,2023-12-20T16:41:15Z,2025-01-30T22:32:48Z,,,No,"Still a problem as of Jan 30, 2025. This happens with dragging but not <kbd>G</kbd> of the G/R/S feature, which is a good hint about how to begin solving it in the same manner.  ---  Create a document containing two rectangles. Enter the node graph and add a layer node, using the data from the stroke node of one of the rectangles. Select all of the rectangles and drag them using the select tool. Observe how the translation is applied several times. When you drag around several layers we apply a transformation to the first transform node found for each layer; however because there are several layers sharing the same transform node, the translation is applied several times.  This also applies when dragging the top/left corners of an artboard with the Artboard tool (as was implemented in #2150).  Solutions: - In select_tool.rs, instead of applying a delta to the current transform, store the transform at the start of the drag and compute the new transform based on that (similar to how dragging the selection bounds works) - In graph_operation_message_handler.rs, check for cases where the node is used by several other nodes, and if that is the case then create a new transform node for each layer separately before applying the operation.  https://github.com/GraphiteEditor/Graphite/assets/78500760/8011ef59-a055-4e29-87a8-9df5d73351e6  "
1511,Reimplement the Imaginate node and tool,open,https://github.com/GraphiteEditor/Graphite/issues/1511,Keavon,Graphene,,0,2023-12-13T04:23:15Z,2025-05-18T04:30:27Z,,,No,"Following the migration to the unified node graph, the previous Imaginate functionality has changed. We no longer rasterize the area below the Imaginate frame now that compositing is part of the single document graph.    The Imaginate tool should be rebuilt to work based on the new graph-based layer compositing system with a draggable rasterization frame."
1507,Tracking Issue: Smarter placement of layers into the artboards that bound them,open,https://github.com/GraphiteEditor/Graphite/issues/1507,Keavon,"Good First Issue,Paper Cut,Graphene",james-ryans,8,2023-12-11T21:53:55Z,2025-01-25T19:53:00Z,,,No,"Currently, new layers are drawn, they are placed into the last selected artboard.  To improve upon this, we want:  - [x] Placing layers in correct artboard based on its location within the bounds of any artboard (#2110) - [ ] Transferring layers between artboards when dragged from one to the other upon release - [ ] When pasting from the clipboard, if no existing layers are selected, the content should go in the most recently selected (or drawn in/interacted with) artboard   - [ ] When no layers are selected, clicking the New Folder button (in the Layers panel, next to the trash button) should place it in the most recently selected artboard"
1490,Avoid using magic number indexes in the node system,open,https://github.com/GraphiteEditor/Graphite/issues/1490,Keavon,Graphene,,2,2023-12-07T13:51:24Z,2025-01-19T22:09:04Z,,,No,"There are tons of fragile index values like `0`, `1`, `2`, etc. used to reference inputs and outputs (amongst other things?) between nodes and node internals. This is extremely fragile, makes it hard to refactor, provides a difficult developer experience, lacks self-documenting clarity, and is hard to debug.    One potential solution could be using enums. But thinking through some alternative ways to achieve this could also be good."
1482,Stretch and tilt ruler increments when canvas is tilted,open,https://github.com/GraphiteEditor/Graphite/issues/1482,Keavon,"Good First Issue,Web",,3,2023-11-28T10:26:13Z,2025-01-19T22:09:23Z,,,No,"If the user tilts the canvas in the viewport, the scale of the increments becomes inaccurate. We want to essentially tilt the measuring system with the canvas. So for example, if the canvas is viewed with a 45° tilt, the increments become √2 = 1.414... wider.    Additionally, the horizontal and vertical ticks (for the vertical and horizontal rulers, respectively) should themselves become tilted to help visualize the fact that they are measuring tilted lines that, if conceptually extended into the document, would remain axis-aligned with document space. It's important that they actually align, so for example the increment ticks at `0` for both rulers would pass through the document origin (if the ticks were extended beyond the rulers). The tick marks would be allowed to tilt up to 45°, at which point the axes would switch and the tilt would become less angled until 90° is reached whereupon the ticks are not tilted but the X and Y rulers mark the dimensions of the Y and X axes, respectively. This behavior of course continues with additional canvas tilt until a full rotation at 360° brings things back to how they started.    Care should be taken to ensure the ticks and numbers generally don't overlap, so the number positioning and tick density would need to intelligently adjust to avoid overlap depending on the canvas zoom level and tilt angle.    This is mostly a web issue, so Svelte/CSS/JS and figuring out some math and logic is required. Plumbing through the canvas tilt, thus extending upon the existing origin point and scale information sent by the backend, would be all the necessary Rust knowledge. [This PR](https://github.com/GraphiteEditor/Graphite/pull/1479) can provide a reference for what Rust code needs to change, and feel free to also reach out on Discord to ask for help with this aspect if you're unfamiliar with Rust.    A related followup task is #1969."
1467,Set up Rust-GPU CI automation,open,https://github.com/GraphiteEditor/Graphite/issues/1467,TrueDoctor,"Infrastructure,Testing,Graphene",TrueDoctor,0,2023-11-21T09:52:55Z,2025-01-19T21:46:43Z,,,No,Add a workflow and test cases for automated building and testing of node graph shaders.
1403,Pressure-sensitive drawing with pen tablets,open,https://github.com/GraphiteEditor/Graphite/issues/1403,Keavon,Web,,1,2023-08-28T00:29:56Z,2025-04-13T21:41:02Z,,,No,"We should extend our usage of the https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent API to include pressure, tilt, etc. and hook that up to the Brush tool.    Also consider implementing usage of this low-latency inking API:  - https://blogs.windows.com/msedgedev/2021/08/18/enhancing-inking-on-the-web/  - https://developer.mozilla.org/en-US/docs/Web/API/Ink_API"
1340,Add local font selection for supported browsers,open,https://github.com/GraphiteEditor/Graphite/issues/1340,Keavon,Web,,4,2023-07-30T02:45:39Z,2025-03-07T02:38:03Z,,,No,"Chromium browsers recently got the ability to browse local fonts. We should provide a way to choose between the Google Fonts list and local fonts, but gray that out with an explanation telling the user to use a Chromium browser for unsupported browsers.  - https://developer.mozilla.org/en-US/docs/Web/API/Local_Font_Access_API - https://developer.chrome.com/en/blog/how-boxysvg-uses-the-local-font-access-api/ - https://developer.chrome.com/articles/local-fonts/  Related: #2125"
1338,Chromium PWA white window frame does not respect system dark theme,open,https://github.com/GraphiteEditor/Graphite/issues/1338,loopervfx,"Web,Paper Cut",Keavon,2,2023-07-28T23:16:18Z,2025-04-09T10:57:19Z,,,No,![image](https://github.com/GraphiteEditor/Graphite/assets/15337230/1ffd01c3-eaf0-450f-abb8-ef3a5275bc25)  all in the title  
1303,Enable texture filtering,open,https://github.com/GraphiteEditor/Graphite/issues/1303,TrueDoctor,Graphics,,3,2023-06-08T08:58:29Z,2025-01-19T21:37:18Z,,,No,"Currently texture filtering is disabled for the rendering pipeline, we should try to reenable that"
1301,Add nodes for updating existing buffers,open,https://github.com/GraphiteEditor/Graphite/issues/1301,TrueDoctor,,TrueDoctor,0,2023-06-08T08:38:16Z,2025-01-19T21:36:50Z,,,No,
1300,Deploy compilation server,open,https://github.com/GraphiteEditor/Graphite/issues/1300,TrueDoctor,"Infrastructure,Graphene",TrueDoctor,0,2023-06-08T08:36:31Z,2025-01-19T21:47:45Z,,,No,- [x] Make compilation server cache requests  - [ ] Extend server to allow for multiple concurrent requests  - [ ] Extend server to compile using your current git revision
1299,Make textures usable in compute shaders,open,https://github.com/GraphiteEditor/Graphite/issues/1299,TrueDoctor,"Graphene,Graphics",TrueDoctor,0,2023-06-08T08:33:06Z,2025-01-19T22:09:26Z,,,No,
1298,Support document nodes with parameters as extract sources for GPU,open,https://github.com/GraphiteEditor/Graphite/issues/1298,TrueDoctor,"Graphene,Graphics",TrueDoctor,0,2023-06-08T08:18:48Z,2025-01-19T21:41:20Z,,,No,Support Document nodes with value parameters to be converted to compute shaders using the extract node
1297,Rewrite the Brush node to use the GPU and adaptive resolution system,open,https://github.com/GraphiteEditor/Graphite/issues/1297,TrueDoctor,,,0,2023-06-08T08:18:34Z,2025-01-19T21:35:25Z,,,No,
1271,Perspective skew on the transform cage,open,https://github.com/GraphiteEditor/Graphite/issues/1271,Keavon,,,9,2023-06-02T07:19:04Z,2025-01-19T22:09:27Z,,,No,This lets the user skew the perspective of the rectangle with some arbitrary affine transform. The user can access this by dragging a corner of the transform cage while holding <kbd>Ctrl</kbd>.
1247,Use a texture sampler instead of looping over pixels in the Blend node (and others),open,https://github.com/GraphiteEditor/Graphite/issues/1247,Keavon,Graphene,TrueDoctor,0,2023-05-26T15:56:25Z,2025-01-19T22:09:27Z,,,No,"The Blend node loops through all the pixels, which is a limitation causing ugly texture rendering and especially bad handling or rotation (and scaling) because it performs something like nearest neighbor sampling. The result is a very ugly image output and artifacts like #1132 and pixels ""jumping"" with an offset causing a blended image to appear one pixel to the side of its original.    Even on GPU, this for loop is converted into a parallelized execution of the loop's body, meaning the GPU is still just performing the nearest neighbor lookup in parallel. Instead, we want to utilize the texture sampler capabilities of the GPU, which would perform accurate pixel lookups with built-in texture interpolation (bilinear or bicubic instead of nearest neighbor). An added challenge is that `rust-gpu` currently does not provide any way to run an equivalent texture sampler concept on the CPU, since its crate provides the `Image` and `Sampler` API only when compiling to the GPU architecture (see https://github.com/EmbarkStudios/rust-gpu/issues/1065). Even if that blocks the CPU implementation, this issue should at least be able to be solved on GPU.    This probably affects more than just the Blend node— basically anything that needs to take an image input and sample from it with some offset/scale/rotation."
1244,Graph rewriting step,open,https://github.com/GraphiteEditor/Graphite/issues/1244,Keavon,Architecture,,0,2023-05-26T14:43:55Z,2025-01-19T22:09:28Z,,,No,This would be used to remove the [node] -> Extract -> GpuImage nodes and just leave [node] behind.    Also Clone and Cache node insertion dynamically so we can utilize caching everywhere instead of in the places they are manually inserted within the document graph implementations for certain nodes.
1173,Dynamic tables,open,https://github.com/GraphiteEditor/Graphite/issues/1173,Keavon,Design,,0,2023-04-26T20:29:38Z,2025-05-26T05:35:20Z,,,No,"Appends data that gets sent along in the node graph data flow. For example, appends a ""color"" attribute to each point in a list of points, allowing shapes instanced at those points to be colored accordingly. Or it can append the data for a color palette at the root of a document and that gets sent along to all descendants in the graph which can access that palette information.  See design details at #2522."
1170,Code editor for proto nodes,open,https://github.com/GraphiteEditor/Graphite/issues/1170,Keavon,"Architecture,Design,Graphene",,0,2023-04-26T19:43:31Z,2025-01-19T22:09:29Z,,,No,"We should add a [Monaco](https://github.com/microsoft/monaco-editor) code editor for the Rust code which provides the implementations for proto nodes, as well as surrounding proto node metadata. This would allow editing a proto node implementation or creating one's own proto nodes with new algorithms. This should be approachable once the prerequisites like #1300 are unblocked, but to move from an MVP to a more complete feature it'll require some design work for the UI as well."
1148,Auto-generate messages.ts from Specta macros,open,https://github.com/GraphiteEditor/Graphite/issues/1148,Keavon,"Infrastructure,Web",Keavon,0,2023-04-22T23:20:52Z,2025-01-19T22:09:05Z,,,No,"Currently we have to manually maintain `messages.ts` which is error-prone. We have already added Speca attributes to our types in Rust so it can generate a TS file for us, but there is some general work that needs to go into implementing that and standardizing/dealing with any handwritten magic/exceptions we use in our current `messages.ts`."
1139,Path tool point nudging UX improvements,open,https://github.com/GraphiteEditor/Graphite/issues/1139,Keavon,Paper Cut,,0,2023-04-16T23:10:39Z,2025-01-19T22:09:30Z,,,No,"Part of #820. Improves upon the MVP implementation in #1068. Requirements for this task are described in https://github.com/GraphiteEditor/Graphite/pull/1068#issuecomment-1509469810:    > Nudging a selected handle causes the opposing handle to match its length (like if you were dragging the handle while holding <kbd>Shift</kbd>). Let's have this distance mirroring happen only when holding <kbd>Ctrl</kbd> (or <kbd>Ctrl</kbd><kbd>Shift</kbd> for 10x nudging).  >   > When dragging or nudging both handles of a manipulator group at once, I'd like the handle to switch from smooth to split so the points are dragged or nudged together rather than trying to maintain their 180° mirroring.  >   > I'd like to be able to <kbd>Shift</kbd>-click an already selected handle to deselect it. Currently it seems to deselect the entire shape. And in order to select just one anchor/handle (thus deselecting all others), I seem to have to click twice right now when I'd expect to click only once for that to happen.  >   > When rotating a pair of handles, [this shouldn't be happening](https://files.keavon.com/-/UntimelyAttentiveCaecilian/capture_5_.mp4) where their lengths change. We probably want that case to do the same as rotating with just the anchor selected (same as next point).  >   > If you have just one handle selected, it should rotate the handle(s) around the anchor just like you had the anchor selected instead (the behavior for rotating the sole selected anchor is good).  >   > To distill the new desired behavior:  > - Points selected in only one manipulator group:  >     - `G`rabbing and dragging: current behavior is good, except if only the two handles are selected, then the handles should be split so the points can move in unison without having to respect the 180° smooth angle [which is weird](https://files.keavon.com/-/OurRuralSilkworm/capture_7_.mp4).  >     - `R`otation: should always rotate around the anchor regardless of which combination are selected. If a handle is split, only that handle should rotate around its anchor.  >     - `S`caling: should always scale around the anchor regardless of which combination are selected. If only one handle is selected, only that handle should scale towards the anchor. The current behavior is good when just the anchor (no handles) is selected, but the same should happen if both handles are selected (with or without its anchor) where they scale around the anchor instead of their common center.  > - Points selected across multiple manipulator groups:  >     - `G`rabbing and dragging: current behavior is good, except the same as above for cases where the two handles but not the anchor are selected and they should become split rather than [doing this funky thing (near the bottom)](https://files.keavon.com/-/UnacceptablePastOxen/capture_6_.mp4).  >     - `R`otating: Current behavior is good except that we want two selected handles to become split rather than fighting to remain at 180°.  >     - `Scaling`: Same as rotating."
1132,The Blend node's primary input is drawn with line artifacts on certain pixel rows,open,https://github.com/GraphiteEditor/Graphite/issues/1132,Keavon,,TrueDoctor,0,2023-04-15T22:40:50Z,2025-01-19T22:09:08Z,,,No,"The Blend node takes two inputs. But it is sampling the primary (top) input differently in a way that seems to cause artifacts, despite being identical inputs:    ![image](https://user-images.githubusercontent.com/4388688/232279879-2148f92d-fd1f-4f2e-9a52-d928790c5711.png)    This is the bottom input which renders correctly (when Opacity is set to 0%):  ![image](https://user-images.githubusercontent.com/4388688/232279505-8655d5a1-47f3-4d72-b12f-aad54321d3f6.png)    This is the primary (top) input which displays the artifacts on some rows (when Opacity is set to 100%):  ![image](https://user-images.githubusercontent.com/4388688/232279757-5429afac-998e-4493-8da1-cb66039c45bb.png)    This can be reproduced by giving the 512x512 [Lena image](https://upload.wikimedia.org/wikipedia/en/7/7d/Lenna_%28test_image%29.png) layer graph (topology shown above) a transform of `834.1126644638082` by `553.0840346358935` and a uniform scale of `723.0485350346357`."
1113,Restructure JS <-> Wasm communication flow and adopt parallelism,open,https://github.com/GraphiteEditor/Graphite/issues/1113,Keavon,"Help Wanted,Web,Performance",Keavon,3,2023-04-11T22:12:27Z,2025-01-19T21:34:23Z,,,No,"Right now, JS calls into Wasm, then that calls back into JS again, and that might call back into Wasm, and so on. It does that within the same call stack, so the call stack gets deeper and deeper ping-ponging between the two languages.    We want to flatten this out and build a queue system so either side can queue up tasks. One side processes its queue while building up a queue for the other side, then when done, it switches to the other side and works through its queue on that side, building up tasks for the other side to complete, then it switches again when the queue is done.    We also want to utilize web workers wherever possible to get everything but the DOM manipulations off the main thread, and also benefit where possible from parallelism."
1105,Tracking Issue: Text tool and typography improvements,open,https://github.com/GraphiteEditor/Graphite/issues/1105,nicoburns,,Keavon,4,2023-04-05T14:46:51Z,2025-07-02T00:33:11Z,,,No,"- [x] Searchable fonts (#1499) - [x] Line height (#2016) - [x] Character width (#2016) - [x] Wrapping text boxes (#2118, #2176) - [x] Faux italic (#2739) - [x] Bidirectional text (#2739) - [ ] #2351 - [ ] #978 - [ ] Style spans (so users can have a bold word in a paragraph of regular text or one word a different size/color/font than other words). - [ ] Move text editing to be fully handled by the editor (currently an input box is displayed and the text is hidden). An initial prototype exists at #1589. - [ ] Ligatures - [ ] Faux bold - [ ] Font fallback for other scripts (probably Noto Sans / Noto Serif seeing as we can't access the filesystem). - [ ] Advanced styling options - [ ] Inline graphics (other graphical content pasted as glyphs in the text flow)"
1002,Imaginate web hosting infrastructure,open,https://github.com/GraphiteEditor/Graphite/issues/1002,Keavon,Web,Keavon,0,2023-01-30T23:42:45Z,2025-01-19T22:09:32Z,,,No,
986,Node to cut an image out from its background and un-blend the translucent pixels,open,https://github.com/GraphiteEditor/Graphite/issues/986,Keavon,,,0,2023-01-22T07:30:20Z,2025-01-19T22:09:34Z,,,No,"This node would let you manually cut out a background by ""un-premultiplying"" the translucent pixels in an image. You feed it:  - The original image with both a foreground and background, where the translucency is ""baked in""  - Only the background, without the foreground that's being cut out  - A mask that you paint    The node produces the foreground content cut out using the transparency of the painted mask, with the translucent pixels changed to ""un-premultiply"" the blending with the background pixels.    (This is sort of conceptually equivalent to un-baking the ambient occlusion from a photoscanned 3D model.)    Example 1:    1. Take a photo (locked in place with a tripod) of someone holding a translucent object and wearing a fuzzy vest  2. Have them leave the frame and shoot another photo of just the backdrop  3. The first photo has features of the backdrop blended into the colors of pixels where the translucent object and edges of the fuzzy vest are (the foreground's translucent pixels are ""pre-multiplied"" with the background).  4. Manually draw a mask where the translucent parts are some intermediate (gray) strength value.  5. Feed these three inputs into this node and get an output that applies the mask and recolors the translucent pixels to remove the background's color contribution.    Example 2:    1. Take an image with a perfectly solid background color, where you wish the image instead had a transparent background.  2. Pick the color of the background to use as the background image.  3. The original image has the background color contaminating the translucent pixel colors where both the foreground and background color blend to form the resulting color (in areas of anti-aliasing around edges or translucency of the object itself).  4. Make a mask for the object that accounts for the anti-aliased edges and any areas of translucency in the subject.  5. Feed these three inputs into this node and get an output that applies the mask and recolors the translucent pixels to remove the background's color contribution."
978,Text on a path,open,https://github.com/GraphiteEditor/Graphite/issues/978,chrisyelf,Graphics,,2,2023-01-19T08:12:24Z,2025-02-18T11:49:43Z,,,No,"Hi,    Searching for Text being able to follow a Path (eg an invisible curve)  similar to Inkscape: https://youtu.be/B3MOgQjElJ4?t=323    I saw https://github.com/GraphiteEditor/Graphite/pull/374  but this still doesn't seem possible?"
950,Shape fill with custom pattern,open,https://github.com/GraphiteEditor/Graphite/issues/950,mariusa,,,5,2023-01-08T13:29:16Z,2025-01-19T22:09:35Z,,,No,"Hi,    I saw it's possible to fill a shape with a solid or gradient color.    Could custom patterns be supported too?    Here's a screenshot from Excalidraw:  ![Screenshot from 2023-01-08 15-21-18](https://user-images.githubusercontent.com/1283842/211198607-d5303303-b370-449e-b064-b1fad54b9788.png)    Thanks!"
912,Tracking Issue: New nodes,open,https://github.com/GraphiteEditor/Graphite/issues/912,Keavon,"Help Wanted,Good First Issue,Graphene",,3,2022-12-25T21:43:07Z,2025-06-29T21:12:25Z,,,No,"Status of this issue: all of this needs to be reviewed and revised. Consider this list to be more of ""inspiration"" than a todo list, until we can rework it in its entirety to create an actual todo list.  ---  This is a living, growing list. It's not organized and isn't ready-to-grab-from— please ask in Discord if you'd like to begin adding nodes or have an interest in certain ones, since they will probably need some discussion and some may be blocked on current technical limitations. But this does list a lot of opportunities for interesting contributions.  Documentation for making new nodes: https://github.com/GraphiteEditor/Graphite/blob/master/node-graph/README.md  ### Noise - [x] Pixel Noise - [x] Perlin and/or Simplex Noise (#1517) - [x] Voronoi Noise (#1517)  ### Image Dimensions - [ ] Crop based on margin - [ ] Crop based on top left offset and desired dimensions - [ ] Resize based on scale factor (user to choose interpolation method) - [ ] Resize based on desired resolution (user to choose interpolation method) - [ ] Tile to fill bounds - [ ] Get image dimensions (returns vec2)  ### Image transformations - [ ] Flip (choose horizontal or vertical) - [ ] Rotate (choose interpolation method and negative space fill) - [ ] Shift image (choose X, Y and negative space fill)  ### Image channels - [x] #1169 - [x] Extract Alpha - [x] Extract Opaque  ### Image adjustments - [x] Brightness/Contrast - [x] Levels - [ ] Curves - *requires custom widget* - [x] Exposure - [x] Vibrance - *still needs a Saturation slider* - [x] Hue/Saturation - *current algorithm is incorrect* - [ ] Color Balance - [x] Black & White - *rename from Grayscale* - [ ] Photo Filter - [x] Channel Mixer - [ ] Color Lookup - [x] Invert RGB - [x] Posterize - [x] Threshold - [x] Selective Color - [x] Gradient Map  ### Other adjustments - [x] Gamma - [x] Opacity - [x] #1391 (replace all colors with chosen color, keep alpha) - [ ] #986 - [ ] Height map to Normal map node  ### Filters - [x] #911 - [x] #995 - [ ] [Box blur](https://en.wikipedia.org/wiki/Box_blur) (a faster, lower-quality alternative to Gaussian Blur) - [ ] [Median](https://en.wikipedia.org/wiki/Median_filter) - [ ] [Sharpen](https://en.wikipedia.org/wiki/Unsharp_masking) - [ ] Dithering (various algorithms, see [this discussion](https://x.com/bbssppllvv/status/1835048028975112265))  ### Vector - [ ] Convert group containing paths to VectorData path with the shapes as subpaths - [ ] Metaballs from points-and-radii (see: <https://medium.com/@tbarrasso/advanced-meta-metaballs-864bbf0a945c>, <https://varun.ca/metaballs/>, <https://x.com/furafuku/status/1937586455930626439>) - [ ] Silhouette (removes all interior negative space and geometry, leaving only the outermost path; basically a boolean union operation that removes interior negative space as well) - [ ] Convex hull - [x] #1091 - [x] #1092 - [ ] https://github.com/GraphiteEditor/Graphite/issues/1162 Vector Edit (nondestructively apply a queue of operations from the Path tool to an existing shape) - [ ] Polyline Subsurf - [ ] Voronoi from Points (map a point cloud into vector shapes centered at those points forming a Voronoi diagram, with a smoothing option) - [ ] Roughen (amplitude, frequency, absolute/relative to scale, smooth/sharp) - [x] Spline from Polyline - [ ] Point/Handle Groups - [ ] Packing (support for both convex and concave) - [x] Area - [ ] Bounding Box (Modification) 	- [ ] -> Min (Top Left X,Y) 	- [ ] -> Max (Bottom Right X,Y) - [ ] Read (from Blender) 	- [ ] Curve Handle Positions 	- [ ] Curve Length 	- [ ] Curve Tangent 	- [ ] Endpoint Selection 	- [ ] Handle Type Selection 	- [ ] Is Spline Cyclic 	- [ ] Spline Length 	- [ ] Spline Parameter 	- [ ] Spline Resolution - [ ] Sample (from Blender) 	- [ ] Sample Curve - [ ] Write (from Blender) 	- [ ] Set Curve Normal 	- [ ] Set Curve Width 	- [ ] Set Curve Radius 	- [ ] Set Handle Positions 	- [ ] Set Handle Type 	- [ ] Set Spline Cyclic 	- [ ] Set Resolution 	- [ ] Set Spline Type - [ ] Operations (from Blender) 	- [ ] Curve to Points 	- [ ] Deform Curves on Surface 	- [ ] Fillet Curve 	- [ ] Interpolate Curves 	- [x] #1226 Resample Curves 	- [ ] Reverse Curve 	- [ ] Subdivide Curve 	- [ ] Trim Curve - [ ] Primitives (from Blender) 	- [ ] Arc 	- [ ] Bezier Segment 	- [x] Curve Circle 	- [x] Curve Line 	- [ ] Curve Spiral (But 2D) 	- [ ] Quadratic Bezier 	- [ ] Quadrilateral [Rectangle, Parallelogram, Trapezoid, Kite, Points] 	- [x] Star - [ ] Topology (from Blender) 	- [ ] Offset Point in Curve 	- [ ] Curve of Point 	- [ ] Points of Curve 	 ### Stroke (Modification) - [x] -> Fill Type [Solid, Gradient, Contour] - [x] -> Custom Width Profile - [x] -> Custom Line Join Profile - [x] -> Custom Line Cap Profile - [ ] -> Align[Center, Inside, Outside] - [ ] Expand Stroke  ### Contour Tool/Node - [x] -> Radius - [x] -> Contour Type[Round, Miter, Bevel, Custom] - [x] -> Miter - [x] -> Contour Cap[None, Round, Square] - [ ] -> Contour Fill[Auto Closed, Force Open, Force Closed] - [ ] -> Radius - [ ] -> Contour Type[Round, Concave, Straight, Cutout, Custom] - [ ] -> Selection  ### Brush - [x] #1069 - [ ] Texture - [ ] Properties (per stroke?)  ### Generic - [x] Repeat - [x] Circular repeat - [ ] Mirror - [ ] Scatter  ---  ### Widgets - [ ] Curves Widget  ### Instances (from Blender) - [x] Instance on Points (#1513) - [ ] Instance to Points - [ ] Realize Instances - [ ] Rotate Instances - [ ] Scale Instances - [ ] Translate Instances - [ ] Instance Rotation - [ ] Instance Scale  ### Instance Points (from Blender) - [ ] Distribute Points (Image (Should allow to use alpha as a Selection)/Vector)  ### Utilities - [ ] Color (from Blender) 	- [ ] Color Ramp 	- [ ] RGB Curves 	- [ ] Combine Color 	- [ ] Mix Color 	- [ ] Separate Color - [ ] String (from Blender) 	- [ ] Join Strings / concatinate 	- [ ] Replace String 	- [ ] Slice String (Index Offset or Text/Regex) 	- [ ] String Length 	- [ ] String to Curves 	- [ ] Value To String 	- [ ] Special Characters         - [ ] Text pad (inserts chars either at start or end until length is as desired) - [ ] Vector (from Blender) 	- [ ] Vector Curves 	- [ ] Vector Math 	- [ ] Vector Rotate 	- [ ] Combine XY/WH 	- [ ] Mix Vector 	- [ ] Separate XY/WH  ### Maths  NOTE: All will have Clamp Option (0.,1.)  - [ ] Functions 	- [x] Add 	- [x] Subtract 	- [x] Multiply 	- [x] Divide 	- [ ] Multiply Add 	- [x] Power 	- [x] Logarithm 	- [x] Square Root 	- [x] Absolute 	- [x] Exponent 	- [x] Clamp 	- [ ] Float curve 	- [ ] Map range - [ ] Comparison 	- [x] Min 	- [x] Max 	- [ ] Less Than 	- [ ] Greater Than 	- [ ] Sign 	- [ ] Compare 	- [ ] Smooth Minimum 	- [ ] Smooth Maximum - [ ] Rounding 	- [x] Round 	- [x] Floor 	- [x] Ceil 	- [ ] Truncate 	- [ ] Fraction 	- [x] Modulo 	- [ ] Wrap 	- [ ] Snap 	- [ ] Ping-Pong - [ ] Trigonometric 	- [x] Sine 	- [x] Cosine 	- [x] Tangent 	- [x] Arcsine 	- [x] Arccosine 	- [x] Arctangent 	- [x] Arctan2 	- [ ] Hyperbolic Sine 	- [ ] Hyperbolic Cosine 	- [ ] Hyperbolic Tangent - [ ] Conversion 	- [ ] To Radians 	- [ ] To Degrees - [ ] Mix - [ ] Vec2 	- [x] multiply by scalar or vector 	- [x] divide by scalar or vector 	- [x] add 	- [x] subtract 	- [ ] length 	- [ ] length squared 	- [ ] normalise 	- [ ] distance between two vectors 	- [x] dot product 	- [ ] cross product 	- [ ] ceil (per axis) 	- [ ] floor (per axis) 	- [ ] min (per axis) 	- [ ] max (per axis) 	- [ ] Linear interpolation (lerp)  ### Misc (from Blender) - [x] Random Value - [x] Switch"
909,"Make MenuLists populate their contents when opened, not beforehand",open,https://github.com/GraphiteEditor/Graphite/issues/909,Keavon,"Web,Performance",,0,2022-12-24T00:05:03Z,2025-01-19T22:09:06Z,,,No,"Sending the full MenuList contents each time a layout is sent seems to be causing massive performance slowdowns and memory allocations that have to later be GC'd. We want a MenuList to request its contents from the backend when it's opened, rather than being sent ahead of time in the layout that contains the MenuList. Profiling showed that MenuList creation was one cause of the editor being very slow (back when we were using Vue and its virtual DOM, at least— we'd need to re-profile it under Svelte to get a proper point of comparison)."
904,Shake a node to un-wire its connection through its primary input/output,open,https://github.com/GraphiteEditor/Graphite/issues/904,Keavon,"Good First Issue,Web",,2,2022-12-23T03:33:09Z,2025-01-19T22:09:36Z,,,No,We need some kind of robust shake detection algorithm in JS that has very minimal false positives/negatives.
900,Translation / Internationalization,open,https://github.com/GraphiteEditor/Graphite/issues/900,psvoboda76,Web,,4,2022-12-22T09:59:21Z,2025-07-01T05:07:53Z,,,No,"Hi,    It would be nice to have the Editor translated into different languages. I can manage Czech and German translation. Is the system ready for translation? If so, where can I find translation files?    Thanks for info    Petr"
871,Add Smoothing to the Freehand Tool,open,https://github.com/GraphiteEditor/Graphite/issues/871,Njasa2k,Graphics,,5,2022-12-01T17:50:07Z,2025-03-02T11:30:07Z,,,No,"Freehand tool: ""smoothing"" checkbox in its control bar, which adds a smoothing node downstream of the Path node."
860,Linked Artboards as facing pages and folds,open,https://github.com/GraphiteEditor/Graphite/issues/860,berserkwarwolf,,,0,2022-11-18T03:52:34Z,2025-01-19T22:09:40Z,,,No,"It would be great if artboards could be linked together as pages, to allow for automatic movement when one is resized.     Example:    ![unknown.png](https://user-images.githubusercontent.com/13665922/202612487-6810403a-2e04-463c-9546-14b1c2d31067.png)    That is a book cover, made with best practices in mind, in Indesign. Technically it's the same as a 5 fold brochure.    the background image can be attached to any page/artboard, right-aligned with autofit. If the spine is adjusted every page remains the same, except for the background which now shows more or less art depending if the spine was shrinked or enlarged.    Spine adjustments are important because they are re-adjusted every time the book is sent to print. Since the spine varies sizes depending not only on the number of pages but also the paper type, it's thickness, and other factors tied to the place where it will be printed.    Scribus can't make 5 folds (4 is the maximum), and the PDFs it exports are not fully compliant with the PDF X1A 2001 standard, meaning some professional users might be forced back to Adobe."
832,"Add modal tool states with the eyedropper, and implement pixel sampling in the color picker popover",open,https://github.com/GraphiteEditor/Graphite/issues/832,Keavon,Web,,1,2022-10-29T01:09:31Z,2025-01-19T22:09:40Z,,,No,"A ""modal tool state"" is a temporary state where a tool can present a simple mouse-based interaction, which takes precedence over the active tool. It shows hints, a custom cursor, and can direct messages on the different events (mousedown, mousemove, mouseup, keyboard modifiers, and keyboard events).    The first example, which this issue covers, is the eyedropper modal tool state. This should be activated by clicking the eyedropper icon in the ColorPicker.svelte popover. Also, the existing Eyedropper tool (accessible in the tool shelf as a full-blown tool) should, upon clicking with LMB or RMB, activate this modal tool to reuse its code. The modal tool state will need the current mouse position every frame it's moved (mousemove event) so it can send a `FrontendMessage::UpdateEyedropperSamplingState` message with the canvas position and other details. For this one, hitting <kbd>Escape</kbd> should exit the modal tool state and return back to whatever viewport tool the user was doing, in whatever state it was in.    Other future modal tool states, to provide some examples to understand how this feature will be used:  - ""Pick a layer to reference"" (in the Properties panel for a particular node that needs the input of another node/layer as a reference, Blender has something similar for picking a specific 3D object to reference when setting up shader nodes or other things)  - ""Quick export"" where you press a hotkey and drag a rectangle to instantly download a ""screenshot"" of that part of the canvas  - ""Paste style"" where you right click an object, click *Copy/Paste Style* from the context menu, and your cursor becomes a paste modal where you click on an object to paste the copied style on it as a target  - Other things where you hit a hotkey to enter the mode briefly and can use your mouse to interact on a temporary basis, usually where <kbd>Escape</kbd> exits the mode and returns to whatever actual tool you were using"
805,Global shortcut to enter Eyedropper picker state,open,https://github.com/GraphiteEditor/Graphite/issues/805,brainwo,,,1,2022-10-22T16:29:54Z,2025-01-19T22:09:41Z,,,No,"It would be nice to use the Eyedropper tool on a temporary basis without switching away from the current tool, to the Eyedropper tool, and back."
747,"Saving, updating, and reading files from disk",open,https://github.com/GraphiteEditor/Graphite/issues/747,Keavon,Web,,0,2022-08-07T01:04:15Z,2025-01-19T22:09:42Z,,,No,"https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API  https://developer.chrome.com/articles/file-system-access/  https://developer.chrome.com/articles/file-handling/    Supported on Chromium and Firefox, but Safari seems to not support writing (or it doesn't support the async version of the API, but it does support the sync WebWorker-only version or something?). So we'll potentially have to tailor the feature experience depending on the browser.    Eventual desired behavior: the document gets auto-saved in real time as the user works (perhaps whenever the history state is updated) to the browser's IndexedDB. If the user hits <kbd>Ctrl</kbd><kbd>S</kbd>/*File* > *Save*, it saves the file to disk at the existing document location, if that is available. If not, it asks the user to grant permission for a specific folder. We may need to build a file browser UI in that case to let the user pick where to organize the file within the granted folder scope. Unsupported browsers should potentially fall back to the current download-on-save/browse-on-open approach."
743,Replace shortcut_requires_lock system with an alternate keybind when not locked,open,https://github.com/GraphiteEditor/Graphite/issues/743,Keavon,Web,,0,2022-08-03T23:17:11Z,2025-01-19T22:09:42Z,,,No,"Move the concept of `shortcut_requires_lock` to the input mapper as an alternate keybinding for Mac and standard platforms. This should also, therefore, apply to all keymappings not just the menu bar dropdowns. Display the alternate keybind when keylock is not active (i.e. fullscreen in a Chromium-based browser). Get rid of the (?) thing and perhaps the ""Go fullscreen to access all hotkeys"" text.    - [ ] Test on Windows  - [ ] Test on Mac"
741,"Refactor the ""actions"" system into a unified and capable ""commands"" system",open,https://github.com/GraphiteEditor/Graphite/issues/741,Keavon,Web,,2,2022-07-30T20:50:18Z,2025-02-26T07:36:32Z,,,No,"Essentially, commands are a user-facing concept for translating user interaction into graph update messages. They are states of interaction that can be entered, canceled (aborted), committed, or replaced with another ongoing command.  ## Rename from actions to commands  The current approach based on the message system uses the term ""actions"". This refactor will instead use the term ""commands"" to distinguish it from the current approach, and because that is the preferable terminology.  ## Separation from message system  Currently, the message system is (ab)used for actions, which imposes some limitations. The whole action is a write-only event that must be dispatched instantaneously with known parameters. We need more flexibility for dynamically updating the parameters (like Blender's bottom left command parameters menu that can adjust the values after a command was run). Commands also need to report their current validity and status based on state and configurations. So it needs to be able to determine if it's valid to be run in the current state, and can report itself as grayed out if not. It also needs to know its current keyboard shortcuts so it can report that. Also, it needs to know its canonical organization within the menu bar's menus to tell the user where to look. It should also present a tooltip for the command definition, shown anywhere it's presented. These changes will also make it easier to break up document editing into discrete command steps, enabling the repeating of an action (#1979), showing in the *File* > *Undo*/*Redo* menu listings a name of the command that will be undone/redone, or even a whole history panel showing each editing step that changed the document.  ## Quick access menus and custom hotkey bindings  Any command should be able to be bound to a keyboard shortcut (#1544) or quick favorites, just like in Blender, by right clicking on it from any menu. Commands need to be standardized enough for display in different locations that any menu can utilize the reusable concept, whether that's in the menu bar entries, command palette (#384), any right click context menu (#138), and many dropdown menus that display a list of commands similar to a context menu.  ## Breaking out tool behavior into commands  Currently, the tools perform the actual interaction states. The state machine for a tool dictates what behavior the tool is engaging in at that time. We'd like to instead move towards a model where the tools aren't engaging in the behavior themselves, but just managing the transitions between states which run the commands that perform the behavior. That way many tools can reuse the same behavior. A good example is the Tilt command, which in its current (action) form, exists in three places: (1) from any tool by holding <kbd>Alt</kbd> + MMB and moving the cursor, (2) with the Navigate tool by holding <kbd>Alt</kbd> + LMB and moving the cursor, or (3) clicking the *View* > *Tilt* menu command (action) and moving the cursor (without any key held down).  ## Combine with the hints system  This lets us avoid redundantly specifying both the presently available actions (which are currently valid hotkeys) and curated hints (which are drawn for the user). By combining them, it forces us to be comprehensive about our hint list. We still need to provide the human-curated list of hints where a name and grouping is provided to render neatly for human consumption, but the attached actions would thus become part of the hints instead of being a separate system. Pulling off this change requires that we increase the capabilities of the input mapper for specifying how mouse interaction works with keys, and avoiding our current way of telling some messages to check for the status of certain modifier keys in the handler (those which use `refresh_keys` in the input mapper). We need to make changes to the system in order to be able to accurately derive the mouse and keyboard icons from the input mapper entry."
739,Replace hint Rust -> JS data with a widget layout,open,https://github.com/GraphiteEditor/Graphite/issues/739,Keavon,Web,,0,2022-07-26T21:07:18Z,2025-01-19T22:09:07Z,,,No,"Currently we send a bunch of recursive structs defining the layouts to JS, then Svelte renders it. That should be moved to a Rust-defined layout with the new layout system, which can then reduce the amount of code serving a redundant purpose of laying out widgets."
700,Update text live as it's typed in the Text node's properties panel field,open,https://github.com/GraphiteEditor/Graphite/issues/700,Keavon,,,0,2022-06-30T04:05:59Z,2025-01-19T22:09:43Z,,,No,"Editing the textarea for a text layer should update live in the viewport, and the viewport should update the properties panel. Perhaps with rate limiting to not slow down typing for larger amounts of text."
657,Support multiple panels and documents at once,open,https://github.com/GraphiteEditor/Graphite/issues/657,Keavon,Web,,0,2022-05-21T21:03:46Z,2025-01-19T22:09:44Z,,,No,"At the moment, the Svelte frontend hard-codes the workspace layout to show a Document panel (and tabs for other Document panels) on the left column and the Properties and Layer Tree panels on the right column. We don't support multiple panels of the same type because each panel component currently subscribes to messages.    On the frontend side, this should be remedied by moving any subscriptions (`subscribeJsMessage()` calls) in a `.svelte` component to a state provider. Then the panels can inject that state provider and reactively use the data. This way, multiple panels (i.e. multiple panel components) can use the same state, or the state provider can be set up to store copies for the multiple panels that it is in charge of where that's necessary.    On the backend side, everything is currently strewn around in various places (mostly dumped in `document_message_handler.rs`) in a way that doesn't conceptually correspond to a system of panels and the messages which handle the logic for those panels. We should create a folder/module in the root of the Editor called `workspace`. In it, a `workspace_message_handler.rs` handles the logic dealing with the layout like docking panels to different places, resizing the gutters between panels, and the overall column-row grid hierarchy which should be serialized to IndexedDB storage. In a subfolder called `panels`, we'll have `*_panel_message_handler.rs` files that are in charge of holding and sending the layouts using the new Rust-based layouts system. Currently these are layouts are awkwardly strewn around the application by applying `impl PropertyHolder` to random structs like the document message handler. It's doubly awkward when it's necessary for the same struct to support multiple layouts, like how we have the options bar for both the Document and Layer Tree panels in `document_message_handler.rs` defined in `fn update_document_widgets()` and `fn layer_tree_options()` instead of the `fn properties()` of `impl PropertyHolder`. Each of these layouts should be moved to a struct owned by each respective `editor/workspace/panels/*_panel_message_handler.rs` file.    In the case of the Document panel, we need the capability to display multiple instances of the same document in different panels. They need to support independent pan/tilt/zoom, snapping settings, overlays settings, normal/wireframe render modes, and active tools. This means that we need to store the document settings (like many of the things set in the options bar) on a per-panel instance basis rather than being part of the document in `document_message_handler.rs`. Or in the case of pan/tilt/zoom, no longer take the approach of setting these values on the root of the Graphene document itself (this change will also make it easier to get rid of the fact that undo/redo states affect pan/tilt/zoom which is undesirable). Moving code out of `DocumentMessageHandler` also means we can split out and reduce the size of that monolithic code file, which is a good thing for sure!    To handle rendering to the viewport of each panel with the same document, we need to route the concept of rendering through the `DocumentPanelMessageHandler` so it can provide Graphene's render function with information like the pan/tilt/zoom and the normal/wireframe render modes. When dirty, a re-render needs to occur, but ideally we would only dirty the document if something changed within the visible part of each viewport (not the culled items outside, see #608). So if you have two document panels open with the viewport showing different parts of the canvas, editing should only make the viewports which contain non-culled layers re-render for being dirtied. Conceptually, the idea of sending the rendered SVG of the document to the frontend is akin to the new system for sending widget layouts to the frontend as serde's JSON format, so the updated SVG viewport render should be routed the same way to the corresponding Document panel's viewport.    Lastly, the actual task of writing the JS to interactively drag tabs and panels to undock/dock will be necessary, but that's tracked by issue #195. But it may be possible to work around having to implement that feature at the same time as the rest of the refactors and work described in this PR. I'd like to be involved helping with the JS for panel docking since it's important to take an approach that implements it cleanly in the frontend architecture. But that and this issue can probably be done in either order, since that is mostly just the frontend Svelte and interactive JS event handling aspect while this is the data backing."
634,Improve FloatingMenu CSS so it stays with its parent scroll,open,https://github.com/GraphiteEditor/Graphite/issues/634,Keavon,Web,,0,2022-05-09T06:49:00Z,2025-01-19T22:09:08Z,,,No,"Before 8bc85bd774ff3349bbdc5eb652643bf69fee83e4, the CSS was set up to make floating menus employ a clever but fragile arrangement of `position: flex`, `position: absolute`, `transform: translate(0)`, and other properties to make the elements stick to the bottom of their parent (without needing JS to position them) and also not get clipped by the `overflow: hidden` of their containing panel.    It was discovered that this arrangement did not hold up to the problem of scrolling the parent, such as the Properties panel containing widgets that spawn a floating menu (like ColorInput). 8bc85bd774ff3349bbdc5eb652643bf69fee83e4 used JS to fix this, but doing so has the drawback that it isn't recomputed automatically by the CSS engine when things change. Window resizes, scrolling the parent, and other changes can cause the position of the spawner to change but the JS won't update the floating menu.    When placing floating menus within other floating menus (specifically, a DropdownInput inside a DialogModal in #629), it became necessary to further complicate the JS logic by disabling the positioning behavior. But if a DialogModal ever has scrollable content in the future, disabling it won't fix the original scrolling problem.    If possible, investigate a primarily CSS-based solution that's robust to the challenges described above. Then revert the complex JS that was introduced in that commit. This might help: https://css-tricks.com/popping-hidden-overflow/    Additionally, Safari behaves differently and currently clips the floating menu within a scrollable panel (but not non-scrollable ones, it seems... or at least it does for the Properties panel but not the Document panel). And in Safari, our distance-to-edge measuring code also seems to calculate the edges wrong since the primary/secondary color picker swatch goes too low and cuts it off the bottom of the app. So another solution is needed for the problem as a whole, but it also needs to account for fixing these issues on Safari."
586,Real-world units of measure,open,https://github.com/GraphiteEditor/Graphite/issues/586,alezzacreative,Web,,2,2022-04-16T17:18:49Z,2025-01-19T22:09:45Z,,,No,i would love us to have this very quick way to change the units in the ruler (its common in adobe products) an inkscape dev added it  just yesterday after alot of user requests.  https://user-images.githubusercontent.com/63913433/163684811-305787d7-88ce-4dc8-9410-42c14d19baa9.mp4  thank you  
584,Release Linux builds through common app stores via Flatpak/AppImage/Snap packages,open,https://github.com/GraphiteEditor/Graphite/issues/584,13hannes11,Infrastructure,,15,2022-04-16T13:07:51Z,2025-07-01T15:52:30Z,,,No,"It would be great to have an installable editor, for example as Flatpak or AppImage."
567,Export clean SVGs with user-specified metadata,open,https://github.com/GraphiteEditor/Graphite/issues/567,psvoboda76,,,4,2022-03-14T09:51:29Z,2025-01-19T22:09:46Z,,,No,Blocked on #1832    This is the following [roadmap](https://graphite.rs/features/#roadmap) item:    ![capture](https://github.com/user-attachments/assets/b45f1f8a-4eb5-4247-a814-6dedab8e0677)  
542,Allow zooming with two fingers on touchpads and mobile devices,open,https://github.com/GraphiteEditor/Graphite/issues/542,bjorn3,Web,,3,2022-02-12T19:55:07Z,2025-01-19T22:09:47Z,,,No,
541,Allow moving objects on mobile devices,open,https://github.com/GraphiteEditor/Graphite/issues/541,bjorn3,Web,,0,2022-02-12T19:54:07Z,2025-01-19T22:09:47Z,,,No,Currently it results in deselecting the object. Only resizing is possible.
540,Allow ending paths and splines on mobile devices,open,https://github.com/GraphiteEditor/Graphite/issues/540,bjorn3,,,0,2022-02-12T19:52:50Z,2025-01-19T22:09:48Z,,,No,Currently this requires switching to another tool and back.
384,Command palette menu,open,https://github.com/GraphiteEditor/Graphite/issues/384,makoConstruct,"Web,Design",,0,2021-10-11T02:32:12Z,2025-02-05T11:26:53Z,,,No,"A sublime-style command search bar is easily the best way to access any feature that wouldn't have a dedicated on-screen button, or that would be used infrequently enough that the user couldn't be expected to remember its keybinding. You are going to end up with a lot of those sorts of features.    Command searchers are also great for confirming or disconfirming the presence of a feature, discovering related features, or even just as an alternative to keybindings, they're often barely slower to use than keybindings, and they're always faster than clicking through menus.    If you are already maintaining hierarchical menus, a command bar requires no additional upkeep, it is just a search over the names and descriptions you're already maintaining.    Hierarchical menus will probably always have to be kept around for mouse-only users, but for anyone who uses a keyboard, well, for me at least, menus completely fall out of use, they're never preferable.    Command searches might have a bit of a discoverability problem, they're not visible when the user isn't interacting with them. I guess we could solve that by detecting when a user has a keyboard, uses, it, and is fumbling a bit in using the menus, then telling them ""press Ctrl+P and type the name of the feature you're looking for"" once or twice.    ---    ### Implementation thoughts    This likely goes hand-in-hand with #741 since it requires a refactor to more properly define what an ""action"" is from a global list, like it is in Blender; and such a refactor will likely be done in concert with that issue too, as well as #1544.    The de facto standard for keybinding for these seems to be Ctrl+P. Ctrl+R is also used for quick searchers, in subline, and might be easier to remember (R is for Run).    The best algorithm for these seems not to be the obvious search ranking algorithms. It should prefer to match initialisms, then whole words, and only after that should it resort to ranking results by hamming distance. This tends to let users narrow in on the feature they're looking for with as few keystrokes as possible, often to the point of making keybindings unnecessary. A while back I wrote up an algorithm that works this way, that I was quite happy with: https://github.com/makoConstruct/CleverMatcher/blob/master/CleverMatcher.coffee     That algorithm is just a linear scan over the whole set, I'm not sure that it will feel responsive enough once there are multiple hundreds of features, although it's conceivable that the main command search should be limited to only the most used 95% of features to avoid clogging search results with strange things.    But I don't think it should stop at 95%, maybe in another section, or under another keybinding, or perhaps after pressing Ctrl+P a second time? Or tab? a command search could make every preference and config instantly accessible. I've never seen any application go that far, I think I can see why they might not have done so, but I think I can see solutions. They might not have thought of showing those extra results in a separate section, they might not have thought of giving the program enough information about the types and allowed values of their preferences/conf variables so that the program could create a reasonable UI for working them. In sublime, the standard workflow for editing a config variable is to open the config text and ctrl+f it. This seems reasonable, but I think it would actually be substantially slower than having a command search that knows about preference/config variables.    Even without covering config variables, of course, this would be a very useful feature.    ---    (I should also probably introduce myself. I'm a rust programmer and a frequent vector graphics user, I might actually want to implement most of this if the project is receptive to it.)"
360,Better testing infrastructure,open,https://github.com/GraphiteEditor/Graphite/issues/360,Keavon,Testing,,4,2021-08-26T12:01:41Z,2025-01-19T22:09:50Z,,,No,"We have, so far, written a minimal amount of tests in order to focus on rapid prototyping without major concern for breakage, in the absence of actual users. As the scope of the project grows, the permutations of cases where regressions can crop up is making it harder to detect bugs purely by hand. Users might also care about stability, even though 0.1 is alpha.    We should build testing infrastructure to help create tests. Thanks to the project architecture which is split between the Editor Frontend, Editor Backend, Graphene, and (eventually) Charcoal, with the message dispatch system tying them together, it should be pretty easy to write tests in general by writing many tests using messages. Some infrastructure can include a way of recording messages for easy copy and paste into tests, thereby turning manual tests into automated tests.    This issue can serve as a good place to discuss other forms of testing infrastructure to help make it easy to write and maintain efficacious tests."
331,Add document Guide Mode,open,https://github.com/GraphiteEditor/Graphite/issues/331,Keavon,"Web,Design",,0,2021-08-07T03:53:05Z,2025-01-19T22:09:50Z,,,No,"Guide Mode (<kbd>Ctrl</kbd><kbd>Tab</kbd> to enter and return to Design Mode) is used to draw shapes for the purpose of measurement, snapping, alignment, and constraints. Horizontal and vertical rulers are the simplest examples. Other shapes are also possible, though, and their outlines remain visible in Design Mode for visual and measuring reference.    ![capture](https://github.com/user-attachments/assets/d3295bb8-06d2-4ce9-b8e9-360d126662ad)    ---    This might actually end up being called Constraint Mode."
330,Mask Mode for creating a marequee selection,open,https://github.com/GraphiteEditor/Graphite/issues/330,Keavon,Graphics,mTvare6,0,2021-08-07T03:49:58Z,2025-05-20T05:57:49Z,,,No,"### Intro:    Mask Mode (<kbd>Q</kbd> to enter and return to Design Mode) is used to select parts of the document by drawing a mask, shown as marching ants over the main document. This mask is created with all the standard tools (vector/raster/etc.) and ends up as a group of layers that get plugged into the mask input of any layers subsequently modified in Design Mode (where the marching ants remain visible).    ![image](https://user-images.githubusercontent.com/4388688/234751197-37eff532-ed1f-4fcc-979b-6e1380a0631f.png)    ### How to implement it:    Masking will work by creating a special folder with a unique folder ID, with an opacity of 50%, and everything you draw will be put into that folder while you're in Mask Mode. It'll appear on top of all other artwork (since it's always the top folder). When you return back to Design Mode, it gets hidden but is sent to JS for rasterization, and that resulting image becomes the mask. Marching ants are drawn in the frontend based on a threshold of that bitmap at a brightness of 150/255 (I'll have to figure out the best way to leverage web technologies to render that animation faithfully). The first step can be deleting the content in the selected layer by applying that rasterized mask as an image fed into a mask node at the layer's graph output.    ### Further description of the desired feature behavior:    At any time while in the viewport, <kbd>Q</kbd> may be pressed to enter mask mode. The underlying canvas seen before entering this mode is still shown, but masks are drawn as marching ants (or other optional overlays) above the main document content. While in this mode, an island layer group is provided as the destination for drawing new mask layers using the regular set of tools. The Layer Panel also still shows the underlying main document, which lets the user select layers as contextual inputs for tools that are aware of input layers, like the Fill Tool. Rather than showing the full-color shapes over the main document canvas, they are overlaid in outline view mode, or maybe a reduced opacity (perhaps user configurable), and surrounded by a marching ants marquee outline.    The mask group may be isolated (meaning it becomes the full render output to the viewport instead of being drawn on top of the main artwork, and a breadcrumb trail is shown leading from the document to the isolated/orphaned group/subgraph) which makes the viewport output show the mask in grayscale and has the Layer Panel host the contents of the mask group. While in mask mode, the working colors are temporarily replaced with a grayscale pair. Certain tools, such as the Freehand Tool and Pen Tool, may default to a ""closed"" form in mask mode by turning off stroke and setting fill to white in order to provide functionality akin to the lasso or polygonal lasso selection tools. <kbd>Q</kbd> may be hit again to exit mask mode, but the marching ants still show up over the artwork while a selection exists. But with the selection present, all tools used and commands performed will take into account the working mask. <kbd>Esc</kbd> will discard the working mask.  "
320,Implement the pixelated view mode,open,https://github.com/GraphiteEditor/Graphite/issues/320,Keavon,,,4,2021-07-31T11:45:55Z,2025-02-04T06:06:29Z,,,No,"While in the Pixels view mode, all content should be rendered at the scale of the document's pixels. If zoomed in further, this essentially means that resolution-agnosticism is disabled for the viewport preview and pixels show up. This is useful to see how an image will look when it is exported. This can use the SVG rasterization code in `rasterization.ts`."
313,Tracking Issue: Improve the NumberInput widget UX,open,https://github.com/GraphiteEditor/Graphite/issues/313,henryksloan,Web,,4,2021-07-28T01:36:52Z,2025-02-10T13:22:12Z,,,No,"The NumberInput widget should support more common ways of modifying numerical widgets, namely:  - [x] Dragging left/right to adjust the value (#1468) - [x] When dragging, <kbd>Shift</kbd> slows it down by adjusting the next order of magnitude of less precision and <kbd>Ctrl</kbd> snaps to increments of the current order of magnitude of precision (#1468) - [x] When dragging, <kbd>Escape</kbd> and right click abort the change (#1468) - [x] Add an integrated label to be shown on the left side, with the value on the right side, instead of the default value-centered display - [x] #1471 - [x] Holding down the mouse button on the arrow to change it multiple times; this should probably work like key repeat, with an initial delay and a constant rate of repetition (#2276) - [ ] While editing the number field, Up/Down arrows should increment/decrement by 1 and Shift+Up/Down by 10 - [ ] Hover mouse over it to copy and paste value - [ ] Hover mouse over and hit Backspace to reset the value to its default - [ ] Hover mouse over and hit - to negate the current value - [ ] Hover mouse over it and hit Enter key to start editing (like clicking) - [ ] Hover mouse over it and hit / to set the value to its reciprocal - [ ] Hover mouse over it and Ctrl+scroll wheel to increment/decrement the value - [ ] Detect and clean up floating point imprecision with numbers like `123.450000000000003` or `0.9999999999997` using a heuristic to convert those to `123.45` and `1.0`. - [ ] Precision issues with values greater than JS's `Number.MAX_SAFE_INTEGER` (`9007199254740991`) which is still less than Rust's `u64`. Typing certain values like `9007199254740995` and `9007199254740997` both get turned into nearby values like `9007199254740995` for some but not all values. This means we need to use `bigint` more consistently throughout the entire pipeline in the frontend. - [ ] Unit conversions in the input boxes, blocked on #586"
217,Feature Request: Layout Modelling,open,https://github.com/GraphiteEditor/Graphite/issues/217,giannissc,,,0,2021-06-16T14:35:57Z,2025-01-19T22:45:07Z,,,No,"This is a request to implement various positioning algorithms used by GUI frameworks such as grid layout, flow (vertical/horizontal) layout, masonry.    Also other options could be to position components using various patterns (e.g. mirror, rectangle, circular or on a bezier path)    Could be useful when doing ui protyping!"
216,CAD-like constraint-based modeling,open,https://github.com/GraphiteEditor/Graphite/issues/216,giannissc,"Architecture,Graphene",,12,2021-06-16T14:32:46Z,2025-01-19T22:09:53Z,,,No,Coming from the world of CAD I would really like it if constraints were available for modelling. They can be really useful when changing a design but wanting some features to be connected a certain way. The alternative way of doing this without constraints would be to scale every component independently and moving them around until thing look right.    I haven't seen in into any other program (other than point coincident contraint) and I think it would be really useful.
202,How to contribute,open,https://github.com/GraphiteEditor/Graphite/issues/202,Keavon,,,0,2021-06-13T04:21:22Z,2023-08-11T20:37:02Z,,,No,# Welcome    It's great to hear you are interested in contributing to Graphite! We want to make it as easy and frictionless as possible for you to get started. Here are the basics.    **[Read the intro guide on the Graphite website](https://graphite.rs/volunteer/guide/)**
195,Rearrange and dock tabs and panel groups in the editor workspace,open,https://github.com/GraphiteEditor/Graphite/issues/195,Keavon,Web,,2,2021-06-13T03:34:23Z,2025-01-19T22:09:54Z,,,No,This should eventually hook up to the Rust editor backend to save the workspace layout but a frontend-only implementation is all this issue requires for now.    Related: #657
182,Build a console,open,https://github.com/GraphiteEditor/Graphite/issues/182,Keavon,"Architecture,Web",,1,2021-06-12T18:43:55Z,2025-01-19T22:09:54Z,,,No,"This would help influence the overall design in a way that is future proof for the extensions system, scripting, and a headless or CLI version of the Graphite editor. Like in Blender, if you click a button to do something, it will be shown in the console (helpful for API discoverability) and you can also type your own commands."
138,Add context menus to the floating menu system,open,https://github.com/GraphiteEditor/Graphite/issues/138,Keavon,Web,Keavon,2,2021-05-23T07:58:47Z,2025-03-09T23:03:40Z,,,No,
123,Build the document journal (history chain),open,https://github.com/GraphiteEditor/Graphite/issues/123,TrueDoctor,Architecture,,2,2021-05-10T13:10:11Z,2025-01-19T22:09:56Z,,,No,~~Generate inverse operation for a given operation and store both in the document.  This will be used to implement the history feature~~    Store a chain of history events and add the ability to navigate in it.    Should be done after: #134     Complexity: 5  Involves: Document (Rust)
